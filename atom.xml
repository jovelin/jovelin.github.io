<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jovelin&#39;s Blog</title>
  
  <subtitle>To Be a Better Me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jovelin.cn/"/>
  <updated>2018-07-06T02:24:51.000Z</updated>
  <id>http://jovelin.cn/</id>
  
  <author>
    <name>Jovelin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反问学习法（what、why、where），十万个为什么</title>
    <link href="http://jovelin.cn/2018/07/06/%E5%8F%8D%E9%97%AE%E5%AD%A6%E4%B9%A0%E6%B3%95%EF%BC%88what%E3%80%81why%E3%80%81where%EF%BC%89%EF%BC%8C%E5%8D%81%E4%B8%87%E4%B8%AA%E4%B8%BA%E4%BB%80%E4%B9%88/"/>
    <id>http://jovelin.cn/2018/07/06/反问学习法（what、why、where），十万个为什么/</id>
    <published>2018-07-06T02:13:37.000Z</published>
    <updated>2018-07-06T02:24:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道你们有没有这样的感受，就是当学完了一个知识点，可能知道怎么用、知道写代码的步骤（像套模板一样，按照案例、步骤一步步码出来），反正就是代码我能写出来，但是这个知识点是什么？为什么用它？在哪里使用这个知识点？往往就不是很清楚，有点印象、模模糊糊，理解不透彻。</p><a id="more"></a><p>平常工作的话，知道怎么用、知道怎么实现该功能，反正能完成任务即可，管它那么多！</p><p>那么问题来了，既然平常工作都没什么问题，还管它那么多干啥呢干啥呢。。</p><p><strong>原因有两点：</strong></p><p>一、深度掌握（用起来得心应手）</p><p>不只是照抄搬运，不是所有事情 copy 就能实现，要合理利用以前写过的案例，实现过的项目功能，懂得哪些地方能抄，也要懂得想改哪里就改哪里（就像一个人物换了个皮肤，相同点还是不变的，不同点就需要自己去发现去改造了，比如：变好看了，攻击变强了。。）</p><p>二、面试</p><p>大家都知道一个完整的面试包括三个流程（1、笔试 2、技术面试 3、hr面谈）</p><p>当然也有不用笔试的，2轮技术面试的也有，没有 hr 面谈的也大有存在，CTO 直接就能决定你的薪资，这也是小公司和大公司的一种差异</p><p>1.笔试：也就类似我们平常的考试，选择题、大题都有，只不过是综合的罢了（基础）</p><p>2.技术面谈：</p><ol><li>就你写的技术进行提问（一般有三种掌握程度，了解/熟练/精通）</li><li><p>项目上的提问（实现的过程、某个难点技术、碰到的 bug、团队开发遇到的问题都有。。）</p><pre><code>***这就不仅仅是 知道怎么用、知道怎么实现该功能 就能过关了，和下面演示的 3W 有关系了。**</code></pre></li><li>hr 面谈（恭喜你基本已经被录用了，谈工资这一块了，砍价、福利。。）</li></ol><blockquote><p>知识点分类：</p><p>1.死知识（不用死记硬背，API 文档、笔记、博客查阅即可） </p><p>2.理解性知识（理解实现原理，懂得框架，实现时灵活运用）</p></blockquote><p><strong>以 socket 知识点为例：</strong></p><p>———socket———</p><p>what<br>是什么？（概念、理解）</p><p>socket(简称 套接字 也称为插口–流对象) 是进程间通信的一种方式</p><p>why<br>为什么用？（好处，特点即不同点）</p><p>是实现tcp和udp的底层技术，实现 不同主机间 的进程间通信</p><p>where<br>在哪使用？（案例、实战）</p><p>网络程序发送、接收数据（发短信、打电话、广播）</p><p>————end————</p><blockquote><p>人生苦短，我用 Python，为何你要用 Python？———杠精</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道你们有没有这样的感受，就是当学完了一个知识点，可能知道怎么用、知道写代码的步骤（像套模板一样，按照案例、步骤一步步码出来），反正就是代码我能写出来，但是这个知识点是什么？为什么用它？在哪里使用这个知识点？往往就不是很清楚，有点印象、模模糊糊，理解不透彻。&lt;/p&gt;
    
    </summary>
    
      <category term="学习方法" scheme="http://jovelin.cn/categories/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="学习方法" scheme="http://jovelin.cn/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>认识 Python</title>
    <link href="http://jovelin.cn/2017/06/22/%E8%AE%A4%E8%AF%86%20Python/"/>
    <id>http://jovelin.cn/2017/06/22/认识 Python/</id>
    <published>2017-06-22T13:25:32.000Z</published>
    <updated>2018-06-22T14:00:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Python-的起源"><a href="#1-Python-的起源" class="headerlink" title="1. Python 的起源"></a>1. Python 的起源</h2><p>人生苦短，我用 Python</p><blockquote><p>Python 的创始人为吉多·范罗苏姆（Guido van Rossum）</p></blockquote><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/3365001-0748c25c80efb613.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="002_吉多.jpg"></p><ul><li><p>Python的作者，Guido von Rossum，荷兰人。1982年，Guido从阿姆斯特丹大学获得了数学和计算机硕士学位。然而，尽管他算得上是一位数学家，但他更加享受计算机带来的乐趣。用他的话说，尽管拥有数学和计算机双料资质，他总趋向于做计算机相关的工作，并热衷于做任何和编程相关的活儿。</p></li><li><p>在那个时候，Guido接触并使用过诸如Pascal、C、Fortran等语言。这些语言的基本设计原则是让机器能更快运行。Guido知道如何用C语言写出一个功能，但整个编写过程需要耗费大量的时间，即使他已经准确的知道了如何实现。这种编程方式让Guido感到苦恼。</p></li><li><p>他的另一个选择是shell。Bourne Shell作为UNIX系统的解释器已经长期存在。UNIX的管理员们常常用shell去写一些简单的脚本，以进行一些系统维护的工作，比如定期备份、文件系统管理等等。shell可以像胶水一样，将UNIX下的许多功能连接在一起。许多C语言下上百行的程序，在shell下只用几行就可以完成。然而，shell的本质是调用命令。它并不是一个真正的语言。比如说，shell没有数值型的数据类型，加法运算都很复杂。总之，shell不能全面的调动计算机的功能。</p></li><li><p>Guido希望有一种语言，这种语言能够像C语言那样，能够全面调用计算机的功能接口，又可以像shell那样，可以轻松的编程。</p></li><li><p>1989年，为了打发圣诞节假期，Guido开始写Python语言的编译器。Python这个名字，来自Guido所挚爱的电视剧Monty Python’s Flying Circus。他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。Guido作为一个语言设计爱好者，已经有过设计语言的尝试。这一次，也不过是一次纯粹的hacking行为。</p></li></ul><h3 id="一门语言的诞生"><a href="#一门语言的诞生" class="headerlink" title="一门语言的诞生"></a>一门语言的诞生</h3><ul><li><p>1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了 ：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。</p></li><li><p>Python语法很多来自C，但又受到ABC语言的强烈影响。来自ABC语言的一些规定直到今天还富有争议，比如强制缩进。 但这些语法规定让Python容易读。另一方面，Python聪明的选择服从一些惯例，特别是C语言的惯例，比如回归等号赋值。Guido认为，如果“常识”上确立的东西，没有必要过度纠结。</p></li><li><p>Python从一开始就特别在意可拓展性。Python可以在多个层次上拓展。从高层上，你可以直接引入. py文件。在底层，你可以引用C语言的库。Python程序员可以快速的使用Python写. py文件作为拓展模块。但当性能是考虑的重要因素时，Python程序员可以深入底层，写C程序，编译为.so文件引入到Python中使用。Python就好像是使用钢构建房一样，先规定好大的框架。而程序员可以在此框架下相当自由的拓展或更改。</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3365001-fa16f0a8dfd6f173.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="001_人生苦短我用python.jpg"></p><p>人生苦短，我用 Python</p><ul><li><p>由于计算机性能的提高，软件的世界也开始随之改变。硬件足以满足许多个人电脑的需要。硬件性能不是瓶颈，Python又容易使用，所以许多人开始转向Python。Guido维护了一个maillist，Python用户就通过邮件进行交流。Python用户来自许多领域，有不同的背景，对Python也有不同的需求。Python相当的开放，又容易拓展，所以当用户不满足于现有功能，很容易对Python进行拓展或改造。随后，这些用户将改动发给Guido，并由Guido决定是否将新的特征加入到Python或者标准库中。如果代码能被纳入Python自身或者标准库，这将极大的荣誉。由于Guido至高无上的决定权，他因此被称为“终身的仁慈独裁者”。</p></li><li><p>Python被称为“Battery Included”，是说它以及其标准库的功能强大。这些是整个社区的贡献。Python的开发者来自不同领域，他们将不同领域的优点带给Python。比如Python标准库中的正则表达是参考Perl，而lambda, map, filter, reduce等函数参考了Lisp。Python本身的一些功能以及大部分的标准库来自于社区。Python的社 区不断扩大，进而拥有了自己的newsgroup，网站，以及基金。从Python 2.0开始，Python也从maillist的开发方式，转为完全开源的开发方式。社区气氛已经形成，工作被整个社区分担，Python也获得了更加高速的发展。</p></li><li><p>到今天，Python的框架已经确立。Python语言以对象为核心组织代码，支持多种编程范式，采用动态类型，自动进行内存回收。Python支持解释运行，并能调用C库进行拓展。Python有强大的标准库。由于标准库的体系已经稳定，所以Python的生态系统开始拓展到第三方包。这些包，如Django、web.py、wxpython、numpy、matplotlib、PIL，将Python升级成了物种丰富的热带雨林。</p></li><li><p>Python崇尚优美、清晰、简单，是一个优秀并广泛使用的语言。Python在TIOBE排行榜中排行第八，它是Google的第三大开发语言，Dropbox的基础语言，豆瓣的服务器语言。Python的发展史可以作为一个代表，带给我许多启示。</p></li><li><p>在Python的开发过程中，社区起到了重要的作用。Guido自认为自己不是全能型的程序员，所以他只负责制订框架。如果问题太复杂，他会选择绕过去，也就是cut the corner。这些问题最终由社区中的其他人解决。社区中的人才是异常丰富的，就连创建网站，筹集基金这样与开发稍远的事情，也有人乐意于处理。如今的项目开发越来越复杂，越来越庞大，合作以及开放的心态成为项目最终成功的关键。</p></li><li><p>Python从其他语言中学到了很多，无论是已经进入历史的ABC，还是依然在使用的C和Perl，以及许多没有列出的其他 语言。可以说，Python的成功代表了它所有借鉴的语言的成功。同样，Ruby借鉴了Python，它的成功也代表了Python某些方面的成功。每个语言都是混合体，都有它优秀的地方，但也有各种各样的缺陷。同时，一个语言“好与不好”的评 判，往往受制于平台、硬件、时代等等外部原因。程序员经历过许多语言之争。其实，以开放的心态来接受各个语言，说不定哪一天，程序员也可以如Guido那样，混合出自己的语言。</p></li></ul><h4 id="关键点常识"><a href="#关键点常识" class="headerlink" title="关键点常识"></a>关键点常识</h4><ul><li>Python的发音与拼写</li><li>Python的作者是Guido van Rossum（龟叔）</li><li>Python正式诞生于1991年</li><li>Python的解释器如今有多个语言实现，我们常用的是CPython（官方版本的C语言实现），其他还有Jython（可以运行在Java平台）、IronPython（可以运行在.NET和Mono平台）、PyPy（Python实现的，支持JIT即时编译）</li><li><p>Python目前有两个版本，Python2和Python3，最新版分别为2.7.14和3.6.4</p></li><li><p>2018年1月份 编程语言流行排行榜</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3365001-cee017a6aa9e6af4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIOBE-201801.png"></p><h2 id="2-Python-优缺点"><a href="#2-Python-优缺点" class="headerlink" title="2. Python 优缺点"></a>2. Python 优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>简单————Python是一种代表简单主义思想的语言。阅读一个良好的Python程序就感觉像是在读英语一样，尽管这个英语的要求非常严格！Python的这种伪代码本质是它最大的优点之一。它使你能够专注于解决问题而不是去搞明白语言本身。</p></li><li><p>易学————就如同你即将看到的一样，Python极其容易上手。前面已经提到了，Python有极其简单的语法。</p></li><li><p>免费、开源————Python是FLOSS（自由/开放源码软件）之一。简单地说，你可以自由地发布这个软件的拷贝、阅读它的源代码、对它做改动、把它的一部分用于新的自由软件中。FLOSS是基于一个团体分享知识的概念。这是为什么Python如此优秀的原因之一——它是由一群希望看到一个更加优秀的Python的人创造并经常改进着的。</p></li><li><p>高层语言————当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节。</p></li><li><p>可移植性————由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就可以在下述任何平台上面运行。这些平台包括Linux、Windows、FreeBSD、Macintosh、Solaris、OS/2、Amiga、AROS、AS/400、BeOS、OS/390、z/OS、Palm OS、QNX、VMS、Psion、Acom RISC OS、VxWorks、PlayStation、Sharp Zaurus、Windows CE甚至还有PocketPC、Symbian以及Google基于linux开发的Android平台！</p></li><li><p>解释性————这一点需要一些解释。一个用编译性语言比如C或C++写的程序可以从源文件（即C或C++语言）转换到一个你的计算机使用的语言（二进制代码，即0和1）。这个过程通过编译器和不同的标记、选项完成。当你运行你的程序的时候，连接/转载器软件把你的程序从硬盘复制到内存中并且运行。而Python语言写的程序不需要编译成二进制代码。你可以直接从源代码运行程序。在计算机内部，Python解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行。事实上，由于你不再需要担心如何编译程序，如何确保连接转载正确的库等等，所有这一切使得使用Python更加简单。由于你只需要把你的Python程序拷贝到另外一台计算机上，它就可以工作了，这也使得你的Python程序更加易于移植。</p></li><li><p>面向对象————Python既支持面向过程的编程也支持面向对象的编程。在“面向过程”的语言中，程序是由过程或仅仅是可重用代码的函数构建起来的。在“面向对象”的语言中，程序是由数据和功能组合而成的对象构建起来的。与其他主要的语言如C++和Java相比，Python以一种非常强大又简单的方式实现面向对象编程。</p></li><li><p>可扩展性————如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们。</p></li><li><p>丰富的库————Python标准库确实很庞大。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）、Tk和其他与系统有关的操作。记住，只要安装了Python，所有这些功能都是可用的。这被称作Python的“功能齐全”理念。除了标准库以外，还有许多其他高质量的库，如wxPython、Twisted和Python图像库等等。</p></li><li><p>规范的代码————Python采用强制缩进的方式使得代码具有极佳的可读性。</p></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>运行速度，有速度要求的话，用C++改写关键部分吧。</li><li>国内市场较小（国内以python来做主要开发的，目前只有一些web2.0公司）。但时间推移，目前很多国内软件公司，尤其是游戏公司，也开始规模使用他。</li><li>中文资料匮乏（好的python中文资料屈指可数）。托社区的福，有几本优秀的教材已经被翻译了，但入门级教材多，高级内容还是只能看英语版。</li><li>构架选择太多（没有像C#这样的官方.net构架，也没有像ruby由于历史较短，构架开发的相对集中。Ruby on Rails 构架开发中小型web程序天下无敌）。不过这也从另一个侧面说明，python比较优秀，吸引的人才多，项目也多。</li></ol><h2 id="3-Python-应用场景"><a href="#3-Python-应用场景" class="headerlink" title="3. Python 应用场景"></a>3. Python 应用场景</h2><ul><li><p><strong>Web应用开发</strong></p><p>Python经常被用于Web开发。比如，通过mod_wsgi模块，Apache可以运行用Python编写的Web程序。Python定义了WSGI标准应用接口来协调Http服务器与基于Python的Web程序之间的通信。一些Web框架，如Django,TurboGears,web2py,Zope等，可以让程序员轻松地开发和管理复杂的Web程序。</p></li><li><p><strong>操作系统管理、服务器运维的自动化脚本</strong></p><p>在很多操作系统里，Python是标准的系统组件。 大多数Linux发行版以及NetBSD、OpenBSD和Mac OS X都集成了Python，可以在终端下直接运行Python。有一些Linux发行版的安装器使用Python语言编写，比如Ubuntu的Ubiquity安装器,Red Hat Linux和Fedora的Anaconda安装器。Gentoo Linux使用Python来编写它的Portage包管理系统。Python标准库包含了多个调用操作系统功能的库。通过pywin32这个第三方软件 包，Python能够访问Windows的COM服务及其它Windows API。使用IronPython，Python程序能够直接调用.Net Framework。一般说来，Python编写的系统管理脚本在可读性、性能、代码重用度、扩展性几方面都优于普通的shell脚本。</p></li><li><p><strong>科学计算</strong></p><p>NumPy,SciPy,Matplotlib可以让Python程序员编写科学计算程序。</p></li><li><p><strong>桌面软件</strong></p><p>PyQt、PySide、wxPython、PyGTK是Python快速开发桌面应用程序的利器。</p></li><li><p><strong>服务器软件（网络软件）</strong></p><p>Python对于各种网络协议的支持很完善，因此经常被用于编写服务器软件、网络爬虫。第三方库Twisted支持异步网络编程和多数标准的网络协议(包含客户端和服务器)，并且提供了多种工具，被广泛用于编写高性能的服务器软件。</p></li><li><p><strong>游戏</strong></p><p>很多游戏使用C++编写图形显示等高性能模块，而使用Python或者Lua编写游戏的逻辑、服务器。相较于Python，Lua的功能更简单、体积更小；而Python则支持更多的特性和数据类型。</p></li><li><p><strong>构思实现，产品早期原型和迭代</strong></p><p>YouTube、Google、Yahoo!、NASA都在内部大量地使用Python。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Python-的起源&quot;&gt;&lt;a href=&quot;#1-Python-的起源&quot; class=&quot;headerlink&quot; title=&quot;1. Python 的起源&quot;&gt;&lt;/a&gt;1. Python 的起源&lt;/h2&gt;&lt;p&gt;人生苦短，我用 Python&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 的创始人为吉多·范罗苏姆（Guido van Rossum）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python基础" scheme="http://jovelin.cn/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python基础" scheme="http://jovelin.cn/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="http://jovelin.cn/2017/06/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>http://jovelin.cn/2017/06/22/计算机组成原理/</id>
    <published>2017-06-22T01:47:06.000Z</published>
    <updated>2018-06-22T01:55:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是计算机？"><a href="#什么是计算机？" class="headerlink" title="什么是计算机？"></a>什么是计算机？</h1><p>计算机（computer）俗称电脑，是现代一种用于高速计算的电子机器，可以进行数值计算，又可以进行逻辑判断，还具有存储记忆功能，且能够按照程序的运行，自动、高速处理数据。</p><blockquote><p>计算机是20世纪最先进的科学技术发明之一。</p></blockquote><a id="more"></a><h1 id="计算机是由什么组成的？"><a href="#计算机是由什么组成的？" class="headerlink" title="计算机是由什么组成的？"></a>计算机是由什么组成的？</h1><p><strong>一个完整的计算机系统，是由<code>硬件系统</code>和<code>软件系统</code>两大部分组成的。</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/3365001-8aefbecac43e38e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="computer.png"></p><h2 id="1-硬件系统"><a href="#1-硬件系统" class="headerlink" title="1. 硬件系统"></a>1. 硬件系统</h2><p>主要分为主机和外设两部分，是指那些构成计算机系统的物理实体，它们主要由各种各样的电子器件和机电装置组成。</p><p>从ENIAC(世界上第一台计算机)到当前最先进的计算机，硬件系统的设计采用的都是 冯·诺依曼体系结构。</p><p><img src="https://upload-images.jianshu.io/upload_images/3365001-5f9b4bea1ca081e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="冯诺依曼体系结构.png"></p><blockquote><p>运算器:　负责数据的算术运算和逻辑运算，即数据的加工处理。</p><p>控制器:　是整个计算机的中枢神经，分析程序规定的控制信息，并根据程序要求进行控制，协调计算机各部分组件工作及内存与外设的访问等。</p><p>运算器和控制器统称中央处理器（即CPU)</p><p>存储器:　实现记忆功能的部件，用来存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。</p><p>输入设备:　实现将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。</p><p>输出设备:　实现将计算机处理后生成的中间结果或最后结果（各种数据符号及文字或各种控制信号等信息）输出出来。</p></blockquote><h2 id="2-软件系统"><a href="#2-软件系统" class="headerlink" title="2. 软件系统"></a>2. 软件系统</h2><p>主要分为系统软件和应用软件，是指计算机证运行所需的各种各样的计算机程序。</p><p>系统软件的任务是既要保证计算机硬件的正常工作，又要使计算机硬件的性能得到充分发挥，并且为计算机用户提供一个比较直观、方便和友好的使用界面。</p><h3 id="2-1-操作系统（Operation-System，OS）"><a href="#2-1-操作系统（Operation-System，OS）" class="headerlink" title="2.1 操作系统（Operation System，OS）"></a>2.1 操作系统（Operation System，OS）</h3><ul><li>没有安装操作系统的计算机，通常被称为 <strong>裸机</strong></li><li>如果想在 <strong>裸机</strong> 上运行自己所编写的程序，就必须用机器语言书写程序</li></ul><blockquote><p>操作系统作为接口的示意图</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/3365001-724f676482e34f05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="001_OS作为接口的示意图.png"></p><h4 id="2-1-1-操作系统的作用："><a href="#2-1-1-操作系统的作用：" class="headerlink" title="2.1.1 操作系统的作用："></a>2.1.1 操作系统的作用：</h4><ul><li>是现代计算机系统中 <strong>最基本和最重要</strong> 的系统软件</li><li>主要作用是<strong>管理好硬件设备</strong>，并为用户和应用程序提供一个简单的接口，以便于使用</li><li>而其他的诸如驱动程序、编译程序、数据库管理系统，以及大量的应用软件，都直接依赖于操作系统的支持</li></ul><h3 id="2-2-其他系统程序"><a href="#2-2-其他系统程序" class="headerlink" title="2.2 其他系统程序"></a>2.2 其他系统程序</h3><ul><li><p><strong>驱动程序</strong>：真正管理和控制硬件的程序，往往操作系统会携带一些默认版本</p></li><li><p><strong>语言处理程序</strong>：也称为编译程序，作用是把程序员用某种编程语言(如Python)所编写的程序，翻译成计算机可执行的机器语言。机器语言也被称为机器码，是可以通过CPU进行分析和执行的指令集。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是计算机？&quot;&gt;&lt;a href=&quot;#什么是计算机？&quot; class=&quot;headerlink&quot; title=&quot;什么是计算机？&quot;&gt;&lt;/a&gt;什么是计算机？&lt;/h1&gt;&lt;p&gt;计算机（computer）俗称电脑，是现代一种用于高速计算的电子机器，可以进行数值计算，又可以进行逻辑判断，还具有存储记忆功能，且能够按照程序的运行，自动、高速处理数据。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算机是20世纪最先进的科学技术发明之一。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python基础" scheme="http://jovelin.cn/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机" scheme="http://jovelin.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习大纲</title>
    <link href="http://jovelin.cn/2017/06/21/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/"/>
    <id>http://jovelin.cn/2017/06/21/Python基础学习大纲/</id>
    <published>2017-06-21T12:34:44.000Z</published>
    <updated>2018-07-06T02:24:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><p>1.掌握 Python 基础语法, 具备基础的编程能力；</p><p>2.建立起编程思维以及面向对象程序设计思想。</p><p>3.能够熟练使用 Python 技术完成较小程序的开发以及简单小游戏程序的开发。</p><a id="more"></a><hr><h3 id="学习知识点"><a href="#学习知识点" class="headerlink" title="学习知识点"></a>学习知识点</h3><h4 id="1-计算机组成原理"><a href="#1-计算机组成原理" class="headerlink" title="1.计算机组成原理"></a><a href="http://jovelin.cn/2017/06/22/计算机组成原理/">1.计算机组成原理</a></h4><p>认识操作系统以及操作系统的作用</p><h4 id="2-认识-Python"><a href="#2-认识-Python" class="headerlink" title="2.认识 Python"></a>2.认识 Python</h4><p>认识 Python 及了解 Python 发展历史</p><h4 id="3-Python-开发环境"><a href="#3-Python-开发环境" class="headerlink" title="3.Python 开发环境"></a>3.Python 开发环境</h4><p>Python 开发环境的搭建、Sublime 使用、Python 交互式终端使用、IPython 交互式终端使用、Pycharm 使用</p><h4 id="4-Python-基础变量"><a href="#4-Python-基础变量" class="headerlink" title="4.Python 基础变量"></a>4.Python 基础变量</h4><p>变量以及变量的类型、标识符和关键字、变量名命名方式、算数运算符、变量数据类型转换、输入和输出、注释 </p><h4 id="5-逻辑控制语句"><a href="#5-逻辑控制语句" class="headerlink" title="5.逻辑控制语句"></a>5.逻辑控制语句</h4><p>if语句基本格式、if…else…语句、if…elif..else语句、逻辑运算符、比较关系运算符、运算符优先级、while循环语法格式、while嵌套应用、break的用法、continue的用法 </p><h4 id="6-高级变量类型"><a href="#6-高级变量类型" class="headerlink" title="6.高级变量类型"></a>6.高级变量类型</h4><p>列表概念及操作、元组概念及操作、字典概念及操作、字符串概念及操作、集合概念及操作、for循环及for…else用法 </p><h4 id="7-函数应用"><a href="#7-函数应用" class="headerlink" title="7.函数应用"></a>7.函数应用</h4><p>函数的基本语法、函数执行流程、文档注释、带参数的函数、带返回值的函数、函数的嵌套调用、匿名函数、递归函数、局部变量和全局变量、引用 </p><h4 id="8-文件操作"><a href="#8-文件操作" class="headerlink" title="8.文件操作"></a>8.文件操作</h4><p>文件的概念、文件的打开与关闭、文件读写, 以及文件定位读写、文件、目录相关操作 </p><h4 id="9-面向对象"><a href="#9-面向对象" class="headerlink" title="9.面向对象"></a>9.面向对象</h4><p>面向对象介绍、类和对象的概念、魔术方法的意义及作用、对象成员的访问控制权限、继承的概念及意义、继承、多层继承和多继承、多态的概念以及应用、类属性和实例属性、实例方法、类方法、静态方法、设计模式: 单例模式</p><h4 id="10-异常处理"><a href="#10-异常处理" class="headerlink" title="10.异常处理"></a>10.异常处理</h4><p>理解异常的作用、捕获异常、异常的传递规则、自定义异常 </p><h4 id="11-模块和包"><a href="#11-模块和包" class="headerlink" title="11.模块和包"></a>11.模块和包</h4><p>模块和包的概念、<strong>all</strong>的用法、import语句用法、from…import…用法、from…import * 用法</p><hr><h3 id="项目演练"><a href="#项目演练" class="headerlink" title="项目演练"></a>项目演练</h3><h4 id="飞机大战"><a href="#飞机大战" class="headerlink" title="飞机大战"></a>飞机大战</h4><p>pygame介绍、界面搭建、键盘事件检测、显示飞机、<br>控制飞机、飞机发射子弹、显示敌机、敌机移动规则、敌机发射子弹、碰撞检测、面向对象完成代码封装</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h3&gt;&lt;p&gt;1.掌握 Python 基础语法, 具备基础的编程能力；&lt;/p&gt;
&lt;p&gt;2.建立起编程思维以及面向对象程序设计思想。&lt;/p&gt;
&lt;p&gt;3.能够熟练使用 Python 技术完成较小程序的开发以及简单小游戏程序的开发。&lt;/p&gt;
    
    </summary>
    
      <category term="Python基础" scheme="http://jovelin.cn/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python基础" scheme="http://jovelin.cn/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="学习大纲" scheme="http://jovelin.cn/tags/%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm for Mac 快捷键</title>
    <link href="http://jovelin.cn/2017/06/20/Pycharm-for-Mac-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://jovelin.cn/2017/06/20/Pycharm-for-Mac-快捷键/</id>
    <published>2017-06-20T01:27:58.000Z</published>
    <updated>2018-06-20T02:15:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pycharm-for-Mac-快捷键"><a href="#Pycharm-for-Mac-快捷键" class="headerlink" title="Pycharm for Mac 快捷键"></a>Pycharm for Mac 快捷键</h3><p>ctrl + r                            运行</p><p>ctrl + d                           调试</p><p>ctrl + shift + r                 从编辑器运行上下文环境配置</p><p>ctrl + shift + d                从编辑器调试上下文环境配置</p><a id="more"></a><p>ctrl + opt + r                   弹出 Run 的可选菜单</p><p>ctrl + opt + d                  弹出 Debug 的可选菜单</p><p>fn + f8                            单步调试，跳过函数</p><p>fn + f7                            单步调试，会进入函数内部</p><p>cmd + 1                         展开收缩左边文件栏</p><p>cmd + /                          注释/取消注释一行</p><p>fn + ctrl + space            基本代码补全（补全任何类、方法、<br>变量）</p><p>cmd + shift + -/+           收缩/展开代码块</p><p>cmd + opt + l                 格式化代码</p><p>fn + cmd + f2                 退出运行</p><p>cmd + shift + 上/下        移动代码块</p><p>cmd + z                          撤回</p><p>cmd + shift + z               取消撤回</p><p>cmd + opt + r                 跳到下一个断点</p><p>fn + cmd + shift + f8      查看所有断点</p><p>ctrl + j                             查看函数文档注释</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Pycharm-for-Mac-快捷键&quot;&gt;&lt;a href=&quot;#Pycharm-for-Mac-快捷键&quot; class=&quot;headerlink&quot; title=&quot;Pycharm for Mac 快捷键&quot;&gt;&lt;/a&gt;Pycharm for Mac 快捷键&lt;/h3&gt;&lt;p&gt;ctrl + r                            运行&lt;/p&gt;
&lt;p&gt;ctrl + d                           调试&lt;/p&gt;
&lt;p&gt;ctrl + shift + r                 从编辑器运行上下文环境配置&lt;/p&gt;
&lt;p&gt;ctrl + shift + d                从编辑器调试上下文环境配置&lt;/p&gt;
    
    </summary>
    
      <category term="Pycharm" scheme="http://jovelin.cn/categories/Pycharm/"/>
    
    
      <category term="Pycharm" scheme="http://jovelin.cn/tags/Pycharm/"/>
    
      <category term="快捷键" scheme="http://jovelin.cn/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>写作都需要的中文排版指南</title>
    <link href="http://jovelin.cn/2017/01/20/%E5%86%99%E4%BD%9C%E9%83%BD%E9%9C%80%E8%A6%81%E7%9A%84%E4%B8%AD%E6%96%87%E6%8E%92%E7%89%88%E6%8C%87%E5%8D%97/"/>
    <id>http://jovelin.cn/2017/01/20/写作都需要的中文排版指南/</id>
    <published>2017-01-20T02:33:10.000Z</published>
    <updated>2018-06-21T13:47:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文适用于所有编辑、作家、撰稿人、公众号作者、博主等，甚至适合所有人，因为人的一生难免避免不了写作。</p><a id="more"></a><h3 id="1-空格"><a href="#1-空格" class="headerlink" title="1. 空格"></a>1. 空格</h3><p>我每次看到网页上的中文字和英文、数字、符号挤在一起，就会坐立不安，忍不住想在他们之间加个空格。</p><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在34岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。」</p><p><strong>中英文之间需要加空格</strong></p><p>eg. 大家可以在 GitHub 上搜索 jovelin 找到我。</p><p><strong>中文与数字之间需要加空格</strong></p><p>eg. 不知不觉，我已经工作 2 年了。</p><p><strong>数字与单位之间需要加空格</strong></p><p>eg. 我有一个 2 TB 的网盘，貌似还是不够用。</p><p><strong>完整的英文整句时标点与单词之间需要加空格</strong></p><p>eg. Don’t tangle, not hesitant.</p><p>But，也有一些例外：</p><p><strong>度的标志、百分号不加空格</strong></p><p>eg. 今天气温有 32° 的高温。</p><p><strong>全角标点与其他字符之间不加空格</strong></p><p>eg. 大家好，我是 jovelin，请多多关照。</p><h3 id="2-标点"><a href="#2-标点" class="headerlink" title="2. 标点"></a>2. 标点</h3><p>说到标点，不得不说下全角和半角，很多人可能不了解全角和半角的概念，这里顺便介绍下。</p><p>全角和半角是英文和中文的编码规范不同遗留下的问题，简单来说，全角占两个字节，半角占一个字节，你可以理解成中文汉字是全角，英文字母是半角，不过半角全角主要是针对标点符号来说的，中文标点占两个字节，英文标点占一个字节。体现在排版上的差异就是，全角字符屏幕打印宽度是两个，而半角字符屏幕打印宽度是一个，如中文逗号和英文逗号他们的显示分别是「，」和「,」。</p><p><strong>使用全角中文标点</strong></p><p>中文排版中所有的标点都应该使用中文全角中文标点</p><p>eg. 大家好，我是 jovelin。</p><p><strong>遇到英文整句、特殊名词时使用半角标点</strong></p><p>eg. 乔布斯说过：「Stay hungry, stay foolish.」</p><p>eg. Facebook, Inc.</p><p><strong>使用直角引号</strong></p><p>我国国家标准要求弯引号，但是个人建议在新媒体排版时使用直角引号。</p><p>eg. 你竟然不知道「MacBook Pro」？</p><p><strong>如果引号中使用引号使用直角双引号</strong></p><p>eg. 我质问他，「你难道忘记『乔布斯』了么？」</p><h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h3><p>除以上之外，还有一些其他标准推荐大家使用的。</p><p><strong>英文名词首字母尽量大写</strong></p><p>eg. Google、Android、Facebook。</p><p><strong>专有名词使用正确的大小写</strong></p><p>eg. GitHub、Python、iOS、iPhone X、MacBook Pro。</p><p><strong>首行不要缩进</strong></p><p>这点可能有人不同意，但是我要在这里解释下，在说明之前我们必须弄明白「首行缩进」的目的是什么。</p><p>「每段之前空两格」是我们从小学写作文就养成的习惯，也是正式文体的格式要求，其目的是为了区分自然段。</p><p>但是像我们现在接触的阅读，都是没有固定的格式要求的，如微信公众号、电子文档等，所以大家一般都采用「空出一行」进行自然段与自然段之间的区分，这种写作方式非常省事，而且很整齐。</p><p>所以，我认为这种应该是最科学的方式，只要没有明确的格式要求，写作的排版无须首行缩进。</p><p><strong>适当的间距、空行</strong></p><p>如果段落太长，可以使用适当的空行分段，比如这篇文章，这样不会给读者造成阅读压力，提升阅读体验。</p><p>最后，你可能会问，以上这些原则是业界标准么？我不敢保证，但是你不妨看下 「Apple 中国官网」、「Microsoft 中国官网」、公众号「小道消息」、「MacTalk」、「可能吧」等的排版，基本都是使用以上排版标准。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/25797162" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25797162</a></p><p><a href="https://zhuanlan.zhihu.com/p/20506092" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/20506092</a></p><p><a href="https://github.com/mzlogin/chinese-copywriting-guidelines" target="_blank" rel="noopener">mzlogin/chinese-copywriting-guidelines</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文适用于所有编辑、作家、撰稿人、公众号作者、博主等，甚至适合所有人，因为人的一生难免避免不了写作。&lt;/p&gt;
    
    </summary>
    
      <category term="写作排版" scheme="http://jovelin.cn/categories/%E5%86%99%E4%BD%9C%E6%8E%92%E7%89%88/"/>
    
    
      <category term="写作排版" scheme="http://jovelin.cn/tags/%E5%86%99%E4%BD%9C%E6%8E%92%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>简书的 Markdown 编辑器</title>
    <link href="http://jovelin.cn/2017/01/15/%E7%AE%80%E4%B9%A6%E7%9A%84Markdown%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://jovelin.cn/2017/01/15/简书的Markdown编辑器/</id>
    <published>2017-01-15T02:27:38.000Z</published>
    <updated>2018-06-20T02:31:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在简书的设置中，根据路径 <strong>基础设置 -&gt; 常用编辑器 -&gt; 点选Markdown </strong>即可启用markdown编辑器。<br>然后在创作文章的管理界面，点击切换到预览模式按钮，即可出现实时预览的创作界面。我们在左侧输入文字，在右侧会自动显示预览。</p></blockquote><a id="more"></a><h4 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h4><p><img src="http://upload-images.jianshu.io/upload_images/3365001-7607b3cb9f492354.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标题"></p><p>将1~6个#井号放在标题内容的前面，就能够轻松的表示不同字号的标题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题 字号最大</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题 字号最小</span><br></pre></td></tr></table></figure><p>预览效果在上图中已经清晰的展示出来，大家也可以立刻启用简书的markdown工具，跟着文章开始动手尝试。</p><blockquote><p>为了规范使用习惯，建议大家在字符与文字之间留一个空格，在后面的许多语法也是同样的建议。</p></blockquote><h4 id="二、分割线"><a href="#二、分割线" class="headerlink" title="二、分割线"></a>二、分割线</h4><p><img src="http://upload-images.jianshu.io/upload_images/3365001-4c84abae30469393.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多个横杠和等号可以用表表示一级标题和二级标题以及分割线"></p><p>使用3个以上的任意数量的-_*符号，即可输出一条分割线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 以下几种情况都能够输出分割线</span><br><span class="line">********</span><br><span class="line">----------</span><br><span class="line">______</span><br></pre></td></tr></table></figure><p>我们可以看到，图中还可以使用文字加上等号与减号分别表示一级标题与二级标题。</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 大于两个任意数量的等号</span><br><span class="line">一级标题</span><br><span class="line">======</span><br><span class="line">// 大于两个任意属相的减号</span><br><span class="line">二级标题</span><br><span class="line">----</span><br></pre></td></tr></table></figure><h4 id="三、段落引用-Blockquotes"><a href="#三、段落引用-Blockquotes" class="headerlink" title="三、段落引用 Blockquotes"></a>三、段落引用 Blockquotes</h4><p><img src="http://upload-images.jianshu.io/upload_images/3365001-2bd1d495e1c43a23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="段落引用"></p><blockquote><p>在普通段落前面加上一个 &gt; 符号，即可将该段落标记为引用。在引用中，能够与其他任意语法组合。</p></blockquote><p>输入一个空行，可结束一段引用。 </p><h4 id="四、无序列表"><a href="#四、无序列表" class="headerlink" title="四、无序列表"></a>四、无序列表</h4><p><img src="http://upload-images.jianshu.io/upload_images/3365001-4fa700b7ce018f4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无序列表"></p><ul><li>加号+空格 ‘+ ‘</li></ul><ul><li>减号+空格 ‘- ‘</li></ul><ul><li>星号+空格 ‘* ‘</li></ul><p>+-*任意一种字符与空格组合，能将一个段落标记为无序列表。无序列表中也可以与其他语法组合使用。</p><p>输入一个空行，可结束一个无序列表。</p><h4 id="五、有序列表"><a href="#五、有序列表" class="headerlink" title="五、有序列表"></a>五、有序列表</h4><p><img src="http://upload-images.jianshu.io/upload_images/3365001-89b2566a7c842eda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有序列表"></p><ol start="0"><li><strong>任意数字与空格组合，可以开始一个有序列表。</strong>即使每一列的数字并不是按顺序来，输出结果也会智能的从1开始依次排序。</li><li><strong>数字+点+空格</strong> 开始一个有序列表</li><li>后面的只要都是数字，无论是多少</li><li>都会自动按顺序识别。</li></ol><ol><li>使用两行空格或者其他诸如图片这样的格式，能够终止一个有序列表。</li></ol><h4 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h4><p><img src="http://upload-images.jianshu.io/upload_images/3365001-dbc786df222a3baa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="超链接"></p><p><a href="http://www.jianshu.com/u/149c3a6ceb25" target="_blank" rel="noopener">我的簡書</a> <a href="https://github.com/jovelin" target="_blank" rel="noopener">github</a></p><p><em>[]()</em> 可以输出一个超链接。其中中括号中填写文字信息，小括号中填写链接地址信息。简书可以保留复制格式，也就是说，如果你从其他地方复制一个带超链接的文字过来，超链接会自动保留。</p><h4 id="七、图片"><a href="#七、图片" class="headerlink" title="七、图片"></a>七、图片</h4><p><img src="http://upload-images.jianshu.io/upload_images/3365001-aab9682ae3425bd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p><p><img src="http://upload.jianshu.io/users/upload_avatars/3365001/e1eae8fc5f67.png?imageMogr2/auto-orient/strip|imageView2/1/w/240/h/240" alt="头像"></p><p><em>![]()</em> 可以输出一张图片的显示。其中中括号中填写图片的描述信息，描述信息最终会在图片下方的横线中显示。小括号中填写图片的地址。</p><p>而在图片的处理上，简书的markdown做到了最人性化的体验。我们可以使用剪切工具比如QQ或者微信的剪切工具在电脑上任意剪切一张图，然后就可以直接复制在简书里。如下图所示。这一点，极大的便利了我们对图片的处理。我们不用将图片保存起来，然后拖入简书。本文中所有的图片都是剪切后直接复制进来的，简单快捷方便。大爱这个特性。</p><p><img src="http://upload-images.jianshu.io/upload_images/3365001-580a8c35a74ef48f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="直接将复制在剪切板的图片粘贴进来即可，简书的markdown工具会自动上传到cdn服务器"></p><h4 id="八、强调"><a href="#八、强调" class="headerlink" title="八、强调"></a>八、强调</h4><p><img src="http://upload-images.jianshu.io/upload_images/3365001-334388a61e3e19d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="强调"></p><p>*_ 可以设置文字为加粗或者斜体。具体使用情况见图。</p><h4 id="九、代码块"><a href="#九、代码块" class="headerlink" title="九、代码块"></a>九、代码块</h4><p><img src="http://upload-images.jianshu.io/upload_images/3365001-241af0b59a0a47d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码块"></p><p>这是程序员大爱的语法。<br>在 <strong><code></code></strong> 符号中输入文字或者代码片段，输入的文字将会被标注起来。<br>例如 <code>这是一段被标注的文字</code>。<br>代码块效果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 这里面支持代码高亮。</span><br><span class="line">// 所以我们程序员写博客，会经常将我们的代码放在这个语法中。</span><br><span class="line">// 不同的功能会显示出不同的颜色。</span><br><span class="line">// 例如注释</span><br><span class="line">var $element = document.querySelector(&apos;#container&apos;);</span><br></pre></td></tr></table></figure></p><h4 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h4><p><img src="http://upload-images.jianshu.io/upload_images/3365001-0f93642e1981a639.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表格"></p><table><thead><tr><th style="text-align:center">姓名</th><th style="text-align:center">性别</th><th style="text-align:center">年龄</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">jovelin</td><td style="text-align:center">男</td><td style="text-align:center">20</td><td style="text-align:center">简书</td></tr></tbody></table><p>在我们写文章的时候，虽然表格被用到的时候并不多，但是这确实是一个功能强大的语法，能在我们需要时轻松帮助我们解决困难。</p><p>语法的中间部分|:—:|:—:|:—:|是整个表格的关键。该部分的上方表示为标题，下方为表格的每一项。都使用竖线|隔开。</p><p>我们可以通过修改中间部分，来修改表格文案的对齐方式。</p><pre><code>|:---|:---|:---|       左对齐|:---:|:---:|:---:|    居中对齐|---:|---:|---:|       右对齐</code></pre><h4 id="十一、反斜杠"><a href="#十一、反斜杠" class="headerlink" title="十一、反斜杠"></a>十一、反斜杠</h4><p><img src="http://upload-images.jianshu.io/upload_images/3365001-9a0abbdcbae8d0a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="反斜杠"></p><p>这一条其实应该不算什么语法了，只是为我们在markdown语法中输入这些符号提供了一个方式。防止这些符号被认为是语法。</p><p>花10来分钟熟练上面这十条语句，就能够轻松的使用markdown进行文学创作了。赶紧在简书web版里动手试试吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在简书的设置中，根据路径 &lt;strong&gt;基础设置 -&amp;gt; 常用编辑器 -&amp;gt; 点选Markdown &lt;/strong&gt;即可启用markdown编辑器。&lt;br&gt;然后在创作文章的管理界面，点击切换到预览模式按钮，即可出现实时预览的创作界面。我们在左侧输入文字，在右侧会自动显示预览。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://jovelin.cn/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://jovelin.cn/tags/Markdown/"/>
    
  </entry>
  
</feed>
