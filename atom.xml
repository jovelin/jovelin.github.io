<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jovelin&#39;s Blog</title>
  
  <subtitle>Python The old farmer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jovelin.cn/"/>
  <updated>2018-08-13T10:06:35.000Z</updated>
  <id>http://jovelin.cn/</id>
  
  <author>
    <name>曹永林</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6 语法</title>
    <link href="http://jovelin.cn/2018/08/10/ES6%20%E8%AF%AD%E6%B3%95/"/>
    <id>http://jovelin.cn/2018/08/10/ES6 语法/</id>
    <published>2018-08-10T01:00:01.000Z</published>
    <updated>2018-08-13T10:06:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>ES6 语法；</li></ol></blockquote><a id="more"></a><blockquote><h3 id="ES6-语法"><a href="#ES6-语法" class="headerlink" title="ES6 语法"></a>ES6 语法</h3></blockquote><p>ES6 是 JavaScript 语言的新版本，它也可以叫做 ES2015，之前学习的 JavaScript 属于 ES5 ，ES6 在它的基础上增加了一些语法，ES6 是未来 JavaScript 的趋势，而且 vue 组件开发中会使用很多的 ES6 的语法，所以掌握这些常用的 ES6 语法是必须的。</p><blockquote><h3 id="变量声明-let-和-const"><a href="#变量声明-let-和-const" class="headerlink" title="变量声明 let 和 const"></a>变量声明 let 和 const</h3></blockquote><p>let 和 const 是新增的声明变量的开头的关键字，在这之前，变量声明是用 var 关键字，这两个关键字和 var 的区别是，它们声明的变量没有预解析，let 和 const 的区别是，let 声明的是一般变量，const 申明的常量，不可修改。</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">alert(iNum01) // 弹出undefined</span><br><span class="line">// alert(iNum02)<span class="comment">; 报错，let关键字定义变量没有变量预解析</span></span><br><span class="line">// alert(iNum03)<span class="comment">; 报错，const关键字定义变量没有变量预解析</span></span><br><span class="line"></span><br><span class="line">var iNum01 = <span class="number">6</span><span class="comment">;</span></span><br><span class="line">// 使用let关键字定义变量</span><br><span class="line">let iNum02 = <span class="number">12</span><span class="comment">;</span></span><br><span class="line">// 使用const关键字定义变量</span><br><span class="line">const iNum03 = <span class="number">24</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">alert(iNum01)<span class="comment">; // 弹出6</span></span><br><span class="line">alert(iNum02)<span class="comment">; // 弹出12</span></span><br><span class="line">alert(iNum03)<span class="comment">; // 弹出24</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">iNum01</span> = <span class="number">7</span><span class="comment">;</span></span><br><span class="line"><span class="attribute">iNum02</span> = <span class="number">13</span><span class="comment">;</span></span><br><span class="line">//iNum03 = <span class="number">25</span><span class="comment">; // 报错,const定义的变量不可修改,const定义的变量是常量</span></span><br><span class="line"></span><br><span class="line">alert(iNum01)</span><br><span class="line">alert(iNum02)<span class="comment">; </span></span><br><span class="line">alert(iNum03)<span class="comment">;</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3></blockquote><p>可以把箭头函数理解成匿名函数的第二种写法，箭头函数的作用是可以在对象中绑定 this，解决了 JavaScript 中 this 指定混乱的问题。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数的一般方式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">function fnRs(a,b)&#123;</span></span><br><span class="line"><span class="comment">    var rs = a + b;</span></span><br><span class="line"><span class="comment">    alert(rs);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">fnRs(1,2);        </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过匿名函数赋值来定义函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var fnRs = function(a,b)&#123;</span></span><br><span class="line"><span class="comment">    var rs = a + b;</span></span><br><span class="line"><span class="comment">    alert(rs);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">fnRs(1,2);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过箭头函数的写法定义</span></span><br><span class="line"><span class="keyword">var</span> fnRs = <span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rs = a + b;</span><br><span class="line">    alert(rs);</span><br><span class="line">&#125;        </span><br><span class="line"><span class="comment">// fnRs(1,2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个参数可以省略小括号</span></span><br><span class="line"><span class="keyword">var</span> fnRs2 = <span class="function"><span class="params">a</span> =&gt;</span>&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">&#125;</span><br><span class="line">fnRs2(<span class="string">'haha!'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数的作用，可以绑定对象中的this</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name:<span class="string">'tom'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    showName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;,<span class="number">1000</span>)            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.showName();</span><br></pre></td></tr></table></figure><blockquote><h3 id="对象的简写"><a href="#对象的简写" class="headerlink" title="对象的简写"></a>对象的简写</h3></blockquote><p>javascript 对象在 ES6 中可以做一些简写形式，了解这些简写形式，才能方便我们读懂一些在 javascript 代码中简写的对象。</p><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'李思'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">var person = &#123;</span><br><span class="line">    name:name,</span><br><span class="line">    age:age,</span><br><span class="line">    showname:function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    showage:function()&#123;</span><br><span class="line">        alert(this.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// 简写成下面的形式</span><br><span class="line">var person = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    showname()&#123;</span><br><span class="line">      alert(this.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    showage()&#123;</span><br><span class="line">      alert(this.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.showname();</span><br><span class="line">person.showage();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ES6 语法；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JS" scheme="http://jovelin.cn/categories/JS/"/>
    
      <category term="ES6" scheme="http://jovelin.cn/categories/JS/ES6/"/>
    
    
      <category term="JS" scheme="http://jovelin.cn/tags/JS/"/>
    
      <category term="ES6" scheme="http://jovelin.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 笔记</title>
    <link href="http://jovelin.cn/2018/08/08/Vue.js%20%E7%AC%94%E8%AE%B0/"/>
    <id>http://jovelin.cn/2018/08/08/Vue.js 笔记/</id>
    <published>2018-08-08T01:00:01.000Z</published>
    <updated>2018-08-13T10:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>Vue.js 笔记；</li></ol></blockquote><a id="more"></a><blockquote><h3 id="一、Vue-js-简介"><a href="#一、Vue-js-简介" class="headerlink" title="一、Vue.js 简介"></a>一、Vue.js 简介</h3></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。</span><br><span class="line"><span class="code">    与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。</span></span><br><span class="line"><span class="code">    Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</span></span><br><span class="line"><span class="code">    另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="bullet">2. </span>前端三大新框架：Angular.js、React.js、Vue.js</span><br></pre></td></tr></table></figure><blockquote><h3 id="二、Vue-js-使用文档及下载"><a href="#二、Vue-js-使用文档及下载" class="headerlink" title="二、Vue.js 使用文档及下载"></a>二、Vue.js 使用文档及下载</h3></blockquote><ol><li>使用文档： <a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></li><li>下载地址： <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html</a></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">引入 Vue：</span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="Vue-实例"><a href="#Vue-实例" class="headerlink" title="Vue 实例"></a>Vue 实例</h3></blockquote><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">虽然没有完全遵循 MVVM 模型，但是 Vue 的设计也受到了它的启发。</span></span><br><span class="line"><span class="xml">因此在文档中经常会使用 vm (ViewModel 的缩写) 这个变量名表示 Vue 实例。</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    window.onload = function()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">        var vm = new Vue()&#123;</span></span><br><span class="line"><span class="template-variable">            // 绑定 id，通常绑 div 上，不能绑 body</span></span><br><span class="line"><span class="template-variable">            el: '#app',</span></span><br><span class="line"><span class="template-variable">            // 自定义属性：里面是定义数据的，如果要输出数据，就要在 html 中去输出</span></span><br><span class="line"><span class="template-variable">            data: &#123;</span></span><br><span class="line"><span class="template-variable">message: 'hello vue!'</span></span><br><span class="line"><span class="template-variable">            &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    ......</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--使用 Vue 的准备工作，准备一个 div 标签，并且该标签有一个 id--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3></blockquote><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">window.onload = function()&#123;</span></span><br><span class="line"><span class="xml">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="xml">el: '#app',</span></span><br><span class="line"><span class="xml">data: &#123;</span></span><br><span class="line"><span class="xml">num: 1023,</span></span><br><span class="line"><span class="xml">num2: 1024,</span></span><br><span class="line"><span class="xml">message: 'hello vue!',</span></span><br><span class="line"><span class="xml">ok: true,</span></span><br><span class="line"><span class="xml">baidu: 'http://www.baidu.com',</span></span><br><span class="line"><span class="xml">title: '百度一下，你就知道',</span></span><br><span class="line"><span class="xml">rawHtml: '<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>This should be red.<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">1. 插值</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    # 文本</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">        数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: </span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span></span><br><span class="line"><span class="xml">    # 原始 HTML</span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">        双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 v-html 指令：</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustaches: </span><span class="template-variable">&#123;&#123; rawHtml &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    # 特性</span></span><br><span class="line"><span class="xml">        如果是标签的属性要使用值，就不能使用“Mustache”语法，需要写成使用v-bind指令：</span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span> <span class="attr">v-bind:title</span>=<span class="string">'tip'</span>&gt;</span>百度网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    # 使用 JavaScript 表达式</span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; number + 1 &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</span><span class="xml"> // 三元运算符</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">2. 指令</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    指令 (Directives) 是带有“v-”前缀的特殊属性。</span></span><br><span class="line"><span class="xml">    指令属性的值预期是单个 JavaScript 表达式，指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</span></span><br><span class="line"><span class="xml">    常见的指令有 v-bind、v-if、v-on。</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 根据 ok 的布尔值来插入/移除 &lt;p&gt; 元素 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>是否显示这一段<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    # 参数</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- HTML属性，如果没绑定就原样输出。绑定之后才会调用 data 里面的属性</span></span></span><br><span class="line"><span class="xml">            在这里 href 是参数，告知 v-bind 指令将该元素的 href 特性与表达式 url 的值绑定 --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 点击事件。vue 中的事件都是写在标签中</span></span></span><br><span class="line"><span class="xml">            监听按钮的 click 事件来执行 fnChangeMsg 方法 --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"fnChangeMsg"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">    # 修饰符</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">        修饰符 (Modifiers) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。</span></span><br><span class="line"><span class="xml">        例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">3. 缩写</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    v-bind 和 v-on 事件这两个指令会经常用，所以有简写方式：</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    # v-bind 缩写</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 完整语法 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 缩写 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    # v-on 缩写</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 完整语法 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"fnChangeMsg"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 缩写 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"fnChangeMsg"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><h3 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 HTML Class</h3></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">'#app'</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">ok1:<span class="literal">false</span>,</span><br><span class="line">ok2:<span class="literal">true</span>,</span><br><span class="line">classObject: &#123;</span><br><span class="line">               active: <span class="literal">true</span>,</span><br><span class="line">               <span class="string">'text-danger'</span>: <span class="literal">false</span></span><br><span class="line">           &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">......</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line"><span class="number">1.</span> 如果判断布尔值就用对象写法 (切换 <span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">2. 如果不是布尔值就用数组的写法 (<span class="title">class</span> 列表)</span></span><br><span class="line"><span class="class">--&gt;</span></span><br><span class="line"><span class="class">&lt;!-- 1. 对象的语法。只能判断布尔值 --&gt;</span></span><br><span class="line"><span class="class">&lt;!--</span></span><br><span class="line">:class="&#123;类名:判断的值,类名:判断的值&#125;"</span><br><span class="line">--&gt;</span><br><span class="line">&lt;h1 :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;red:ok1,font50:ok2&#125;"</span>&gt;文字文字&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 也可以给 v-bind:class 传一个对象引用 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;div v-bind:class="classObject"&gt;&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">2.</span> 数组的语法。里面就是一个三元的判断 --&gt;</span><br><span class="line">&lt;h1 :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[ok1?'red':'',ok2?'font50':'']"</span>&gt;文字文字&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><blockquote><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3></blockquote><p>通过条件指令可以控制元素的创建(显示)或者销毁(隐藏)，常用的条件指令如下：</p><h5 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h5><p>v-if 可以控制元素的创建或者销毁</p><p>v-if=”判断的条件”</p><p>使用条件渲染注意：判断体的中间，不能有其他元素出现</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">h1</span> v-<span class="keyword">if</span>=<span class="string">"ok"</span>&gt;Yes&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h5 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h5><p>v-else 指令来表示 v-if 的“else 块”，v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">if</span>=<span class="string">"Math.random() &gt; 0.5"</span>&gt;</span><br><span class="line">  Now you see <span class="keyword">me</span></span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">else</span>&gt;</span><br><span class="line">  Now you don't</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h5><figure class="highlight cal"><table><tr><td class="code"><pre><span class="line">v-<span class="keyword">else</span>-<span class="keyword">if</span>，顾名思义，充当 v-<span class="keyword">if</span> 的“<span class="keyword">else</span>-<span class="keyword">if</span> 块”，可以连续使用：</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">if</span>=<span class="string">"type === 'A'"</span>&gt;</span><br><span class="line">    A</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"type === 'B'"</span>&gt;</span><br><span class="line">    B</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"type === 'C'"</span>&gt;</span><br><span class="line">    C</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">else</span>&gt;</span><br><span class="line">    <span class="keyword">Not</span> A/B/C</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h5><p>另一个用于根据条件展示元素的选项是 v-show 指令。<br>用法和 v-if 大致一样，但是它不支持 v-else，<br>它和 v-if 的区别是，它制作元素样式的显示和隐藏，元素一直是存在的：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3></blockquote><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">通过 v-<span class="keyword">for</span> 指令可以将一组数据渲染到页面中，数据可以是数组或者对象，</span><br><span class="line">v-<span class="keyword">for</span> 指令需要使用 item <span class="keyword">in</span> items 形式的特殊语法，items 是源数据数组并且 item 是数组元素迭代的别名。</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 遍历数组</span><br><span class="line"></span><br><span class="line">        &lt;<span class="selector-tag">ul</span> id=<span class="string">"example-1"</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">li</span> v-<span class="keyword">for</span>=<span class="string">"item in items"</span>&gt;</span><br><span class="line">            &#123;&#123; item &#125;&#125;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    </span><br><span class="line">    vue 对象创建如下：</span><br><span class="line">    </span><br><span class="line">        <span class="selector-tag">var</span> example1 = new Vue(&#123;</span><br><span class="line">          el: <span class="string">'#example-1'</span>,</span><br><span class="line">          data: &#123;</span><br><span class="line">            items: [<span class="string">'foo'</span>,<span class="string">'bar'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">    如果想加上索引值，可以加上第二个参数</span><br><span class="line">    </span><br><span class="line">        &lt;<span class="selector-tag">ul</span> id=<span class="string">"example-2"</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">li</span> v-<span class="keyword">for</span>=<span class="string">"(item, index) in items"</span>&gt;</span><br><span class="line">            &#123;&#123; index &#125;&#125; - &#123;&#123; item<span class="selector-class">.message</span> &#125;&#125;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 遍历对象</span><br><span class="line"></span><br><span class="line">    也可以用 v-<span class="keyword">for</span> 通过一个对象的属性来迭代</span><br><span class="line"></span><br><span class="line">        &lt;<span class="selector-tag">ul</span> id=<span class="string">"v-for-object"</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">li</span> v-<span class="keyword">for</span>=<span class="string">"value in object"</span>&gt;</span><br><span class="line">            &#123;&#123; value &#125;&#125;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    </span><br><span class="line">    如果想加上对象属性名，可以加上第二个参数</span><br><span class="line">    </span><br><span class="line">        &lt;<span class="selector-tag">ul</span> id=<span class="string">"v-for-object"</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">li</span> v-<span class="keyword">for</span>=<span class="string">"(value,key) in object"</span>&gt;</span><br><span class="line">            &#123;&#123; key &#125;&#125;-&#123;&#123; value &#125;&#125;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br></pre></td></tr></table></figure><blockquote><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3></blockquote><h5 id="事件绑定方法"><a href="#事件绑定方法" class="headerlink" title="事件绑定方法"></a>事件绑定方法</h5><p>可以用 v-on 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码，事件的处理，简单的逻辑可以写在指令中，复杂的需要在 vue 对象的 methods 属性中指定处理函数。</p><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- 在指令中写处理逻辑 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"counter += 1"</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The button above has been clicked </span><span class="template-variable">&#123;&#123; counter &#125;</span><span class="xml">&#125; times.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">......</span></span><br><span class="line"><span class="xml">var example1 = new Vue(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  el: '#example-1',</span></span><br><span class="line"><span class="template-variable">  data: &#123;</span></span><br><span class="line"><span class="template-variable">    counter: 0</span></span><br><span class="line"><span class="template-variable">  &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure><p>methods 属性中指定处理函数：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"example-2"</span>&gt;</span><br><span class="line">  &lt;!-- greet 是在下面定义的方法名 --&gt;</span><br><span class="line">  &lt;button v-on:click=<span class="string">"greet"</span>&gt;Greet&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> example2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-2'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'Vue.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 在 `methods` 对象中定义方法</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    greet: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// `this` 在方法里指向当前 Vue 实例</span></span><br><span class="line">      alert(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>实际开发中，事件绑定有时候牵涉到阻止事件冒泡以及阻止默认行为，在 vue.js 可以加上事件修饰符</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h3></blockquote><p>可以用 v-model 指令在表单 <code>&lt;input&gt;</code> 及 <code>&lt;textarea&gt;</code> 元素上创建 <strong>双向数据绑定</strong>。它会根据控件类型自动选取正确的方法来更新元素</p><h5 id="单行文本框"><a href="#单行文本框" class="headerlink" title="单行文本框"></a>单行文本框</h5><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: </span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="多行文本框"><a href="#多行文本框" class="headerlink" title="多行文本框"></a>多行文本框</h5><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Multiline message is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"add multiple lines"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h5><p>单个复选框，绑定到布尔值：</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span> id=<span class="string">"checkbox"</span> v-model=<span class="string">"checked"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"checkbox"</span>&gt;&#123;&#123; checked &#125;&#125;&lt;/<span class="keyword">label</span>&gt;</span><br></pre></td></tr></table></figure><p>多个复选框，绑定到同一个数组：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">'example-3'</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">input</span> type=<span class="string">"checkbox"</span> id=<span class="string">"jack"</span> value=<span class="string">"Jack"</span> v-model=<span class="string">"checkedNames"</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"jack"</span>&gt;Jack&lt;/label&gt;</span><br><span class="line">  &lt;<span class="selector-tag">input</span> type=<span class="string">"checkbox"</span> id=<span class="string">"john"</span> value=<span class="string">"John"</span> v-model=<span class="string">"checkedNames"</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"john"</span>&gt;John&lt;/label&gt;</span><br><span class="line">  &lt;<span class="selector-tag">input</span> type=<span class="string">"checkbox"</span> id=<span class="string">"mike"</span> value=<span class="string">"Mike"</span> v-model=<span class="string">"checkedNames"</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"mike"</span>&gt;Mike&lt;/label&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;span&gt;Checked names: &#123;&#123; checkedNames &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-3'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    checkedNames: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-4"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"one"</span> <span class="attr">value</span>=<span class="string">"One"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"one"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">value</span>=<span class="string">"Two"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"two"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: </span><span class="template-variable">&#123;&#123; picked &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">......</span></span><br><span class="line"><span class="xml">new Vue(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  el: '#example-4',</span></span><br><span class="line"><span class="template-variable">  data: &#123;</span></span><br><span class="line"><span class="template-variable">    picked: ''</span></span><br><span class="line"><span class="template-variable">  &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure><h5 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-5"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: </span><span class="template-variable">&#123;&#123; selected &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">......</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">new Vue(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  el: '...',</span></span><br><span class="line"><span class="template-variable">  data: &#123;</span></span><br><span class="line"><span class="template-variable">    selected:''</span></span><br><span class="line"><span class="template-variable">  &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3></blockquote><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</p><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> id=<span class="string">"example"</span>&gt;</span><br><span class="line">  &#123;&#123; message.split(<span class="string">''</span>).<span class="keyword">reverse</span>().join(<span class="string">''</span>) &#125;&#125;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>这个表达式的功能是将message字符串进行反转，这种带有复杂逻辑的表达式，我们可以使用计算属性</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"example"</span>&gt;</span><br><span class="line">  <span class="symbol">&lt;p&gt;</span>Original message: <span class="string">"&#123;&#123; message &#125;&#125;"</span>&lt;/<span class="keyword">p</span>&gt;</span><br><span class="line">  <span class="symbol">&lt;p&gt;</span>Computed reversed message: <span class="string">"&#123;&#123; reversedMessage &#125;&#125;"</span>&lt;/<span class="keyword">p</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">var <span class="keyword">vm</span> = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="keyword">e</span><span class="variable">l:</span> <span class="string">'#example'</span>,</span><br><span class="line">  dat<span class="variable">a:</span> &#123;</span><br><span class="line">    message: <span class="string">'Hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 计算属性的 getter</span><br><span class="line">    reversedMessage: <span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line">      // `this` 指向 <span class="keyword">vm</span> 实例</span><br><span class="line">      <span class="keyword">return</span> this.message.<span class="keyword">split</span>(<span class="string">''</span>).<span class="built_in">reverse</span>().<span class="keyword">join</span>(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><h3 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a>侦听属性</h3></blockquote><p>侦听属性的作用是侦听某属性值的变化，从而做相应的操作，侦听属性是一个对象，它的键是要监听的对象或者变量，值一般是函数，当你侦听的元素发生变化时，需要执行的函数，这个函数有两个形参，第一个是当前值，第二个是变化后的值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#app'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            iNum:<span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            iNum:<span class="function"><span class="keyword">function</span>(<span class="params">newval,oldval</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(newval + <span class="string">' | '</span> + oldval) </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            fnAdd:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.iNum += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3></blockquote><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 在双花括号中 --&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; prize | RMB &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 在v-bind中 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId | formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>过滤器实际上是一个函数，可以在一个组件的选项中定义组件内部过滤器：</p><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    prize:<span class="number">100</span></span><br><span class="line">&#125;,</span><br><span class="line">filters:&#123;</span><br><span class="line">    RMB:<span class="keyword">function</span>(<span class="keyword">value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">value</span>==<span class="string">''</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'¥ '</span>+<span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在创建 Vue 实例之前全局定义过滤器：</p><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">Vue.filter(<span class="string">'Yuan'</span>,<span class="keyword">function</span>(<span class="keyword">value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">value</span>==<span class="string">''</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">value</span>+<span class="string">'元'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时过滤器’RMB’只能在定义它的对象接管标签内使用，而’Yuan’可以全局使用</p><blockquote><h3 id="实例生命周期"><a href="#实例生命周期" class="headerlink" title="实例生命周期"></a>实例生命周期</h3></blockquote><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。<br>同时在这个过程中会自动运行一些叫做生命周期钩子的函数，我们可以使用这些函数，在实例的不同阶段加上我们需要的代码，实现特定的功能。</p><h5 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h5><pre><code>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</code></pre><h5 id="created"><a href="#created" class="headerlink" title="created"></a>created</h5><pre><code>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始</code></pre><h5 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h5><pre><code>在挂载开始之前被调用：相关的 render 函数首次被调用。</code></pre><h5 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h5><pre><code>实例挂载到dom之后被调用，可以当成是vue对象的ready方法来使用，一般用它来做dom的初始化操作。</code></pre><h5 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h5><pre><code>数据发生变化前调用</code></pre><h5 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h5><pre><code>数据发生变化后调用</code></pre><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="生命周期图示"></p><blockquote><h3 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h3></blockquote><p>vue.js 没有集成 ajax 功能，要使用 ajax 功能，可以使用 vue 官方推荐的 axios.js 库来做 ajax 的交互。 axios 库的下载地址：<a href="https://github.com/axios/axios/releases" target="_blank" rel="noopener">https://github.com/axios/axios/releases</a></p><p>axios 完整写法：</p><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  url: <span class="string">'/user/12345'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>axios 请求的写法也写成 get 方式后 post 方式。</p><h5 id="执行-get-请求"><a href="#执行-get-请求" class="headerlink" title="执行 get 请求"></a>执行 get 请求</h5><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line"><span class="comment">// then是请求成功时的响应，catch是请求失败时的响应</span></span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选地，上面的请求可以这样做</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="执行-post-请求"><a href="#执行-post-请求" class="headerlink" title="执行 post 请求"></a>执行 post 请求</h5><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">  firstName: <span class="string">'Fred'</span>,</span><br><span class="line">  lastName: <span class="string">'Flintstone'</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Vue.js 笔记；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JS" scheme="http://jovelin.cn/categories/JS/"/>
    
      <category term="Vue" scheme="http://jovelin.cn/categories/JS/Vue/"/>
    
    
      <category term="JS" scheme="http://jovelin.cn/tags/JS/"/>
    
      <category term="Vue" scheme="http://jovelin.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 数据交互</title>
    <link href="http://jovelin.cn/2018/08/04/jQuery%20%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    <id>http://jovelin.cn/2018/08/04/jQuery 数据交互/</id>
    <published>2018-08-04T01:00:01.000Z</published>
    <updated>2018-08-13T10:06:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>jQuery 数据交互；</li></ol></blockquote><a id="more"></a><h3 id="一、javascript-对象格式"><a href="#一、javascript-对象格式" class="headerlink" title="一、javascript 对象格式"></a>一、javascript 对象格式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> JS 中的对象格式，是一种保存数据的格式，什么数据都能够保存的。是目前最强大的保存数据的格式。</span><br><span class="line">    可以理解成是一个键值对的集合，键是调用每个值的名称，值可以是基本变量，还可以是函数和对象。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 通过实例化对象去创建</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加属性：</span></span><br><span class="line">    person.name = <span class="string">'tom'</span>;</span><br><span class="line">    person.age = <span class="string">'25'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加方法：</span></span><br><span class="line">    person.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用属性和方法：</span></span><br><span class="line">    alert(person.age);</span><br><span class="line">    person.sayName();</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 通过对象直接量的方式创建对象</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> person2 = &#123;</span><br><span class="line">        name:<span class="string">'Rose'</span>,</span><br><span class="line">        age: <span class="number">18</span>,</span><br><span class="line">        sayName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'My name is'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用属性和方法：</span></span><br><span class="line">    alert(person2.age);</span><br><span class="line">    person2.sayName();</span><br></pre></td></tr></table></figure><h3 id="二、json"><a href="#二、json" class="headerlink" title="二、json"></a>二、json</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="keyword">json </span></span><br><span class="line">    是 <span class="keyword">JavaScript </span>Object Notation 的首字母缩写，单词的意思是 <span class="keyword">javascript </span>对象表示法，</span><br><span class="line">    类似于 <span class="keyword">javascript </span>对象的一种数据格式对象，目前这种数据格式比较流行，逐渐替换掉了传统的 xml 数据格式。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. <span class="keyword">json </span>数据对象</span><br><span class="line">    类似于 <span class="keyword">JavaScript </span>中的对象，但是它的键对应的值里面是没有函数方法的，</span><br><span class="line">    值可以是普通变量，不支持 undefined，值还可以是数组或者 <span class="keyword">json </span>对象。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 与 <span class="keyword">JavaScript </span>对象写法的不同</span><br><span class="line">    <span class="keyword">json </span>对象的属性名称和字符串值需要用双引号引起来，</span><br><span class="line">    用单引号或者不用引号会导致读取数据错误。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. <span class="keyword">json </span>格式的数据</span><br><span class="line">    </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>:<span class="string">"tom"</span>,</span><br><span class="line">            <span class="string">"age"</span>:<span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">json </span>的另外一个数据格式是数组，和 <span class="keyword">javascript </span>中的数组字面量相同：</span><br><span class="line">    </span><br><span class="line">        [<span class="string">"tom"</span>,<span class="number">18</span>,<span class="string">"programmer"</span>]</span><br><span class="line">        </span><br><span class="line">    还可以是更复杂的数据机构：</span><br><span class="line">    </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>:<span class="string">"jack"</span>,</span><br><span class="line">            <span class="string">"age"</span>:<span class="number">29</span>,</span><br><span class="line">            <span class="string">"hobby"</span>:[<span class="string">"reading"</span>,<span class="string">"travel"</span>,<span class="string">"photography"</span>]</span><br><span class="line">            <span class="string">"school"</span>:&#123;</span><br><span class="line">                <span class="string">"name"</span>:<span class="string">"Merrimack College"</span>,</span><br><span class="line">                <span class="string">"location"</span>:<span class="string">'North Andover, MA'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="三、ajax"><a href="#三、ajax" class="headerlink" title="三、ajax"></a>三、ajax</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> ajax</span><br><span class="line">    一个前后台配合的技术，它可以让 javascript 发送 http 请求，与后台通信，获取数据和信息。</span><br><span class="line">    ajax 技术的原理是实例化 xmlhttp 对象，使用此对象与后台通信。</span><br><span class="line">    jquery 将它封装成了一个函 数$.ajax()，我们可以直接用这个函数来执行 ajax 请求。</span><br><span class="line"></span><br><span class="line">    ajax 需要在服务器环境下运行。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> $.ajax使用方法</span><br><span class="line"></span><br><span class="line">    常用参数：</span><br><span class="line">    <span class="number">1</span>、url 请求地址</span><br><span class="line">    <span class="number">2</span>、type 请求方式，默认是<span class="string">'GET'</span>，常用的还有<span class="string">'POST'</span></span><br><span class="line">    <span class="number">3</span>、dataType 设置返回的数据格式，常用的是<span class="string">'json'</span>格式，也可以设置为<span class="string">'html'</span></span><br><span class="line">    <span class="number">4</span>、data 设置发送给服务器的数据</span><br><span class="line">    <span class="number">5</span>、success 设置请求成功后的回调函数</span><br><span class="line">    <span class="number">6</span>、error 设置请求失败后的回调函数</span><br><span class="line">    <span class="number">7</span>、<span class="keyword">async</span> 设置是否异步，默认值是<span class="string">'true'</span>，表示异步</span><br><span class="line"></span><br><span class="line">    以前的写法：</span><br><span class="line">    </span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">'/change_data'</span>,</span><br><span class="line">            type: <span class="string">'GET'</span>,</span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            data:&#123;<span class="string">'code'</span>:<span class="number">300268</span>&#125;</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">dat</span>)</span>&#123; </span><br><span class="line">                <span class="comment">// dat 如果要读取文件中的数据，传一个形参。这个形参相当于给这个 json 文件起了个名字</span></span><br><span class="line">                alert(dat.name);</span><br><span class="line">            &#125;,</span><br><span class="line">            error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="string">'服务器超时，请重试！'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    新的写法(推荐)：</span><br><span class="line">    </span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">'/change_data'</span>,</span><br><span class="line">            type: <span class="string">'GET'</span>,</span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            data:&#123;<span class="string">'code'</span>:<span class="number">300268</span>&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .done(<span class="function"><span class="keyword">function</span>(<span class="params">dat</span>) </span>&#123;</span><br><span class="line">            alert(dat.name);</span><br><span class="line">        &#125;)</span><br><span class="line">        .fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'服务器超时，请重试！'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    $.ajax 的简写方式</span><br><span class="line">    </span><br><span class="line">        $.ajax 按照请求方式可以简写成 $.get 或者 $.post 方式</span><br><span class="line">        </span><br><span class="line">        $.get(<span class="string">"/change_data"</span>, &#123;<span class="string">'code'</span>:<span class="number">300268</span>&#125;,</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">dat</span>)</span>&#123;</span><br><span class="line">            alert(dat.name);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        $.post(<span class="string">"/change_data"</span>, &#123;<span class="string">'code'</span>:<span class="number">300268</span>&#125;,</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">dat</span>)</span>&#123;</span><br><span class="line">            alert(dat.name);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line"><span class="number">3.</span> <span class="number">360</span> 搜索请求</span><br><span class="line">    </span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 键盘按一次，触发一次。请求数据是输入一个字就请求一次的</span></span><br><span class="line">$(<span class="string">'input'</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line"><span class="comment">//https://sug.so.360.cn/suggest?callback=suggest_so&amp;encodein=utf-8&amp;encodeout=utf-8&amp;format=json&amp;fields=word&amp;word=a</span></span><br><span class="line">url:<span class="string">'https://sug.so.360.cn/suggest'</span>,</span><br><span class="line">type:<span class="string">'get'</span>,</span><br><span class="line"><span class="comment">// 跨域请求，要把数据格式改为 jsonp</span></span><br><span class="line"><span class="comment">// 跨域：读取别人服务器的信息</span></span><br><span class="line">dataType:<span class="string">'jsonp'</span>,</span><br><span class="line"><span class="comment">// 设置发送给服务器的数据</span></span><br><span class="line"><span class="comment">// 这里面设置的是发送给服务器的东西，相当于一把钥匙，你里面的参数要跟人家的参加一样，才会给这个权利你进入服务器</span></span><br><span class="line">data:&#123;</span><br><span class="line"><span class="comment">//callback:'suggest_so',</span></span><br><span class="line">encodein:<span class="string">'utf-8'</span>,</span><br><span class="line">encodeout:<span class="string">'utf-8'</span>,</span><br><span class="line">format:<span class="string">'json'</span>,</span><br><span class="line">fields:<span class="string">'word'</span>,</span><br><span class="line"><span class="comment">// 这里是设置发送给 360 数据的参数</span></span><br><span class="line">word:$(<span class="keyword">this</span>).val()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 成功之后的回调函数。新的写法</span></span><br><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 要先清空 ul 的内容，要不然，每次数据都会叠加</span></span><br><span class="line">$(<span class="string">'ul'</span>).html(<span class="string">''</span>)</span><br><span class="line"><span class="comment">// console.log(data.result[2].word) 能够读取某一条数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.result.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> oLi = <span class="string">'&lt;li&gt;'</span>+data.result[i].word+<span class="string">'&lt;/li&gt;'</span></span><br><span class="line">$(<span class="string">'ul'</span>).append(oLi)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 失败之后的回调函数。新的写法</span></span><br><span class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">'服务器超时，请重试！'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">&lt;input type=<span class="string">"text"</span> /&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;!--<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>把搜索数据打印在这个地方<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>--&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;jQuery 数据交互；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JS" scheme="http://jovelin.cn/categories/JS/"/>
    
      <category term="jQuery" scheme="http://jovelin.cn/categories/JS/jQuery/"/>
    
    
      <category term="JS" scheme="http://jovelin.cn/tags/JS/"/>
    
      <category term="jQuery" scheme="http://jovelin.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 笔记</title>
    <link href="http://jovelin.cn/2018/08/03/jQuery%20%E7%AC%94%E8%AE%B0/"/>
    <id>http://jovelin.cn/2018/08/03/jQuery 笔记/</id>
    <published>2018-08-03T01:00:01.000Z</published>
    <updated>2018-08-13T10:06:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>jQuery 笔记；</li></ol></blockquote><a id="more"></a><h3 id="一、jQuery-介绍"><a href="#一、jQuery-介绍" class="headerlink" title="一、jQuery 介绍"></a>一、jQuery 介绍</h3><p><strong>jQuery 的口号和愿望：Write Less, Do More（写得少，做得多）</strong></p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">1. 特点</span><br><span class="line">    -<span class="ruby"> jQuery 是一个 JavaScript 库。</span></span><br><span class="line"><span class="ruby">    - jQuery 极大地简化了 JavaScript 编程。</span></span><br><span class="line"><span class="ruby">    - jQuery 很容易学习。</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby"><span class="number">2</span>. 网站</span></span><br><span class="line"><span class="ruby">    - <span class="symbol">http:</span>/<span class="regexp">/jquery.com/</span> 官方网站</span></span><br><span class="line"><span class="ruby">    - <span class="symbol">https:</span>/<span class="regexp">/code.jquery.com/</span> 版本下载</span></span><br></pre></td></tr></table></figure><h3 id="二、jQuery-语法"><a href="#二、jQuery-语法" class="headerlink" title="二、jQuery 语法"></a>二、jQuery 语法</h3><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。</span><br><span class="line"></span><br><span class="line">基础语法： </span><br><span class="line">    $(selector).action()</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span> 美元符号定义 jQuery</span><br><span class="line">    <span class="number">2.</span> 选择符（selector）<span class="string">"查询"</span>和<span class="string">"查找"</span> HTML 元素</span><br><span class="line">    <span class="number">3.</span> action() 执行对元素的操作</span><br><span class="line">    </span><br><span class="line">实例:</span><br><span class="line">    $(this).<span class="keyword">hide</span>() - 隐藏当前元素</span><br><span class="line">    $(<span class="string">"p"</span>).<span class="keyword">hide</span>() - 隐藏所有 &lt;p&gt; 元素</span><br><span class="line">    $(<span class="string">"p.test"</span>).<span class="keyword">hide</span>() - 隐藏所有 class=<span class="string">"test"</span> 的 &lt;p&gt; 元素</span><br><span class="line">    $(<span class="string">"#test"</span>).<span class="keyword">hide</span>() - 隐藏所有 id=<span class="string">"test"</span> 的元素</span><br></pre></td></tr></table></figure><h3 id="三、jQuery-函数入口"><a href="#三、jQuery-函数入口" class="headerlink" title="三、jQuery 函数入口"></a>三、jQuery 函数入口</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> jQuery 入口函数:</span><br><span class="line">    &lt;script src=<span class="string">"js/jquery-1.12.4.min.js"</span> type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 执行代码</span></span><br><span class="line">        &#125;);</span><br><span class="line">        或者</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 执行代码</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">2. JavaScript 入口函数:</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        window.onload = function () &#123;</span></span><br><span class="line"><span class="string">            // 执行代码</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. jQuery 入口函数与 JavaScript 入口函数的区别：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    1. jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。</span></span><br><span class="line"><span class="string">    2. JavaScript 的 window.onload 事件是等到所有内容，</span></span><br><span class="line"><span class="string">    包括外部图片之类的文件加载完后，才会执行。</span></span><br></pre></td></tr></table></figure><h3 id="四、jQuery-选择器"><a href="#四、jQuery-选择器" class="headerlink" title="四、jQuery 选择器"></a>四、jQuery 选择器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery 选择器允许您对 HTML 元素组或单个元素进行操作。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> jQuery 元素选择器</span><br><span class="line">    jQuery 使用 CSS 选择器来选取 HTML 元素。</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"p"</span>) 选取 &lt;p&gt; 元素。</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"p.intro"</span>) 选取所有 <span class="class"><span class="keyword">class</span></span>=<span class="string">"intro"</span> 的 &lt;p&gt; 元素。</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"p#demo"</span>) 选取所有 id=<span class="string">"demo"</span> 的 &lt;p&gt; 元素。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> jQuery 属性选择器</span><br><span class="line">    jQuery 使用 XPath 表达式来选择带有给定属性的元素。</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"[href]"</span>) 选取所有带有 href 属性的元素。</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"[href='#']"</span>) 选取所有带有 href 值等于 <span class="string">"#"</span> 的元素。</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"[href!='#']"</span>) 选取所有带有 href 值不等于 <span class="string">"#"</span> 的元素。</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"[href$='.jpg']"</span>) 选取所有 href 值以 <span class="string">".jpg"</span> 结尾的元素。</span><br></pre></td></tr></table></figure><p><strong>更多实例</strong></p><table><thead><tr><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>$(“*”)</td><td>选取所有元素</td></tr><tr><td>$(this)</td><td>选取当前 HTML 元素</td></tr><tr><td>$(“p.intro”)</td><td>选取 class 为 intro 的 &lt;p&gt; 元素</td></tr><tr><td>$(“p:first”)</td><td>选取第一个 &lt;p&gt; 元素</td></tr><tr><td>$(“ul li:first”)</td><td>选取第一个 &lt;ul&gt; 元素的第一个 &lt;li&gt; 元素</td></tr><tr><td>$(“ul li:first-child”)</td><td>选取每个 &lt;ul&gt; 元素的第一个 &lt;li&gt; 元素</td></tr><tr><td>$(“[href]”)</td><td>选取带有 href 属性的元素</td></tr><tr><td>$(“a[target=’_blank’]”)</td><td>选取所有 target 属性值等于 “_blank” 的 &lt;a&gt; 元素</td></tr><tr><td>$(“a[target!=’_blank’]”)</td><td>选取所有 target 属性值不等于 “_blank” 的 &lt;a&gt; 元素</td></tr><tr><td>$(“:button”)</td><td>选取所有 type=”button” 的 &lt;input&gt; 元素 和 &lt;button&gt; 元素</td></tr><tr><td>$(“tr:even”)</td><td>选取偶数位置的 &lt;tr&gt; 元素</td></tr><tr><td>$(“tr:odd”)</td><td>选取奇数位置的 &lt;tr&gt; 元素</td></tr><tr><td>$(“div#intro .head”)</td><td>id=”intro” 的 &lt;div&gt; 元素中的所有 class=”head” 的元素</td></tr></tbody></table><blockquote><p>注意：</p><ol><li>同一级的元素不需要加 ‘ ‘ 空格隔开</li><li>$(“:button”) 为 jQuery 中表单选择器（貌似与过滤选择器同级），旨在选择所有的按钮，所以会找到 <code>&lt;input&gt;、&lt;button&gt;</code> 元素；而 $(“button”) 则为基本选择器，旨在选择为 <code>&lt;button&gt;</code> 的标签。</li><li>: 即为 jQuery 的过滤选择器，语法类似于 css 中的伪类选择器；其过滤选择器大概可以分为基本过滤（p:first 之类）、内容过滤（:empty）、子元素过滤（:first-child）和属性过滤 [href] 选择器。</li></ol></blockquote><h3 id="五、jQuery-集过滤选择器"><a href="#五、jQuery-集过滤选择器" class="headerlink" title="五、jQuery 集过滤选择器"></a>五、jQuery 集过滤选择器</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. $(<span class="string">'div'</span>).has(<span class="string">'p'</span>); </span><br><span class="line">    选择包含 p 元素的 div 元素</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>. $(<span class="string">'div'</span>).e<span class="string">q(5)</span>; </span><br><span class="line">    eq 是选择第几个元素。从父级数下来第几个，从 <span class="number">0</span> 开始数数，最终出来只有一个被选中</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">'div h2'</span>).e<span class="string">q(2)</span>; <span class="regexp">//</span> 选择 div 中第 <span class="number">3</span> 个 h2 元素</span><br></pre></td></tr></table></figure><h3 id="六、jQuery-亲戚选择器"><a href="#六、jQuery-亲戚选择器" class="headerlink" title="六、jQuery 亲戚选择器"></a>六、jQuery 亲戚选择器</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. $(<span class="string">'#box'</span>).prev(); - 选择上一个兄弟</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. $(<span class="string">'#box'</span>).prevAll(); - 选择上面所有的兄弟</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. $(<span class="string">'#box'</span>).<span class="keyword">next</span>(); - 选择下面一个兄弟</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. $(<span class="string">'#box'</span>).nextAll(); - 选择下面所有的兄弟</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. $(<span class="string">'#box'</span>).parent(); - 选择父级</span><br><span class="line">    $(<span class="string">'#box'</span>).parent(<span class="string">'div'</span>); - 只选中 div 父级</span><br><span class="line">    </span><br><span class="line"><span class="number">6</span>. $(<span class="string">'#box'</span>).children(); - 选择所有的子级</span><br><span class="line">    $(<span class="string">'#box'</span>).children(<span class="string">'span'</span>); - 只选中 span 孩子</span><br><span class="line">    </span><br><span class="line"><span class="number">7</span>. $(<span class="string">'#box'</span>).siblings(); - 选择所有的兄弟</span><br><span class="line">    $(<span class="string">'#box'</span>).siblings(<span class="string">'p'</span>); - 只选中 p 兄弟</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>. $(<span class="string">'#box'</span>).find(<span class="string">'.myClass'</span>); - 选择 <span class="class"><span class="keyword">class</span> 等于 <span class="title">myClass</span> 的元素</span></span><br></pre></td></tr></table></figure><h3 id="七、jQuery-获取并设置-CSS-类"><a href="#七、jQuery-获取并设置-CSS-类" class="headerlink" title="七、jQuery 获取并设置 CSS 类"></a>七、jQuery 获取并设置 CSS 类</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. jQuery 操作 css</span><br><span class="line"></span><br><span class="line">    addClass() - 向被选元素添加一个或多个类</span><br><span class="line">    removeClass() - 从被选元素删除一个或多个类</span><br><span class="line">    toggleClass() - 对被选元素进行添加/删除类的切换操作</span><br><span class="line">    css() - 设置或返回样式属性</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. css() 方法</span><br><span class="line"></span><br><span class="line">    css() 方法设置或返回被选元素的一个或多个样式属性</span><br><span class="line">    </span><br><span class="line">    <span class="number">1</span>. 返回 CSS 属性</span><br><span class="line">        语法：css(<span class="string">"propertyname"</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="variable">$(</span><span class="string">"p"</span>).css(<span class="string">"background-color"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="number">2</span>. 设置 CSS 属性</span><br><span class="line">        语法：css(<span class="string">"propertyname"</span>,<span class="string">"value"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$(</span><span class="string">'p'</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="number">3</span>. 设置多个 CSS 属性</span><br><span class="line">        语法：css(&#123;<span class="string">"propertyname"</span><span class="symbol">:<span class="string">"value"</span></span>,<span class="string">"propertyname"</span><span class="symbol">:<span class="string">"value"</span></span>,...&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$(</span><span class="string">'p'</span>).css(&#123;<span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'background'</span>: <span class="string">'white'</span>&#125;);</span><br><span class="line">        </span><br><span class="line"><span class="number">3</span>. scrollTop() 方法</span><br><span class="line">    </span><br><span class="line">    返回或设置匹配元素的滚动条的垂直位置</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$(</span><span class="string">'div'</span>).scrollTop(<span class="string">'9999999999999999999999999'</span>)</span><br></pre></td></tr></table></figure><h3 id="八、jQuery-动画"><a href="#八、jQuery-动画" class="headerlink" title="八、jQuery 动画"></a>八、jQuery 动画</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. animate() 动画</span><br><span class="line">    可以让 CSS 属性进行过度，多少毫秒之内完成</span><br><span class="line">    不是什么属性都能过度，带有数字的才能过度</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">        animate参数：</span><br><span class="line">        参数一：要改变的样式属性值，写成字典的形式</span><br><span class="line">        参数二：动画持续的时间，单位为毫秒，一般不写单位</span><br><span class="line">        参数三：动画曲线，默认为‘swing’，缓冲运动，还可以设置为‘linear’，匀速运动</span><br><span class="line">        参数四：动画回调函数，动画完成后执行的匿名函数</span><br><span class="line">    */</span><br><span class="line">    </span><br><span class="line">    $('div').animate(&#123;</span><br><span class="line">        width: '300px',</span><br><span class="line">        'background':'yellow',</span><br><span class="line">        'color':'blue',</span><br><span class="line">        </span><br><span class="line">        // 使用相对值，需要在值的前面加上 += 或 -=</span><br><span class="line">        left: '+=150px',</span><br><span class="line">        </span><br><span class="line">        // 使用预定义的值："show"、"hide" 或 "toggle"</span><br><span class="line">        height:'toggle'</span><br><span class="line">    &#125;,1000,'swing',function()&#123;</span><br><span class="line">        alert('done!');</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    // 分步动画，走完一步，再走另外一步</span><br><span class="line">// 分开多个 animate 去书写，就可以做到分步动画</span><br><span class="line">$('div').animate(&#123;'width':'500px'&#125;,1000)</span><br><span class="line">.animate(&#123;'height':'500px'&#125;,1000)</span><br><span class="line">.animate(&#123;'font-size':'300px'&#125;,1000)</span><br><span class="line">.animate(&#123;'border-radius':'500px'&#125;,1000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. css3 背景属性过渡</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div&#123;</span></span><br><span class="line"><span class="undefined">width: 500px;</span></span><br><span class="line"><span class="undefined">height: 500px;</span></span><br><span class="line"><span class="undefined">background: pink;</span></span><br><span class="line"><span class="undefined">position: absolute;</span></span><br><span class="line"><span class="undefined">left: 0;</span></span><br><span class="line"><span class="undefined">top: 0;</span></span><br><span class="line"><span class="css"><span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 2<span class="selector-tag">s</span>; <span class="comment">/* CSS3 的过渡属性，有这个属性，那么 hover 的时候就会有过渡效果 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="undefined">background: blue;</span></span><br><span class="line"><span class="undefined">font-size: 300px;</span></span><br><span class="line"><span class="undefined">left: 300px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(1<span class="selector-class">.4</span>) <span class="selector-tag">rotate</span>(360<span class="selector-tag">deg</span>) <span class="selector-tag">skew</span>(30<span class="selector-tag">deg</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3. stop() 停止动画</span><br><span class="line">    解决 JQ 动画类的效果，排队机制问题。一定要加在动画效果前面，中间不能有其他元素</span><br><span class="line">    $('div').stop().animate()</span><br></pre></td></tr></table></figure><h3 id="九、jQuery-效果"><a href="#九、jQuery-效果" class="headerlink" title="九、jQuery 效果"></a>九、jQuery 效果</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">隐藏、显示、切换，滑动，淡入淡出</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span> fadeIn(speed, callback) 淡入</span><br><span class="line">        $btn.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="string">'#div1'</span>).fadeIn(<span class="number">1000</span>, <span class="string">'swing'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="string">'done!'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="number">2.</span> fadeOut() 淡出</span><br><span class="line">    <span class="number">3.</span> fadeToggle() 切换淡入淡出</span><br><span class="line">    </span><br><span class="line">    <span class="number">4.</span> hide() 隐藏元素 <span class="comment">// hide(1000) 加了时间，会带有动画效果</span></span><br><span class="line">    <span class="number">5.</span> show() 显示元素</span><br><span class="line">    <span class="number">6.</span> toggle() 切换元素的可见状态</span><br><span class="line">    </span><br><span class="line">    <span class="number">7.</span> slideDown() 向下展开 <span class="comment">// 如果图片要做卷起展开的效果，要加上宽高</span></span><br><span class="line">    <span class="number">8.</span> slideUp() 向上卷起</span><br><span class="line">    <span class="number">9.</span> slideToggle() 依次展开或卷起某个元素</span><br></pre></td></tr></table></figure><h3 id="十、jQuery-链式调用"><a href="#十、jQuery-链式调用" class="headerlink" title="十、jQuery 链式调用"></a>十、jQuery 链式调用</h3><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">jquery 对象的方法会在执行完后返回这个 jquery 对象，所有 jquery 对象的方法可以连起来写：</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'#div1'</span>).children(<span class="string">'ul'</span>) <span class="comment">// 该元素下面的 ul 子元素</span></span><br><span class="line">    .slideDown(<span class="string">'fast'</span>) <span class="comment">// 高度从零变到实际高度来显示 ul 元素</span></span><br><span class="line">    .<span class="keyword">parent</span>()  <span class="comment">// 跳到 ul 的父元素，也就是 id 为 div1 的元素</span></span><br><span class="line">    .siblings()  <span class="comment">// 跳到 div1 元素平级的所有兄弟元素</span></span><br><span class="line">    .children(<span class="string">'ul'</span>) <span class="comment">// 这些兄弟元素中的 ul 子元素</span></span><br><span class="line">    .slideUp(<span class="string">'fast'</span>);  <span class="comment">// 高度实际高度变换到零来隐藏 ul 元素</span></span><br></pre></td></tr></table></figure><h3 id="十一、jQuery-内容、属性操作"><a href="#十一、jQuery-内容、属性操作" class="headerlink" title="十一、jQuery 内容、属性操作"></a>十一、jQuery 内容、属性操作</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、html() 取出或设置 html 内容</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>. 取出 html 内容</span><br><span class="line">        var <span class="variable">$htm</span> = <span class="variable">$(</span><span class="string">'#div1'</span>).html();</span><br><span class="line">    </span><br><span class="line">    <span class="number">2</span>. 设置 html 内容</span><br><span class="line">        <span class="variable">$(</span><span class="string">'#div1'</span>).html(<span class="string">'&lt;span&gt;添加文字&lt;/span&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、prop() 取出或设置某个属性的值</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>. 取出图片的地址</span><br><span class="line">        var <span class="variable">$src</span> = <span class="variable">$(</span><span class="string">'#img1'</span>).prop(<span class="string">'src'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>. 设置图片的地址和 alt 属性</span><br><span class="line">        <span class="variable">$(</span><span class="string">'#img1'</span>).prop(&#123;<span class="symbol">src:</span> <span class="string">"test.jpg"</span>, <span class="symbol">alt:</span> <span class="string">"Test Image"</span> &#125;);</span><br><span class="line">        </span><br><span class="line">    <span class="number">3</span>. val() 取出或设置 value 值简写方法</span><br><span class="line">        <span class="number">1</span>. 设置 value</span><br><span class="line">        <span class="variable">$(</span><span class="string">'input'</span>).prop(&#123;<span class="string">'value'</span><span class="symbol">:<span class="string">'123'</span></span>&#125;)</span><br><span class="line"><span class="variable">$(</span><span class="string">'input'</span>).val(<span class="string">'123'</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 获取 value</span><br><span class="line"><span class="variable">$(</span><span class="string">'input'</span>).prop(<span class="string">'value'</span>)</span><br><span class="line"><span class="variable">$(</span><span class="string">'input'</span>).val()</span><br></pre></td></tr></table></figure><h3 id="十二、jQuery-事件"><a href="#十二、jQuery-事件" class="headerlink" title="十二、jQuery 事件"></a>十二、jQuery 事件</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、jQuery 是为事件处理特别设计的。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、什么是事件？</span><br><span class="line"></span><br><span class="line">    页面对不同访问者的响应叫做事件。</span><br><span class="line">    </span><br><span class="line">    事件处理程序指的是当 HTML 中发生某些事件时所调用的方法。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、事件函数列表：</span><br><span class="line">    </span><br><span class="line">    <span class="number">1.</span> click() 鼠标单击</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    $(<span class="string">'h1'</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// $(this) 代表当前事件源</span></span><br><span class="line">    $(<span class="keyword">this</span>).css(&#123;<span class="string">'color'</span>:<span class="string">'red'</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 来回切换类名</span></span><br><span class="line">    $(<span class="keyword">this</span>).toggleClass(<span class="string">'red'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 能够输出我当前点击的是第几个索引值</span></span><br><span class="line">    alert($(<span class="keyword">this</span>).index())</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="number">2.</span> blur() 元素失去焦点</span><br><span class="line">    <span class="number">3.</span> focus() 元素获得焦点</span><br><span class="line">        <span class="comment">// 搜索框提示功能：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">    placeholder  HTML5 的属性</span></span><br><span class="line"><span class="comment">    有兼容性问题：IE8 以下的浏览器都不支持这个功能</span></span><br><span class="line"><span class="comment">    HTML5 和 CSS3  都是不支持 IE8 以下的浏览器的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"请输入名字"</span> &lt;!--value=<span class="string">"请输入名字"</span>--&gt; /&gt;</span><br><span class="line"></span><br><span class="line">    <span class="number">4.</span> mouseover() 鼠标进入（进入子元素也触发）</span><br><span class="line">    <span class="number">5.</span> mouseout() 鼠标离开（离开子元素也触发）</span><br><span class="line">    <span class="number">6.</span> mouseenter() 鼠标进入（进入子元素不触发）</span><br><span class="line">    <span class="number">7.</span> mouseleave() 鼠标离开（离开子元素不触发）</span><br><span class="line">    <span class="number">8.</span> hover() 同时为 mouseenter 和 mouseleave 事件指定处理函数</span><br><span class="line">    </span><br><span class="line">$(<span class="string">'input'</span>).hover(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 第一个 function，里面是代表移入事件</span></span><br><span class="line">$(<span class="keyword">this</span>).val(<span class="string">'移入'</span>)</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 第二个 function，里面是代表移出事件</span></span><br><span class="line">$(<span class="keyword">this</span>).val(<span class="string">'移出'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="number">9.</span> ready() DOM 加载完成</span><br><span class="line">        $(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//  jQuery 入口函数</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="number">10.</span> submit() 用户递交表单</span><br><span class="line">        <span class="comment">// 表单提交事件，必须要选择 form 标签才能够做提交</span></span><br><span class="line"><span class="comment">// .submit()，专门给 form 表单做提交事件的</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'form'</span>).submit(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 表单提交</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span> change() 当元素的值改变时发生 change 事件（仅适用于表单字段）</span><br><span class="line">    注意：当用于 select 元素时，change 事件会在选择某个选项时发生。</span><br><span class="line">    当用于 text field 或 text area 时，change 事件会在元素失去焦点时发生。</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"select"</span>).change(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            alert(<span class="string">"文本已被修改"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    <span class="number">12.</span> keydown()</span><br><span class="line">    </span><br><span class="line">oInput.keydown(<span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">alert(<span class="string">"点击回车"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>常见的 DOM 事件</strong>：</p><table><thead><tr><th>鼠标事件</th><th>键盘事件</th><th>表单事件</th><th>文档/窗口事件</th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/jquery/event-click.html" target="_blank" rel="noopener">click</a></td><td><a href="http://www.runoob.com/jquery/event-keypress.html" target="_blank" rel="noopener">keypress</a></td><td><a href="http://www.runoob.com/jquery/event-submit.html" target="_blank" rel="noopener">submit</a></td><td><a href="http://www.runoob.com/jquery/event-load.html" target="_blank" rel="noopener">load</a></td></tr><tr><td><a href="http://www.runoob.com/jquery/event-dblclick.html" target="_blank" rel="noopener">dblclick</a></td><td><a href="http://www.runoob.com/jquery/event-keydown.html" target="_blank" rel="noopener">keydown</a></td><td><a href="http://www.runoob.com/jquery/event-change.html" target="_blank" rel="noopener">change</a></td><td><a href="http://www.runoob.com/jquery/event-resize.html" target="_blank" rel="noopener">resize</a></td></tr><tr><td><a href="http://www.runoob.com/jquery/event-mouseenter.html" target="_blank" rel="noopener">mouseenter</a></td><td><a href="http://www.runoob.com/jquery/event-keyup.html" target="_blank" rel="noopener">keyup</a></td><td><a href="http://www.runoob.com/jquery/event-focus.html" target="_blank" rel="noopener">focus</a></td><td><a href="http://www.runoob.com/jquery/event-scroll.html" target="_blank" rel="noopener">scroll</a></td></tr><tr><td><a href="http://www.runoob.com/jquery/event-mouseleave.html" target="_blank" rel="noopener">mouseleave</a></td><td></td><td><a href="http://www.runoob.com/jquery/event-blur.html" target="_blank" rel="noopener">blur</a></td><td><a href="http://www.runoob.com/jquery/event-unload.html" target="_blank" rel="noopener">unload</a></td></tr></tbody></table><h3 id="十三、表单验证"><a href="#十三、表单验证" class="headerlink" title="十三、表单验证"></a>十三、表单验证</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、正则写法</span><br><span class="line">    <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'规则'</span>, <span class="string">'可选参数'</span>);</span><br><span class="line">    <span class="keyword">var</span> re = <span class="regexp">/规则/</span>参数;</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>、修饰参数</span><br><span class="line">    g：global，全文搜索，默认搜索到第一个结果接停止</span><br><span class="line">    i：ingore <span class="keyword">case</span>，忽略大小写，默认大小写敏感</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、常用函数</span><br><span class="line">    test()</span><br><span class="line">    用法：正则.test(字符串) 匹配成功，就返回真，否则就返回假</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、常用正则规则</span><br><span class="line">    <span class="comment">//用户名验证：(数字字母或下划线 6 到 20 位)</span></span><br><span class="line">    <span class="keyword">var</span> reUser = <span class="regexp">/^\w&#123;6,20&#125;$/</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//邮箱验证：        </span></span><br><span class="line">    <span class="keyword">var</span> reMail = <span class="regexp">/^[a-z0-9][\w\.\-]*@[a-z0-9\-]+(\.[a-z]&#123;2,5&#125;)&#123;1,2&#125;$/i</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//密码验证：</span></span><br><span class="line">    <span class="keyword">var</span> rePass = <span class="regexp">/^[\w!@#$%^&amp;*]&#123;6,20&#125;$/</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//手机号码验证：</span></span><br><span class="line">    <span class="keyword">var</span> rePhone = <span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>;</span><br><span class="line">    </span><br><span class="line"><span class="number">5</span>、课堂案例</span><br><span class="line">    <span class="keyword">var</span> reg1 = <span class="regexp">/\d/</span>    <span class="comment">// 全局查找，只要里面有数字就是 true</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^\d+$/</span>  <span class="comment">// 前端验证，都要加上开始跟结束。因为这样更加严格</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则.test(验证的数据)   成立：true   失败：false</span></span><br><span class="line"><span class="comment">// 前端的正则是不管你什么数据类型的，'123' 等于 123</span></span><br><span class="line">reg2.test(str1)</span><br></pre></td></tr></table></figure><blockquote><p>正则笔记：<a href="http://note.youdao.com/noteshare?id=84982b53621464255ab6b1f5918febe2" target="_blank" rel="noopener">正则表达式</a></p></blockquote><h3 id="十四、事件冒泡"><a href="#十四、事件冒泡" class="headerlink" title="十四、事件冒泡"></a>十四、事件冒泡</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 事件冒泡：当子级写了事件，长辈也写了事件，当你触发子级的时候，长辈也会触发事件</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 事件冒泡的作用</span><br><span class="line">    事件冒泡允许多个操作被集中处理（把事件处理器添加到一个父级元素上，避免把事件处理器添加到多个子级元素上），</span><br><span class="line">    它还可以让你在对象层的不同级别捕获事件。</span><br><span class="line">    </span><br><span class="line">    对象层次的最顶层，即 <span class="built_in">document</span> 对象（有些浏览器是 <span class="built_in">window</span> ）。</span><br><span class="line">    </span><br><span class="line">    $(<span class="built_in">window</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">'window 的子级点击时都会触发该事件'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 阻止冒泡和阻止默认行为</span><br><span class="line"></span><br><span class="line">    <span class="comment">// event.stopPropagation();</span></span><br><span class="line">    <span class="comment">// event.preventDefault();</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并写法：</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// return false; 两个作用：1.阻止表单提交；2.阻止事件冒泡</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="十五、Dom-操作"><a href="#十五、Dom-操作" class="headerlink" title="十五、Dom 操作"></a>十五、Dom 操作</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Dom 操作也叫做元素节点操作，它指的是改变 html 的标签结构，它有两种情况：</span><br><span class="line">    <span class="number">1</span>、移动现有标签的位置</span><br><span class="line">    <span class="number">2</span>、将新创建的标签插入到现有的标签中</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 移动或者插入标签的方法</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>、append() 和 appendTo()：在现存元素的内部，从后面放入元素（子级关系）</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// append()</span></span><br><span class="line">        var span = <span class="string">'&lt;span&gt;这是一个span元素&lt;/span&gt;'</span>;</span><br><span class="line">        <span class="symbol">$</span>(<span class="string">'#div1'</span>).append(span);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果要使用 appendTo() 节点要保存成下面这种方法</span></span><br><span class="line">        var <span class="symbol">$</span>span = <span class="symbol">$</span>(<span class="string">'&lt;span&gt;这是一个span元素&lt;/span&gt;'</span>);</span><br><span class="line"><span class="symbol">$</span>span.appendTo(<span class="symbol">$</span>(<span class="string">'#div1'</span>))</span><br><span class="line">        </span><br><span class="line">    <span class="number">2</span>、prepend() 和 prependTo()：在现存元素的内部，从前面放入元素（子级关系）</span><br><span class="line">    </span><br><span class="line">    <span class="number">3</span>、after() 和 insertAfter()：在现存元素的外部，从后面放入元素（兄弟关系）</span><br><span class="line">    </span><br><span class="line">    <span class="number">4</span>、before() 和 insertBefore()：在现存元素的外部，从前面放入元素（兄弟关系）</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 删除标签</span><br><span class="line"></span><br><span class="line">    <span class="symbol">$</span>(<span class="string">'#div1'</span>).remove();</span><br></pre></td></tr></table></figure><h3 id="十六、事件委托"><a href="#十六、事件委托" class="headerlink" title="十六、事件委托"></a>十六、事件委托</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 事件委托就是利用冒泡的原理，把事件加到父级上，通过判断事件来源的子集，执行相应的操作，</span><br><span class="line">    事件委托首先可以极大减少事件绑定次数，提高性能；其次可以让新加入的子元素也可以拥有相同的操作。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 一般绑定事件的写法</span><br><span class="line"></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $ali = $(<span class="string">'#list li'</span>);</span><br><span class="line">        $ali.click(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).css(&#123;background:<span class="string">'red'</span>&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br><span class="line">    &lt;ul id=<span class="string">"list"</span>&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">1</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">2</span>&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span> 事件委托的写法</span><br><span class="line"></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $list = $(<span class="string">'#list'</span>);</span><br><span class="line">        $list.delegate(<span class="string">'li'</span>, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).css(&#123;background:<span class="string">'red'</span>&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br><span class="line">    &lt;ul id=<span class="string">"list"</span>&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">1</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">2</span>&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span> 事件委托选择问题</span><br><span class="line">    </span><br><span class="line">    取出某一个不一样的点进行判断</span><br><span class="line">    <span class="number">1.</span> 根据类名判断</span><br><span class="line">        <span class="keyword">if</span>($(<span class="keyword">this</span>).prop(<span class="string">'class'</span>) == <span class="string">'aa'</span>)&#123;</span><br><span class="line">alert(<span class="string">'弹窗'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($(<span class="keyword">this</span>).prop(<span class="string">'class'</span>) == <span class="string">'bb'</span>)&#123;</span><br><span class="line">alert($(<span class="keyword">this</span>).index())</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert($(<span class="keyword">this</span>).html())</span><br><span class="line">&#125;</span><br><span class="line">    <span class="number">2.</span> 根据内容判断</span><br><span class="line">        <span class="keyword">if</span>($(<span class="keyword">this</span>).html() == <span class="string">'弹窗'</span>)&#123;</span><br><span class="line">alert(<span class="string">'弹窗'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($(<span class="keyword">this</span>).html() == <span class="string">'弹索引值'</span>)&#123;</span><br><span class="line">alert($(<span class="keyword">this</span>).index())</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert($(<span class="keyword">this</span>).html())</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">注意：</span><br><span class="line">    <span class="number">1.</span> 动态添加的结构，是不能写事件的。因为找不到新添加的结构。</span><br><span class="line">    <span class="number">2.</span> 只要数据是动态添加的，都要用事件委托的写法去写事件。</span><br></pre></td></tr></table></figure><blockquote><p>更多参考：<a href="http://www.w3school.com.cn/jquery/index.asp" target="_blank" rel="noopener">W3school - jQuery 教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;jQuery 笔记；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JS" scheme="http://jovelin.cn/categories/JS/"/>
    
      <category term="jQuery" scheme="http://jovelin.cn/categories/JS/jQuery/"/>
    
    
      <category term="JS" scheme="http://jovelin.cn/tags/JS/"/>
    
      <category term="jQuery" scheme="http://jovelin.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JS 笔记</title>
    <link href="http://jovelin.cn/2018/08/02/JS%20%E7%AC%94%E8%AE%B0/"/>
    <id>http://jovelin.cn/2018/08/02/JS 笔记/</id>
    <published>2018-08-02T01:00:01.000Z</published>
    <updated>2018-08-09T02:48:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>JS 笔记；</li></ol></blockquote><a id="more"></a><h3 id="一、用法"><a href="#一、用法" class="headerlink" title="一、用法"></a>一、用法</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1、JS 内部引用</span><br><span class="line"></span><br><span class="line">    1. 嵌入式</span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//  单行注释</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">'hello'</span>);</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="undefined">            /*  多行注释</span></span><br><span class="line"><span class="actionscript">                代码后面分号 <span class="string">';'</span> 可写可不写，都支持</span></span><br><span class="line"><span class="actionscript">                字符串可以用双引号 <span class="string">""</span> 和 单引号 <span class="string">''</span></span></span><br><span class="line"><span class="actionscript">                JS 建议使用 <span class="string">''</span>，HTML 属性都是用 <span class="string">""</span></span></span><br><span class="line"><span class="undefined">            */</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">'JS 代码'</span>);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    2. 行间（内联式）不推荐</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">onclick</span>=<span class="string">"alert('JS 代码')"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、JS 外部文件引用</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"myscript.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>javascript 作为一种脚本语言可以放在 html 页面中任何位置，但是浏览器解释 html 时是按先后顺序的，所以前面的 script 就先被执行。</p></blockquote><h3 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、通过 var 声明（创建）变量</span><br><span class="line">    var mychar;</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>、声明多个变量，用逗号隔开</span><br><span class="line">var <span class="symbol">num1</span> = <span class="number">123</span>, <span class="symbol">num2</span> = <span class="number">321</span>, <span class="symbol">num3</span> = <span class="number">444</span>;</span><br><span class="line">    </span><br><span class="line"><span class="number">3</span>、修改变量，变量要先声明再赋值</span><br><span class="line">    mychar = <span class="string">'hello'</span>;</span><br><span class="line">    </span><br><span class="line"><span class="number">4</span>、命名规则:</span><br><span class="line">    <span class="number">1.</span> 变量必须使用字母、下划线<span class="comment">(_)</span>或者美元符<span class="comment">($)</span>开始。</span><br><span class="line">    <span class="number">2.</span> 然后可以使用任意多个英文字母、数字、下划线<span class="comment">(_)</span>或者美元符<span class="comment">($)</span>组成。</span><br><span class="line">    <span class="number">3.</span> 不能使用JavaScript关键词与JavaScript保留字。</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>在 JS 中区分大小写，如变量 mychar 与 myChar 是不一样的，表示是两个变量。</li><li>变量虽然也可以不声明，直接使用，但不规范，需要先声明，后使用。</li></ol></blockquote><h3 id="三、变量类型"><a href="#三、变量类型" class="headerlink" title="三、变量类型"></a>三、变量类型</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、五种基本数据类型：</span><br><span class="line">    <span class="number">1</span>、<span class="built_in">number</span> 数字类型</span><br><span class="line">    <span class="number">2</span>、<span class="built_in">string</span> 字符串类型</span><br><span class="line">    <span class="number">3</span>、<span class="built_in">boolean</span> 布尔类型 <span class="literal">true</span> 或 <span class="literal">false</span></span><br><span class="line">    <span class="number">4</span>、<span class="literal">undefined</span> <span class="literal">undefined</span> 类型，变量声明未初始化，它的值就是 <span class="literal">undefined</span></span><br><span class="line">    <span class="number">5</span>、<span class="literal">null</span> <span class="literal">null</span> 类型，表示空对象，如果定义的变量将来准备保存对象，可以将变量初始化为 <span class="literal">null</span>，在页面上获取不到对象，返回的值就是 <span class="literal">null</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 数字类型：不带引号的 0-9  </span></span><br><span class="line">    <span class="comment">// 特点：能够进行数学运算</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 字符串类型：只要带了引号的，都是字符串</span></span><br><span class="line"><span class="comment">// 特点：1.原样输出；2.任何的数据类型跟字符串相加，都会变成字符串；3.字符串会相连</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">'10'</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'20'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 符号问题：* - / 可以把数据类型转为数字</span></span><br><span class="line"><span class="comment">// 如果出现 NAN：代表这不是一个数字</span></span><br><span class="line">alert(str1 / <span class="number">1</span> + num1)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、一种复合类型：</span><br><span class="line">    object</span><br></pre></td></tr></table></figure><h3 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h3><p><strong>如何定义一个函数呢？基本语法如下:</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、函数语法</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. function 定义函数的关键字。</span></span><br><span class="line"><span class="comment">        2. "函数名" 你为函数取的名字。</span></span><br><span class="line"><span class="comment">        3. "函数代码" 替换为完成特定功能的代码。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">         函数代码;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、函数使用</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 1. 定义函数</span></span><br><span class="line"><span class="comment">// 前端的函数：有多少个形参，就要传多少个实参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnAlert</span>(<span class="params">par1, par2</span>)</span>&#123;</span><br><span class="line"><span class="comment">/* return返回值：</span></span><br><span class="line"><span class="comment">    1. 把数据返回出去（没有地方打印或者没有地方接收数据的时候）</span></span><br><span class="line"><span class="comment">    2. 阻止程序往下执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> par1 + par2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面有 return 把程序给终止</span></span><br><span class="line">alert(<span class="string">'123'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用函数</span></span><br><span class="line">alert(fnAlert(<span class="string">'参数1'</span>, <span class="string">'参数2'</span>));</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">3、入口函数 window.onload</span></span><br><span class="line"><span class="regexp">    作用：当整个页面加载完毕之后，再加载里面的代码</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 如果 JS 在 body 上面写，带上入口函数</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 如果 JS 在 body 下面写，不用带入口函数</span></span><br><span class="line"><span class="regexp">window.onload = function()&#123;</span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="五、判断语句（if…else）"><a href="#五、判断语句（if…else）" class="headerlink" title="五、判断语句（if…else）"></a>五、判断语句（if…else）</h3><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、语法</span><br><span class="line">    <span class="keyword">if</span> (条件一) &#123;</span><br><span class="line">        条件一成立时执行的代码</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件二) &#123;</span><br><span class="line">        条件二成立时执行的代码</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        条件都不成立时执行的代码</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>、使用</span><br><span class="line">    // =   一个等于代表赋值</span><br><span class="line">    // ==  判断等于，可以用数字跟字符串进行判断</span><br><span class="line">// === 三等于，不单止值要相等，类型也要相等</span><br><span class="line">// !=  不等于</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">80</span> == <span class="string">'80'</span>) &#123;</span><br><span class="line">alert(<span class="string">'== 成立'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">80</span> === <span class="string">'80'</span>) &#123;</span><br><span class="line">alert(<span class="string">'=== 成立'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">'不成立'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、逻辑运算符"><a href="#六、逻辑运算符" class="headerlink" title="六、逻辑运算符"></a>六、逻辑运算符</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、与(&amp;&amp;)、或(||)、非(！)</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span> &amp;&amp;  并且：一真一假，为假。全部都要真的，才会成立</span><br><span class="line">    <span class="number">2.</span> ||  或者：一真一假，为真。只要满足一个条件，就能成立</span><br><span class="line">    <span class="number">3.</span> !   否  ：反义词</span><br></pre></td></tr></table></figure><h3 id="七、预解析"><a href="#七、预解析" class="headerlink" title="七、预解析"></a>七、预解析</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">预解析：能不能先调用，再定义</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1. 变量是没有预解析功能的</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// alert(num);</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// var num = 10;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2. 函数是有预解析的功能</span></span></span><br><span class="line"><span class="undefined">fnAlert();</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">fnAlert</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">'1'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="八、JS-设置-HTML-样式、属性、内容"><a href="#八、JS-设置-HTML-样式、属性、内容" class="headerlink" title="八、JS 设置 HTML 样式、属性、内容"></a>八、JS 设置 HTML 样式、属性、内容</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、设置 HTML 样式</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">// document.getElementById('box')  选择器：JS 要通过 ID 去选择元素</span></span><br><span class="line"><span class="comment">//.style   设置样式</span></span><br><span class="line"><span class="selector-tag">var</span> oBox = document.getElementById(<span class="string">'box'</span>)</span><br><span class="line">oBox<span class="selector-class">.style</span><span class="selector-class">.color</span> = <span class="string">'red'</span></span><br><span class="line"><span class="comment">// JS 设置问题：遇到横杠去掉，并且把后面的首字母变成大写</span></span><br><span class="line">oBox<span class="selector-class">.style</span><span class="selector-class">.fontSize</span> = <span class="string">'50px'</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、设置 HTML 属性</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="selector-tag">var</span> oLink = document.getElementById(<span class="string">'link'</span>)</span><br><span class="line"><span class="selector-tag">var</span> oTxt = document.getElementById(<span class="string">'txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 HTML 属性：选择器.属性名 = '值'</span></span><br><span class="line">oLink<span class="selector-class">.href</span> = <span class="string">'http://jovelin.cn'</span></span><br><span class="line">oLink<span class="selector-class">.title</span> = <span class="string">'我的主页'</span></span><br><span class="line">oTxt<span class="selector-class">.value</span> = <span class="string">'input'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 class 要写成 className</span></span><br><span class="line">oLink<span class="selector-class">.className</span> = <span class="string">'red'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 HTML 属性：选择器.属性名  可以获取该属性的值</span></span><br><span class="line">alert(oTxt.value)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">注意：选择下拉框要给 select 写 id；下拉框要做判断，必须要给 option 加上 value</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、设置 HTML 内容</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="selector-tag">var</span> oBox = document.getElementById(<span class="string">'box'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 HTML 内容，会覆盖原有内容</span></span><br><span class="line">            <span class="comment">// oBox.innerHTML = '&lt;a href="#"&gt;'+</span></span><br><span class="line">            <span class="comment">// '&lt;span&gt;JS&lt;/span&gt;'+</span></span><br><span class="line">            <span class="comment">// '&lt;/a&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// += 就是在原有的基础添加内容</span></span><br><span class="line">oBox<span class="selector-class">.innerHTML</span> = oBox<span class="selector-class">.innerHTML</span> + <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 HTML 内容</span></span><br><span class="line">alert(oBox.innerHTML)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="九、点击事件"><a href="#九、点击事件" class="headerlink" title="九、点击事件"></a>九、点击事件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">事件三要素：事件源.事件类型 = function()&#123;执行的命令&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// onclick 点击事件</span></span></span><br><span class="line"><span class="actionscript">oBtn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 按钮点击之后，要执行的命令</span></span></span><br><span class="line"><span class="actionscript">alert(<span class="string">'hello'</span>)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="十、数组"><a href="#十、数组" class="headerlink" title="十、数组"></a>十、数组</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 定义</span><br><span class="line">    <span class="comment">// 对象的实例创建</span></span><br><span class="line">    var aList = new Array(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 直接量创建</span></span><br><span class="line">    var aList2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, 'jovelin'];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 多维数组</span></span><br><span class="line">    var aList3 = [[<span class="number">1</span>, <span class="number">2</span>], ['a', 'b'], [<span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> indexOf() 返回数组中元素第一次出现的索引值</span><br><span class="line">    如果没有找到该数据，会返回  <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> reverse() 将数组反转</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> splice() 在数组中增加或删除成员</span><br><span class="line">    <span class="comment">// 第一个参数：从第几个开始；</span></span><br><span class="line">    <span class="comment">// 第二个参数：删除多少个；</span></span><br><span class="line">    <span class="comment">// 后面的参数都是要添加的元素</span></span><br><span class="line">aList2.splice(<span class="number">2</span>, <span class="number">1</span>) <span class="comment">// 输出：12jovelin</span></span><br><span class="line">aList2.splice(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="comment">// 输出：12456</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> push() 和 pop() 从数组最后增加成员或删除成员</span><br><span class="line">    pop() 返回值是被删除的数据</span><br><span class="line">    </span><br><span class="line"><span class="number">6.</span> aList[index] 用下标操作数组的某个数据</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> aList.length 获取数组的长度</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> join() 将数组成员通过一个分隔符合并成字符串</span><br><span class="line">    var aList = [<span class="number">2018</span>,<span class="number">8</span>,<span class="number">2</span>];</span><br><span class="line">    aList.join('-'); <span class="comment">// 输出 2018-8-2</span></span><br></pre></td></tr></table></figure><h3 id="十一、循环语句"><a href="#十一、循环语句" class="headerlink" title="十一、循环语句"></a>十一、循环语句</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">循环的作用：</span><br><span class="line">    <span class="number">1.</span> 重复执行的代码；</span><br><span class="line">    <span class="number">2.</span> 遍历数据</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 语法</span><br><span class="line">    for(var i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> 数组去重</span><br><span class="line"></span><br><span class="line">    var aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    var aList2 = [];</span><br><span class="line">    </span><br><span class="line">    for(var i=<span class="number">0</span>; i&lt;aList.length; i++) &#123;</span><br><span class="line">        if(aList.indexOf(aList[i]) == i) &#123;</span><br><span class="line">            aList2.push(aList[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="十二、调试程序的方法"><a href="#十二、调试程序的方法" class="headerlink" title="十二、调试程序的方法"></a>十二、调试程序的方法</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>alert(i)  </span><br><span class="line"><span class="code">    alert 去查看大量数据，不方便</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>console.log(i)</span><br><span class="line"><span class="code">    从控制台查看程序，适合查看大量数据使用的</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>document.title = i</span><br><span class="line"><span class="code">    在网页标题查看，基本没用</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="bullet">4. </span>断点调试</span><br><span class="line"><span class="code">    通过 chrome 浏览器调试工具的 sources 窗口，</span></span><br><span class="line"><span class="code">    可以对外链的 js 文件进行断点调试</span></span><br></pre></td></tr></table></figure><h3 id="十三、变量作用域"><a href="#十三、变量作用域" class="headerlink" title="十三、变量作用域"></a>十三、变量作用域</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1、全局变量</span><br><span class="line">    在函数之外定义的变量，为整个页面公用，函数内部外部都可以访问。</span><br><span class="line">    </span><br><span class="line">2、局部变量</span><br><span class="line">    在函数内部定义的变量，只能在定义该变量的函数内部访问，外部无法访问。</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义全局变量</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> a = <span class="number">12</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">myalert</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 定义局部变量</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> b = <span class="number">23</span>;</span></span><br><span class="line"><span class="undefined">            alert(a);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 修改全局变量</span></span></span><br><span class="line"><span class="undefined">            a++;</span></span><br><span class="line"><span class="undefined">            alert(b);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        myalert(); <span class="comment">// 弹出 12 和 23</span></span></span><br><span class="line"><span class="actionscript">        alert(a);  <span class="comment">// 弹出 13    </span></span></span><br><span class="line"><span class="actionscript">        alert(b);  <span class="comment">// 出错</span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 先修改全局变量，后又用 var 声明该变量问题</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> tv = <span class="string">'好电视'</span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">wang</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// alert(tv)    // 优先调用局部变量</span></span></span><br><span class="line"><span class="actionscript">            tv = <span class="string">'坏电视'</span>  <span class="comment">// 这里，浏览器以为你改的是下面那个tv。而不是全局的那个</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> tv = <span class="string">'老王家的'</span>   <span class="comment">// 变量提升</span></span></span><br><span class="line"><span class="undefined">            alert(tv)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">注意：只要局部变量定义声明了 var，就不会修改同名全局变量的值</span><br></pre></td></tr></table></figure><h3 id="十四、封闭函数"><a href="#十四、封闭函数" class="headerlink" title="十四、封闭函数"></a>十四、封闭函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">作用 </span><br><span class="line">    封闭函数可以创造一个独立的空间，</span><br><span class="line">    在封闭函数内定义的变量和函数不会影响外部同名的函数和变量，</span><br><span class="line">    可以避免命名冲突，在页面上引入多个 js 文件时，</span><br><span class="line">    用这种方式添加 js 文件比较安全</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 语法</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'hello!'</span>);</span><br><span class="line">    &#125;)()</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> 加上“;”、“~”和“!”等符号来定义匿名函数</span><br><span class="line"></span><br><span class="line">    ;<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'hello!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    ~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'hello!'</span>);</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    !<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'hello!'</span>);</span><br><span class="line">    &#125;()</span><br></pre></td></tr></table></figure><h3 id="十五、定时器"><a href="#十五、定时器" class="headerlink" title="十五、定时器"></a>十五、定时器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1、作用</span><br><span class="line">    1. 定时调用函数</span><br><span class="line">    2. 制作动画</span><br><span class="line"></span><br><span class="line">2、定时器：</span><br><span class="line">    setTimeout  只执行一次的定时器 </span><br><span class="line">    clearTimeout 关闭只执行一次的定时器</span><br><span class="line">    setInterval  反复执行的定时器</span><br><span class="line">    clearInterval 关闭反复执行的定时器</span><br><span class="line"></span><br><span class="line">3、定时器使用</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 定时器作用：多少毫秒之后，要执行什么程序</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oBtn1 = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oBtn2 = <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oBtn3 = <span class="built_in">document</span>.getElementById(<span class="string">'btn3'</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oBtn4 = <span class="built_in">document</span>.getElementById(<span class="string">'btn4'</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 关闭定时器要点：</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 1. 在全局声明一个空的变量</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 2. 把变量以修改的方式，赋值定时器</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> time1 = <span class="literal">null</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> time2 = <span class="literal">null</span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        oBtn1.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            time1 = setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">                ......</span></span><br><span class="line"><span class="undefined">            &#125;, 2000)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        oBtn2.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            time2 = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">                ......</span></span><br><span class="line"><span class="undefined">            &#125;, 2000)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        oBtn3.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">            clearTimeout(time1);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        oBtn4.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">            clearInterval(time2);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="十六、字符串处理方法"><a href="#十六、字符串处理方法" class="headerlink" title="十六、字符串处理方法"></a>十六、字符串处理方法</h3><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">1、字符串合并操作：“ + ”</span><br><span class="line"></span><br><span class="line">2、parseInt() 将数字字符串转化为整数</span><br><span class="line">    -<span class="ruby"> 有小数点取整数部分</span></span><br><span class="line"><span class="ruby">    </span></span><br><span class="line"><span class="ruby"><span class="number">3</span>、parseFloat() 将数字字符串转化为小数</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby"><span class="number">4</span>、split() 把一个字符串分隔成字符串组成的数组</span></span><br><span class="line"><span class="ruby">    - 括号中不写内容代表：把每一个字都转为数组</span></span><br><span class="line"><span class="ruby">    - 假如有符号，那么就会以这个符号为分割符进行拆分</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby"><span class="number">5</span>、indexOf() 查找字符串是否含有某字符</span></span><br><span class="line"><span class="ruby">    - 返回值：第一次出现的索引值</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby"><span class="number">6</span>、substring() 截取字符串</span></span><br><span class="line"><span class="ruby">    - 用法： substring(start, <span class="keyword">end</span>)</span></span><br><span class="line"><span class="ruby">    -（不包括 <span class="keyword">end</span>，左闭右开，从 <span class="number">0</span> 开始）</span></span><br><span class="line"><span class="ruby">    </span></span><br><span class="line"><span class="ruby"><span class="number">7</span>、字符串反转</span></span><br><span class="line"><span class="ruby">    var str = <span class="string">'asdfj12jlsdkf098'</span>;</span></span><br><span class="line"><span class="ruby">    /<span class="regexp">/ 先把字符串转为数组，数组反转之后，在将数组转为字符串</span></span></span><br><span class="line"><span class="ruby">    var str2 = str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JS 笔记；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JS" scheme="http://jovelin.cn/categories/JS/"/>
    
    
      <category term="JS" scheme="http://jovelin.cn/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>HTML + CSS 笔记</title>
    <link href="http://jovelin.cn/2018/08/01/HTML%20+%20CSS%20%E7%AC%94%E8%AE%B0/"/>
    <id>http://jovelin.cn/2018/08/01/HTML + CSS 笔记/</id>
    <published>2018-08-01T01:00:01.000Z</published>
    <updated>2018-08-09T02:48:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>HTML 标签；</li><li>CSS 样式；</li></ol></blockquote><a id="more"></a><h3 id="一、HTML-标签"><a href="#一、HTML-标签" class="headerlink" title="一、HTML 标签"></a>一、HTML 标签</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1、HTML 是 HyperText Mark-up Language 的首字母简写，</span><br><span class="line">    意思是超文本标记语言，超文本指的是超链接，标记指的是标签。</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DOC 声明  DTD 文档  规定网页用什么版本的 HTML--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个代表 HTML5 的版本声明--&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">              网页显示内容</span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>、块元素标签(行元素)和内联元素标签(行内元素)</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>、块元素：在布局中默认会独占一行，宽度默认等于父级的宽度，块元素后的元素需换行排列。</span><br><span class="line">    </span><br><span class="line">    <span class="number">2</span>、内联元素：元素之间可以排列在一行，设置宽高无效，它的宽高由内容撑开。</span><br></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>、空格、<span class="string">"&lt;"</span> 和 <span class="string">"&gt;"</span> 的字符实体为 <span class="variable">&amp;nbsp</span>; <span class="variable">&amp;lt</span>; 和 <span class="variable">&amp;gt</span>;</span><br></pre></td></tr></table></figure><blockquote><p>详细笔记：<a href="http://note.youdao.com/noteshare?id=86d7a2f80e783b3c6d86949b4f022e1e" target="_blank" rel="noopener">HTML 标签笔记</a></p></blockquote><h3 id="二、CSS-样式"><a href="#二、CSS-样式" class="headerlink" title="二、CSS 样式"></a>二、CSS 样式</h3><h4 id="1-css-引入方式"><a href="#1-css-引入方式" class="headerlink" title="1. css 引入方式"></a>1. css 引入方式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1、内联式：通过标签的style属性，在标签上直接写样式。</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px; height: 100px;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、嵌入式：通过style标签，在网页上创建嵌入的样式表。</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        ...</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3、外链式：通过link标签，链接外部样式文件到页面中。</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-css-选择器"><a href="#2-css-选择器" class="headerlink" title="2. css 选择器"></a>2. css 选择器</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、标签选择器</span><br><span class="line">    <span class="selector-tag">div</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;<span class="attribute">width</span>: <span class="number">100px</span>;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>、类选择器</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        通过 .类名 调用名字  </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="selector-class">.blue</span> &#123;<span class="attribute">color</span>: blue;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">通过 class 去定义名字；</span></span><br><span class="line"><span class="comment">调用多个类名，类名与类名之间敲一个空格</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"blue"</span>&gt;...&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line"><span class="number">3</span>、层级选择器</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        选择了 div 的子孙后代 span 标签；一个空格代表一个后代</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="selector-class">.con</span> <span class="selector-tag">span</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">    </span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"con"</span>&gt;</span><br><span class="line">        &lt;span&gt;...&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、ID 选择器</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">id 选择器是专门给 JS 使用的。</span></span><br><span class="line"><span class="comment">而且是唯一性的，一个 id 只能被使用一次（针对 JS）</span></span><br><span class="line"><span class="comment">平常做布局，都是用 class 的，ID 是给 JS 用的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="selector-id">#box</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">    </span><br><span class="line">    &lt;<span class="selector-tag">p</span> id=<span class="string">"box"</span>&gt;这是一个段落标签&lt;/p&gt;</span><br><span class="line">    </span><br><span class="line"><span class="number">5</span>、组选择器</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        组选择器什么情况用：当很多个元素都是执行同一样的CSS的时候</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="selector-class">.box1</span>,<span class="selector-class">.box2</span> &#123;<span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"box1"</span>&gt;...&lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"box2"</span>&gt;...&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line"><span class="number">6</span>、伪类选择器</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        :visited  点击过后的状态</span></span><br><span class="line"><span class="comment">    :hover  鼠标悬停的状态，触发状态里面的所有代码。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;<span class="attribute">color</span>: black;&#125;</span><br><span class="line"><span class="selector-tag">a</span>:visited &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box1</span> &#123;<span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;&#125;</span><br><span class="line">    <span class="selector-class">.box1</span>:hover &#123;<span class="attribute">width</span>: <span class="number">300px</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-css-类属性"><a href="#3-css-类属性" class="headerlink" title="3. css 类属性"></a>3. css 类属性</h4><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">   <span class="string">text-decoration </span>设置文字的下划线，如：<span class="string">text-decoration:</span> <span class="string">none;</span> 将文字下划线去掉；<span class="string">underline </span>则加上</span><br><span class="line">   </span><br><span class="line">   <span class="string">text-align </span>设置文字水平对齐方式，如<span class="string">text-align:</span> <span class="string">center;</span> 设置文字水平居中</span><br><span class="line">   </span><br><span class="line">   <span class="string">text-indent </span>设置文字首行缩进，如：<span class="string">text-indent:</span> <span class="string">24px;</span> 设置文字首行缩进<span class="string">24px</span></span><br><span class="line"><span class="string"> </span>  <span class="string">text-indent:</span> <span class="string">2em;</span> <span class="string">1em代</span>表1个中文字大小</span><br><span class="line">   </span><br><span class="line">   <span class="string">font-weight </span>字体加粗，<span class="string">font-weight:</span> <span class="string">normal;</span> 正常 / <span class="string">bold加</span>粗</span><br><span class="line">   </span><br><span class="line"><span class="string">resize </span>设置文本域的拖拽功能，如：<span class="string">resize:</span> <span class="string">none;</span> 去掉设置&lt;<span class="string">textarea&gt;</span>的拖拽功能</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">list-style</span> 去掉列表项的小圆点，比如：<span class="built_in">list-style:</span> <span class="string">none;</span></span><br><span class="line">   </span><br><span class="line">   <span class="string">border </span>设置边框，如： <span class="string">border:</span> <span class="string">1px </span><span class="string">solid </span><span class="string">gray;</span> (<span class="string">solid </span>实线; <span class="string">dotted </span>点线; <span class="string">dashed </span>虚线)</span><br><span class="line">   </span><br><span class="line">   <span class="string">background:</span> <span class="string">rgba(</span>0,0,0,0.5); 背景半透明属性（<span class="string">CSS3的</span>属性）；前面三个值代表颜色，最后的值代表透明度</span><br><span class="line">   </span><br><span class="line">   <span class="string">cursor:</span> <span class="string">pointer;</span> 改变指针形状；<span class="string">pointer变</span>成手指；<span class="string">move变</span>成可拖拽的</span><br><span class="line">   </span><br><span class="line">   <span class="string">line-height:</span> 1; 文字会默认有行高，设置为1，代表行的高等于文字的高度</span><br><span class="line">   </span><br><span class="line"><span class="string">border-radius:10px;</span> 设置盒子的圆角属性</span><br><span class="line">   </span><br><span class="line">   /* 设置元素透明度,将元素透明度设置为0.3，此属性需要加一个兼容<span class="string">IE的</span>写法 */</span><br><span class="line">   <span class="string">opacity:0.</span>3;</span><br><span class="line">   /* 兼容<span class="string">IE </span>*/</span><br><span class="line">   <span class="string">filter:alpha(</span><span class="string">opacity=</span><span class="string">30)</span>;</span><br><span class="line">   </span><br><span class="line">   /* 强制换行 */</span><br><span class="line">   <span class="string">word-break:</span> <span class="string">break-all;</span></span><br></pre></td></tr></table></figure><h4 id="4-css-显示特性"><a href="#4-css-显示特性" class="headerlink" title="4. css 显示特性"></a>4. css 显示特性</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span> 属性是用来设置元素的类型及隐藏的，常用的属性有：</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>、<span class="attribute">none</span> 元素隐藏且不占位置</span><br><span class="line">    </span><br><span class="line">    <span class="number">2</span>、inline 元素以行内元素显示</span><br><span class="line">        行内的显示模式，代表标签：<span class="selector-tag">a</span>,<span class="selector-tag">span</span>,label</span><br><span class="line">特点：</span><br><span class="line"><span class="number">1</span>.并排显示</span><br><span class="line"><span class="number">2</span>.不能设置宽高</span><br><span class="line">    </span><br><span class="line">    <span class="number">3</span>、block 元素以块元素显示</span><br><span class="line">        块级的显示模式，代表标签：<span class="selector-tag">div</span>,h1~<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">table</span>,form</span><br><span class="line">特点：</span><br><span class="line"><span class="number">1</span>.独占一行</span><br><span class="line"><span class="number">2</span>.能够设置宽高</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、inline-block 元素以行内块元素显示</span><br><span class="line">    行内块的显示模式，代表标签：表单类的元素,img</span><br><span class="line">特点：</span><br><span class="line"><span class="number">1</span>.并排显示</span><br><span class="line"><span class="number">2</span>.能设置宽高</span><br></pre></td></tr></table></figure><h4 id="5-css-元素溢出"><a href="#5-css-元素溢出" class="headerlink" title="5. css 元素溢出"></a>5. css 元素溢出</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">当子元素的尺寸超过父元素的尺寸时，需要设置父元素显示溢出的子元素的方式，设置的方法是通过 <span class="attribute">overflow</span> 属性来设置。</span><br><span class="line"></span><br><span class="line"><span class="attribute">overflow</span> 的设置项： </span><br><span class="line"></span><br><span class="line">    1、visible 默认值。内容不会被修剪，会呈现在元素框之外。</span><br><span class="line">    </span><br><span class="line">    2、hidden 内容会被修剪，并且其余内容是不可见的。</span><br><span class="line">    </span><br><span class="line">    3、scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</span><br><span class="line">    </span><br><span class="line">    4、<span class="attribute">auto</span> 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容，内容无修剪，则没有滚动条。</span><br></pre></td></tr></table></figure><h4 id="6-css-权重"><a href="#6-css-权重" class="headerlink" title="6. css 权重"></a>6. css 权重</h4><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">每个选择器都会分谁大谁小。如果权重值一样，看最后定义的，如果权重值不一样，就看谁的选择器比较大。</span><br><span class="line"></span><br><span class="line">权重的等级</span><br><span class="line">    可以把样式的应用方式分为几个等级，按照等级来计算权重：</span><br><span class="line">    <span class="number">1</span>、内联样式，如：style=<span class="string">''</span>，权重值为 <span class="number">1000</span></span><br><span class="line">    <span class="number">2</span>、ID选择器，如：<span class="meta">#content，权重值为 100</span></span><br><span class="line">    <span class="number">3</span>、类，伪类，如：.content、:hover，权重值为 <span class="number">10</span></span><br><span class="line">    <span class="number">4</span>、标签选择器，如：<span class="keyword">div</span>、p，权重值为 <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="7-css-初始化"><a href="#7-css-初始化" class="headerlink" title="7. css 初始化"></a>7. css 初始化</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    CSS初始化，把标签默认的间距，行高清空</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">div</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">table</span>,<span class="selector-tag">label</span>,<span class="selector-tag">span</span>,<span class="selector-tag">a</span>,<span class="selector-tag">img</span>,<span class="selector-tag">input</span>,select,<span class="selector-tag">textarea</span>,option,<span class="selector-tag">tr</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,form&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">line-height</span>:<span class="number">1</span>;&#125;</span><br><span class="line">a&#123;<span class="attribute">text-decoration</span>: none;&#125;</span><br></pre></td></tr></table></figure><h4 id="8-padding-内边距"><a href="#8-padding-内边距" class="headerlink" title="8. padding 内边距"></a>8. padding 内边距</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">内边距作用：隔开父盒子与子级内容之间的间距，一般都是父子级使用，而且都是给父元素去设置内边距</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">padding</span>：10px;  四个值按照顺时针方向，分别设置的是 上 右 下 左 四个方向的内边距值。</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">50px</span>;  <span class="comment">/*上下10px  左右50px*/</span></span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">50px</span> <span class="number">100px</span>;  <span class="comment">/*上10px  左右50px  下100px*/</span></span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">30px</span> <span class="number">60px</span> <span class="number">100px</span>;  <span class="comment">/*上右下左*/</span></span><br><span class="line"></span><br><span class="line">    思考：如果给元素增加边框和内边距，又不想改变元素整体的尺寸，应该怎么做？</span><br><span class="line">        </span><br><span class="line">    答：在 <span class="attribute">width</span> 和 <span class="attribute">height</span> 的基础上减去由边框和内边距增加的尺寸，上面的元素，将 <span class="attribute">width</span> 和 <span class="attribute">height</span> 改成 100px，</span><br><span class="line">    再加上四周 50px 的边框，四周 50px 的内边距，元素的宽高保持 300px 不变。</span><br></pre></td></tr></table></figure><h4 id="9-margin-外边距"><a href="#9-margin-外边距" class="headerlink" title="9. margin 外边距"></a>9. margin 外边距</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">外边距作用：盒子与盒子之间的距离。兄弟与兄弟之间的距离。</span><br><span class="line">    </span><br><span class="line">    块元素如果想设置相对页面水平居中，可以使用 <span class="attribute">margin</span> 值中的 <span class="attribute">auto</span> 关键字，"<span class="attribute">auto</span>" 只能用于左右的 <span class="attribute">margin</span> 设置</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">margin</span> 外边距问题（子级带着父亲跑了）</span><br><span class="line">        什么时候会带着父亲跑？</span><br><span class="line">    当第一排子级，写了上外边距，就会带着父亲跑。</span><br></pre></td></tr></table></figure><h4 id="10-float-浮动"><a href="#10-float-浮动" class="headerlink" title="10. float 浮动"></a>10. float 浮动</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">浮动是为了解决什么的？</span><br><span class="line">    并排显示，贴边。</span><br><span class="line"></span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">        左浮动，让元素贴着最左边，同时能够跟兄弟并排显示</span><br><span class="line">    <span class="attribute">float</span>:right;</span><br><span class="line">        右浮动，让元素贴着最右边，同时能够跟兄弟并排显示</span><br><span class="line">    </span><br><span class="line">    浮动的元素，如果父级没有高，就相当于这个父级没有区域，浮动元素是不会占位置的（只占有本身内容宽高）。</span><br><span class="line">        解决办法：元素如果用了浮动。那么父级就要加上高，不加高就会出问题</span><br><span class="line">    </span><br><span class="line">    让盒子贴着最右边，并且不改变顺序？</span><br><span class="line">        解决办法：给他们套一个父盒子，给父盒子写右浮动，再给子级写左浮动</span><br></pre></td></tr></table></figure><h4 id="11-position-定位"><a href="#11-position-定位" class="headerlink" title="11. position 定位"></a>11. position 定位</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">1、文档流</span><br><span class="line"></span><br><span class="line">    将窗体自上而下分成一行行, 并在每行中按从左至右的顺序排放元素,即为文档流。</span><br><span class="line">    只有三种情况会使得元素脱离文档流，分别是：浮动、绝对定位和相对定位。</span><br><span class="line"></span><br><span class="line">2、定位属性</span><br><span class="line"></span><br><span class="line">    static：无特殊定位，对象遵循正常文档流。<span class="attribute">top</span>，<span class="attribute">right</span>，<span class="attribute">bottom</span>，<span class="attribute">left</span> 等属性不会被应用。</span><br><span class="line"></span><br><span class="line">    relative：对象遵循正常文档流，但将依据 <span class="attribute">top</span>，<span class="attribute">right</span>，<span class="attribute">bottom</span>，<span class="attribute">left</span> 等属性在正常文档流中偏移位置。而其层叠通过 <span class="attribute">z-index</span> 属性定义。</span><br><span class="line">    </span><br><span class="line">    absolute：对象脱离正常文档流，使用 <span class="attribute">top</span>，<span class="attribute">right</span>，<span class="attribute">bottom</span>，<span class="attribute">left</span> 等属性进行绝对定位。而其层叠通过 <span class="attribute">z-index</span> 属性定义。</span><br><span class="line">    </span><br><span class="line">    fixed：对象脱离正常文档流，使用 <span class="attribute">top</span>，<span class="attribute">right</span>，<span class="attribute">bottom</span>，<span class="attribute">left</span> 等属性以窗口为参考点进行定位，当出现滚动条时，对象不会随着滚动。而其层叠通过 <span class="attribute">z-index</span> 属性定义。</span><br><span class="line"></span><br><span class="line">    1. 相对定位特点：</span><br><span class="line">        1.以自己为起点去移动的；2.占位置的</span><br><span class="line">    </span><br><span class="line">    2. 绝对定位特点：</span><br><span class="line">        1.不占位置；2.默认以<span class="selector-tag">body</span>为起点；3.任意标签都能设置宽高(脱离文档流)</span><br><span class="line">        </span><br><span class="line">        改变绝对定位的起点，方法：</span><br><span class="line">        给父（长辈）元素设置相对定位，绝对定位就会以这个盒子为起点</span><br><span class="line">        定位的口诀：子绝父（长辈）相</span><br><span class="line">        </span><br><span class="line">    3. 固定定位特点：1.不占位置；2.以可视区域（浏览器窗口）为起点；任何标签都能设置宽高（脱离文档流）</span><br><span class="line">    </span><br><span class="line">        定位的元素水平居中方法：</span><br><span class="line">            1. 把<span class="attribute">left</span>设置为50%；</span><br><span class="line">            2. <span class="attribute">margin-left</span>:-自身宽度度的一半px;</span><br><span class="line">                <span class="attribute">left</span>: <span class="number">50%</span>; <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">        </span><br><span class="line">        定位的元素垂直居中方法：</span><br><span class="line">            1. 把<span class="attribute">top</span>设置为50%；</span><br><span class="line">            2. <span class="attribute">margin-top</span>:-自身高度的一半px;</span><br><span class="line">                <span class="attribute">top</span>: <span class="number">50%</span>; <span class="attribute">margin-top</span>: -<span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">    4. 偏移量冲突问题</span><br><span class="line">        水平方向冲突，听 <span class="attribute">left</span> 的；垂直方向冲突，听 <span class="attribute">top</span> 的；</span><br><span class="line">        </span><br><span class="line">    5. <span class="attribute">z-index</span></span><br><span class="line">        解决定位谁压着谁的问题。数值越大，越靠前。</span><br><span class="line">        默认的数值是0</span><br><span class="line">        使用前提：只有定位才能使用<span class="attribute">z-index</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML 标签；&lt;/li&gt;
&lt;li&gt;CSS 样式；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://jovelin.cn/categories/HTML/"/>
    
      <category term="CSS" scheme="http://jovelin.cn/categories/HTML/CSS/"/>
    
    
      <category term="HTML" scheme="http://jovelin.cn/tags/HTML/"/>
    
      <category term="HTML 标签" scheme="http://jovelin.cn/tags/HTML-%E6%A0%87%E7%AD%BE/"/>
    
      <category term="CSS" scheme="http://jovelin.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Python miniweb 框架</title>
    <link href="http://jovelin.cn/2018/07/26/Python%20miniweb%20%E6%A1%86%E6%9E%B6/"/>
    <id>http://jovelin.cn/2018/07/26/Python miniweb 框架/</id>
    <published>2018-07-26T01:00:01.000Z</published>
    <updated>2018-07-28T02:45:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>web 开发各个节点关系图；</li><li>资源分类；</li><li>路由；</li><li>shell 脚本。</li></ol></blockquote><a id="more"></a><h1 id="miniweb-框架"><a href="#miniweb-框架" class="headerlink" title="miniweb 框架"></a>miniweb 框架</h1><h3 id="一、web-开发各个节点关系图"><a href="#一、web-开发各个节点关系图" class="headerlink" title="一、web 开发各个节点关系图"></a>一、web 开发各个节点关系图</h3><p><img src="https://upload-images.jianshu.io/upload_images/3365001-d7c1e7dfb5b1f5f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="web 开发各个节点关系.png"></p><h3 id="二、资源分类"><a href="#二、资源分类" class="headerlink" title="二、资源分类"></a>二、资源分类</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 静态资源： 不需要经常变化的资源文件：常用的： 图片,css,js,早期html文件</span><br><span class="line"><span class="number">2.</span> 动态资源： 经常需要变化的资源</span><br><span class="line">依据用户的请求方式不同，请求时间不同，产生的数据会发送相应的变化</span><br><span class="line">数据一般来自数据库中的数据</span><br><span class="line"><span class="number">3.</span> 模板资源： 不存储任何用户数据的文件，一个'空文件',也是一个静态资源，但是会结合其他的数据，形成动态资源</span><br><span class="line">        比如说从数据库中查询出的数据，再往模板文件中添加，形成动态资源</span><br><span class="line">        </span><br><span class="line"><span class="number">3.1</span> 替换模板的作用：</span><br><span class="line">   模板网页 + 动态数据 = 动态网页</span><br><span class="line">实现步骤：</span><br><span class="line"><span class="number">1.</span> 访问数据库，获取动态数据</span><br><span class="line"><span class="number">2.</span> 读取模板文件</span><br><span class="line"><span class="number">3.</span> 通过正则表达式，把动态数据替换到模板页面中，形成一个新的动态页面</span><br><span class="line"><span class="number">4.</span> 返回新的动态页面内容(响应体)</span><br></pre></td></tr></table></figure><h3 id="三、路由"><a href="#三、路由" class="headerlink" title="三、路由"></a>三、路由</h3><p>web 开发过程中的路由概念图</p><p><img src="https://upload-images.jianshu.io/upload_images/3365001-df04976fb4a66a83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="web 开发过程中的路由概念.png"></p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 请求路径 --&gt; 对应的执行函数</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 装饰器装饰路由</span><br><span class="line">装饰器工厂  向装饰器传参   @route(xxx)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 通过装饰器实现 mini_frame 中的路由器功能 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备一个装饰器工厂；通过装饰器的方式自动装配路由列表：[("/index.py", index)]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(url)</span></span>:  <span class="comment"># 装饰器工厂函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span></span>:  <span class="comment"># 装饰器函数</span></span><br><span class="line">        <span class="comment"># url ---&gt; /index.py</span></span><br><span class="line">        <span class="comment"># func --&gt; index  即执行index()(被装饰函数)函数的地址</span></span><br><span class="line">        print(<span class="string">"添加装饰"</span>)</span><br><span class="line">        g_route_list.append((url,func))  <span class="comment"># ("/index.py", index)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">            print(<span class="string">"正在执行拓展功能..."</span>)</span><br><span class="line">            func()</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> w1</span><br><span class="line"></span><br><span class="line">@route(<span class="string">"/index.py"</span>)</span><br><span class="line"><span class="comment"># <span class="doctag">@w</span>1  # 本质上 index = w1(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">pass</span><br></pre></td></tr></table></figure><h3 id="四、shell-脚本"><a href="#四、shell-脚本" class="headerlink" title="四、shell 脚本"></a>四、shell 脚本</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. xxx<span class="selector-class">.sh</span>   多个 linux 命令一起执行</span><br><span class="line">    设置执行权限</span><br><span class="line">        $ chmod <span class="number">777</span> xxx.sh</span><br><span class="line">    </span><br><span class="line">    run.sh</span><br><span class="line">        sudo python3 Web<span class="selector-class">.py</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. readme<span class="selector-class">.txt</span>  使用说明文档</span><br><span class="line">    运行步骤：</span><br><span class="line">        终端命令：./run.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;web 开发各个节点关系图；&lt;/li&gt;
&lt;li&gt;资源分类；&lt;/li&gt;
&lt;li&gt;路由；&lt;/li&gt;
&lt;li&gt;shell 脚本。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="Python 高级" scheme="http://jovelin.cn/tags/Python-%E9%AB%98%E7%BA%A7/"/>
    
      <category term="miniweb" scheme="http://jovelin.cn/tags/miniweb/"/>
    
  </entry>
  
  <entry>
    <title>Python 高级提升(三)</title>
    <link href="http://jovelin.cn/2018/07/24/Python%20%E9%AB%98%E7%BA%A7%E6%8F%90%E5%8D%87(%E4%B8%89)/"/>
    <id>http://jovelin.cn/2018/07/24/Python 高级提升(三)/</id>
    <published>2018-07-24T01:00:01.000Z</published>
    <updated>2018-07-28T02:12:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>代码编写两大原则；</li><li>闭包；</li><li>装饰器。</li></ol></blockquote><a id="more"></a><h3 id="一-代码编写两大原则"><a href="#一-代码编写两大原则" class="headerlink" title="一. 代码编写两大原则"></a>一. 代码编写两大原则</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>开放封闭原则</span><br><span class="line"><span class="code">    封闭：已实现的功能代码块</span></span><br><span class="line"><span class="code">    开放：对扩展开放</span></span><br><span class="line"><span class="code">    对已经实现的功能代码不允许被修改，但可以被扩展</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="bullet">2. </span>高内聚低耦合原则</span><br><span class="line"><span class="code">    高内聚：针对的是模块内部；</span></span><br><span class="line"><span class="code">    描述的是内部各个元素结合的密切程度，一般一个模块就做一件事情</span></span><br><span class="line"><span class="code">    低耦合：针对的是模块之间；模块之间关联度尽量少一点</span></span><br></pre></td></tr></table></figure><h3 id="二、闭包"><a href="#二、闭包" class="headerlink" title="二、闭包"></a>二、闭包</h3><h4 id="1-函数名"><a href="#1-函数名" class="headerlink" title="1. 函数名"></a>1. 函数名</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>函数名是一个引用函数代码空间的对象，这个对象在被赋值的时候也可以引用其他空间</span><br><span class="line"><span class="bullet">2. </span>可以把函数名当做参数来使用</span><br></pre></td></tr></table></figure><h4 id="2-闭包"><a href="#2-闭包" class="headerlink" title="2. 闭包"></a>2. 闭包</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">闭包好比是一个轻量级的实例对象</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 闭包的结构</span><br><span class="line"><span class="number">1.</span> 外部函数：外部函数返回内部函数的引用</span><br><span class="line"><span class="number">2.</span> 内部函数：内部函数使用了外部函数的参数或者的变量</span><br><span class="line">把这种结构的整体称为闭包</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 闭包与普通函数的区别</span><br><span class="line"><span class="number">1.</span> 普通函数能保存功能，但是不能保存传送给函数的数据(局部变量)</span><br><span class="line"><span class="number">2.</span> 闭包能保存功能，也可以保存数据</span><br><span class="line">   </span><br><span class="line">提示：</span><br><span class="line">    假如内部函数要修改外部函数的变量，则需先声明 </span><br><span class="line">    在 python3 中使用 <span class="keyword">nonlocal</span> 关键字(好比函数使用全局变量，使用 <span class="keyword">global</span> 关键字)</span><br></pre></td></tr></table></figure><h4 id="3-闭包的语法格式"><a href="#3-闭包的语法格式" class="headerlink" title="3. 闭包的语法格式"></a>3. 闭包的语法格式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 闭包的语法格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment"># 处理业务</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"内部函数使用了外部函数的参数：%d"</span> % num)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f1 = func(<span class="number">100</span>)  <span class="comment"># f1---&gt;inner--&gt;内部函数的定义</span></span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><h3 id="三、装饰器"><a href="#三、装饰器" class="headerlink" title="三、装饰器"></a>三、装饰器</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 在不改变函数的定义和调用的前提下，给函数扩展功能，这就是装饰器</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 装饰器的语法格式</span><br><span class="line">    <span class="comment"># 装饰器函数 本质就是闭包</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 验证1</span></span><br><span class="line">        print(<span class="string">"正在验证..."</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1  # 本质就是  f1 = w1(f1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span> <span class="comment"># 被装饰的函数</span></span><br><span class="line">    print(<span class="string">"查账"</span>)</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><h4 id="2-装饰器装饰不同类型的函数"><a href="#2-装饰器装饰不同类型的函数" class="headerlink" title="2. 装饰器装饰不同类型的函数"></a>2. 装饰器装饰不同类型的函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 装饰器装饰不同类型的函数</span><br><span class="line">a&gt; 装饰器装饰的函数没参数，没返回值</span><br><span class="line">b&gt; 装饰器装饰的函数有参数，没返回值</span><br><span class="line">c&gt; 装饰器装饰的函数没参数，有返回值</span><br><span class="line">d&gt; 装饰器装饰的函数有参数，有返回值</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 万能装饰器，无|有参数(多个)，无|有返回值</span><br><span class="line"><span class="comment"># 装饰器函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"正在执行身份验证..."</span>)  <span class="comment"># 拓展功能</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)  <span class="comment"># 执行被装饰函数</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被装饰的函数</span></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">"被装饰的函数：查账"</span>)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"value"</span></span><br></pre></td></tr></table></figure><h4 id="3-多个装饰器装饰一个函数"><a href="#3-多个装饰器装饰一个函数" class="headerlink" title="3. 多个装饰器装饰一个函数"></a>3. 多个装饰器装饰一个函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">多个装饰器装饰一个函数的分析：</span></span><br><span class="line"><span class="string">参照对象：被装饰的函数</span></span><br><span class="line"><span class="string">    1. 装饰时，由里到外</span></span><br><span class="line"><span class="string">    2. 执行的，由外到里</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="meta">@sms_veri  # 本质  f1=sms_veri(f1)  func---&gt; f1(被装饰函数的内存空间)</span></span><br><span class="line"><span class="meta">@pwd_veri  # 本质  f1=pwd_veri(f1)  func---&gt; f1(被装饰函数的内存空间)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span>  <span class="comment"># 被装饰的函数</span></span><br><span class="line">    print(<span class="string">"被装饰函数：转账功能"</span>)</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><h4 id="4-带有额外参数的装饰器函数"><a href="#4-带有额外参数的装饰器函数" class="headerlink" title="4. 带有额外参数的装饰器函数"></a>4. 带有额外参数的装饰器函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">小结：通过装饰器工厂来实现带额外参数的装饰器函数</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(flag)</span>:</span> <span class="comment"># 装饰器的工厂函数</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span> <span class="comment"># 装饰器函数</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">                <span class="keyword">if</span> flag==<span class="number">1</span>:</span><br><span class="line">                    print(<span class="string">"正在执行身份验证功能..."</span>)</span><br><span class="line">                func() <span class="comment"># 执行被装饰的函数</span></span><br><span class="line">            <span class="keyword">return</span> inner</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @outer(1)  # outer(0)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"被装饰函数：转账功能"</span>)</span><br><span class="line">    </span><br><span class="line">    f1()</span><br></pre></td></tr></table></figure><h4 id="5-类装饰器"><a href="#5-类装饰器" class="headerlink" title="5. 类装饰器"></a>5. 类装饰器</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 以定义类的方式实现装饰器</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类装饰器</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, func)</span></span><span class="symbol">:</span></span><br><span class="line">            <span class="keyword">self</span>.func = func</span><br><span class="line">            print(<span class="string">"添加身份验证的装饰功能"</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(<span class="keyword">self</span>, *args, **kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">            print(<span class="string">"正在身份验证..."</span>)</span><br><span class="line">            <span class="keyword">self</span>.func()         </span><br><span class="line">    </span><br><span class="line">    @Person  <span class="comment"># check = Person(check) </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">()</span></span>:  <span class="comment"># 被装饰的函数</span></span><br><span class="line">        print(<span class="string">"我是被装饰的函数...支付功能..."</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 目前的 check 起始就是 Person 类的实例对象</span></span><br><span class="line">    <span class="comment"># 实例对象()：表示该对象是可调用的，所有需要对创建该对象的类添加 __call__ 魔法方法</span></span><br><span class="line">    pay()</span><br></pre></td></tr></table></figure><h3 id="四、装饰器总结"><a href="#四、装饰器总结" class="headerlink" title="四、装饰器总结"></a>四、装饰器总结</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>装饰器函数只有一个参数就是被装饰的函数的引用</span><br><span class="line"><span class="bullet">2. </span>装饰器能够将一个函数的功能在不修改代码和调用的情况下进行扩展</span><br><span class="line"><span class="bullet">3. </span>在函数定义的上方 @装饰器函数名，即可直接使用装饰器对下面的函数进行装饰</span><br><span class="line"><span class="bullet">4. </span>装饰器的使用场景</span><br><span class="line"><span class="code">引入日志</span></span><br><span class="line"><span class="code">函数执行时间统计</span></span><br><span class="line"><span class="code">执行函数前预备处理</span></span><br><span class="line"><span class="code">执行函数后清理功能</span></span><br><span class="line"><span class="code">权限校验等场景</span></span><br><span class="line"><span class="code">缓存</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码编写两大原则；&lt;/li&gt;
&lt;li&gt;闭包；&lt;/li&gt;
&lt;li&gt;装饰器。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="Python 高级" scheme="http://jovelin.cn/tags/Python-%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python 高级提升(二)</title>
    <link href="http://jovelin.cn/2018/07/22/Python%20%E9%AB%98%E7%BA%A7%E6%8F%90%E5%8D%87(%E4%BA%8C)/"/>
    <id>http://jovelin.cn/2018/07/22/Python 高级提升(二)/</id>
    <published>2018-07-22T01:00:01.000Z</published>
    <updated>2018-07-28T02:12:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>可变参数的装包与拆包；</li><li>属性和方法；</li><li>魔法属性、方法；</li><li>property 属性；</li><li>with 与 上下文管理。</li></ol></blockquote><a id="more"></a><h3 id="一、可变参数的装包与拆包"><a href="#一、可变参数的装包与拆包" class="headerlink" title="一、可变参数的装包与拆包"></a>一、可变参数的装包与拆包</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 装包，针对的是形参中的 *<span class="keyword">args</span>、**kwargs</span><br><span class="line">    通过<span class="string">'*'</span>告诉 <span class="keyword">python</span> 解析器 把调用者传递过来的没有变量接收的未命名参数，装在 <span class="keyword">args</span> 这个元组中</span><br><span class="line">    通过<span class="string">'**'</span>告诉 <span class="keyword">python</span> 解析器 把调用者传递过来的命名参数，装在kwargs这个字典中</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>. 拆包，针对的是函数体中的 *<span class="keyword">args</span>、**kwargs</span><br><span class="line">    函数体里的 <span class="keyword">args</span> 依然是那个元组，但是 *<span class="keyword">args</span> 的含义就是把元组中的数据进行拆包，也就是把元组中的数据拆成单个数据</span><br><span class="line">    kwargs 同理可知</span><br></pre></td></tr></table></figure><h3 id="二、属性和方法"><a href="#二、属性和方法" class="headerlink" title="二、属性和方法"></a>二、属性和方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 类属性与实例属性</span><br><span class="line">    <span class="number">1.</span> 类属性存放在类对象的内存中，在内存中只保存一份</span><br><span class="line">    <span class="number">2.</span> 实例属性存放在实例对象的内存中，在每个实例对象中都单独保存一份</span><br><span class="line">    <span class="number">3.</span> 如果每个实例对象需要具有相同值的属性，那么就定义类属性</span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> 静态方法，类方法，实例方法</span><br><span class="line">    <span class="number">1.</span> 方法定义： </span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">static_fun</span><span class="params">()</span>:</span></span><br><span class="line"><span class="string">"""静态方法"""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_fun</span><span class="params">(cls)</span>:</span>  </span><br><span class="line"><span class="string">"""类方法"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">instance_fun</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""实例方法"""</span></span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span> 对比</span><br><span class="line">    相同点：对于所有的方法而言，均属于类，所以在内存中也只保存一份</span><br><span class="line">不同点：方法调用者不同、调用方法时自动传入的参数不同。</span><br></pre></td></tr></table></figure><h3 id="三、魔法属性、方法"><a href="#三、魔法属性、方法" class="headerlink" title="三、魔法属性、方法"></a>三、魔法属性、方法</h3><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">魔法属性和魔法方法是 Python 内置的一些属性和方法，代表着特殊意义，</span><br><span class="line">命名时会在前后加两个下划线，在执行特定操作时，系统会自动调用它</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. <span class="variable">__doc__</span></span><br><span class="line"><span class="variable">__doc__</span>：表示类的描述信息</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. <span class="variable">__module__</span>,<span class="variable">__class__</span></span><br><span class="line">    <span class="variable">__module__</span>：表示当前操作的对象或者类在哪个模块</span><br><span class="line">    <span class="variable">__class__</span>：表示当前操作的对象的类是什么</span><br><span class="line">   </span><br><span class="line"><span class="number">3</span>. <span class="variable">__dict__</span>,<span class="variable">__str__</span></span><br><span class="line">    <span class="variable">__dict__</span>：显示类或对象中的所有属性</span><br><span class="line">    <span class="variable">__str__</span>：如果类中重写了 <span class="variable">__str__</span> 方法，那么在打印对象时，输出该方法的返回值</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. <span class="variable">__init__</span>,<span class="variable">__del__</span></span><br><span class="line">    <span class="variable">__init__</span>：当类初始化对象时，自动执行该方法</span><br><span class="line">    <span class="variable">__del__</span>：当对象在内存中被销毁时，自动执行该方法</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. <span class="variable">__call__</span>  </span><br><span class="line">    <span class="variable">__call__</span>：对象后面加 ()，会自动执行该魔法方法</span><br><span class="line">    提示：必须在创建对象的类中添加 <span class="variable">__call__</span>() 方法，表示类的实例对象是能被 callable 调用的</span><br></pre></td></tr></table></figure><h3 id="四、property-属性"><a href="#四、property-属性" class="headerlink" title="四、property 属性"></a>四、property 属性</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="keyword">property</span><span class="title"> </span>属性初体验</span><br><span class="line">    一种用起来像是使用的实例属性一样的特殊属性，可以对应于某个方法，<span class="keyword">property</span><span class="title"> </span>属性本质还是方法</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">property</span><span class="title"> </span>属性的定义和调用注意点：</span><br><span class="line">    <span class="number">1</span>. 定义时，在实例方法的基础上添加 @<span class="keyword">property</span><span class="title"> </span>装饰器；并且方法仅有一个 self 参数</span><br><span class="line">    <span class="number">2</span>. 调用时，无需括号</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. <span class="keyword">property</span><span class="title"> </span>属性的好处</span><br><span class="line">将一个属性的操作方法封装为一个属性，用户用起来就和操作普通属性完全一致,非常简单</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 通过装饰器的方式定义 <span class="keyword">property</span><span class="title"> </span>属性</span><br><span class="line">    <span class="number">1</span>. 使用装饰器方式定义 <span class="keyword">property</span><span class="title"> </span>属性</span><br><span class="line">    - @<span class="keyword">property</span><span class="title"></span></span><br><span class="line">        取得属性值，修饰的方法有且仅有一个 self 参数</span><br><span class="line">    - @方法名.setter</span><br><span class="line">        设置属性值，修饰的方法，只能传一个参数</span><br><span class="line">    - @方法名.deleter</span><br><span class="line">        删除属性，修饰的方法有且仅有一个 self 参数</span><br><span class="line">    </span><br><span class="line">    <span class="number">2</span>. 访问 <span class="keyword">property</span><span class="title"> </span>属性的三种方式</span><br><span class="line">    temp = obj.price  <span class="comment"># 获取 property 属性</span></span><br><span class="line">    obj.price = new_price  <span class="comment"># 修改 property 属性</span></span><br><span class="line">    del obj.price  <span class="comment"># 删除 property 属性(很少使用)</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 通过类属性方式定义 <span class="keyword">property</span><span class="title"> </span>属性</span><br><span class="line">price = <span class="keyword">property</span><span class="title"></span>(get_price, set_price, del_price, <span class="string">"描述信息"</span>)</span><br><span class="line">     第一个参数是方法名: 获取属性值</span><br><span class="line">     第二个参数是方法名: 设置属性值</span><br><span class="line">     第三个参数是方法名: 删除属性</span><br><span class="line">     第四个参数是字符串: 该属性的描述信息，通过类名.属性名.__doc__调用</span><br><span class="line">     </span><br><span class="line">    obj.price  <span class="comment"># 获取 property 属性值</span></span><br><span class="line">    obj.price = new_price  <span class="comment"># 设置 property 属性值</span></span><br><span class="line">    obj.del_price()  <span class="comment"># 删除 property 属性(很少使用)</span></span><br><span class="line">    Obj.price.__doc__调用  <span class="comment"># 通过类名.属性名.__doc__调用</span></span><br></pre></td></tr></table></figure><h3 id="五、with-与-上下文管理"><a href="#五、with-与-上下文管理" class="headerlink" title="五、with 与 上下文管理"></a>五、with 与 上下文管理</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">with</span> 使用：</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"/home/python/Desktop/hello.txt"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> <span class="built_in">file</span>:</span><br><span class="line">        <span class="built_in">file</span>.<span class="built_in">write</span>(<span class="string">'hello with'</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 上下文管理器        </span><br><span class="line">    上下文：context，也称为上下文环境，好比教室环境</span><br><span class="line">       上文</span><br><span class="line">       正文：讲课，主业务</span><br><span class="line">       下文</span><br><span class="line"></span><br><span class="line">上下文管理：</span><br><span class="line">任何实现了 __enter__() 和 __exit__() 方法的对象</span><br><span class="line">都可称之为上下文管理器，上下文管理器可以使用 <span class="keyword">with</span> 简化操作</span><br><span class="line">    __enter__()：初始化资源对象，且返回资源对象</span><br><span class="line">    __exit__()：业务执行完后，在该方法做善后、清理方面的工作</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 装饰器的方式</span><br><span class="line">import contextlib</span><br><span class="line"></span><br><span class="line">@contextlib.contextmanager</span><br><span class="line">def my_open(path, mode):</span><br><span class="line">f = <span class="built_in">open</span>(path, mode)</span><br><span class="line">yield f</span><br><span class="line">f.<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line">小结： <span class="keyword">with</span> 语法用于简化资源操作的后续清除操作，是 <span class="keyword">try</span>/<span class="keyword">finally</span> 的替代方法，实现原理建立在上下文管理器之上</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可变参数的装包与拆包；&lt;/li&gt;
&lt;li&gt;属性和方法；&lt;/li&gt;
&lt;li&gt;魔法属性、方法；&lt;/li&gt;
&lt;li&gt;property 属性；&lt;/li&gt;
&lt;li&gt;with 与 上下文管理。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="Python 高级" scheme="http://jovelin.cn/tags/Python-%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python 高级提升(一)</title>
    <link href="http://jovelin.cn/2018/07/21/Python%20%E9%AB%98%E7%BA%A7%E6%8F%90%E5%8D%87(%E4%B8%80)/"/>
    <id>http://jovelin.cn/2018/07/21/Python 高级提升(一)/</id>
    <published>2018-07-21T01:00:01.000Z</published>
    <updated>2018-07-28T02:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>GIL (全局解释器锁)；</li><li>赋值、浅拷贝、深拷贝；</li><li>import 导入模块；</li><li>多继承以及 MRO 顺序。</li></ol></blockquote><a id="more"></a><h3 id="一、GIL-全局解释器锁"><a href="#一、GIL-全局解释器锁" class="headerlink" title="一、GIL (全局解释器锁)"></a>一、GIL (全局解释器锁)</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 单线程、多线程、多进程执行分析</span><br><span class="line">   双核 cpu</span><br><span class="line">     - 单线程： 一个 cpu <span class="number">100</span>% 使用，另一个空闲</span><br><span class="line">     - 两个线程： 两个 cpu 各自使用 <span class="number">50</span>%</span><br><span class="line">     - 两个进程： 两个 cpu 各自使用 <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> GIL 概念：</span><br><span class="line">GIL，全局解释器锁(global interpreter lock)，它不是 python 语言的特性，而是 python 默认的解析器 cpython 的特性</span><br><span class="line">cpython 要求每个线程必须先获取 GIL 锁，才能执行线程中的代码</span><br><span class="line"></span><br><span class="line">目的：解决多线程同时竞争解析器程序的全局变量而出现的线程安全问题</span><br><span class="line">不足：在多线程中不能充分利用多核 cpu</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 如何解决 GIL 问题：</span><br><span class="line"><span class="number">1.</span> 换解析器 ，把 cpython 换成其他的，比如 jpython</span><br><span class="line"><span class="number">2.</span> 针对多线程执行的业务，用其他语言代码，比如 c++，java 来代替，python 就是胶水语言</span><br><span class="line"><span class="number">3.</span> 多进程+多协程方案</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 面试题：</span><br><span class="line">描述 Python GIL 的概念，以及它对 python 多线程的影响？一个单线程抓取网页的程序，与一个多线程抓取网页的程序哪个性能更高，并解释原因。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> GIL，全局解释器锁(global interpreter lock)，它是 cpython 解析器的特性，不是 python 的特性 ，它要求线程在执行前，需要获取GIL锁，</span><br><span class="line"><span class="number">2.</span> 由于 GIL 的存在，会影响多线程不能利用多核 CPU 资源，通过多进程方式可利用多个 CPU 资源</span><br><span class="line"><span class="number">3.</span> 线程释放 GIL 锁的情况：</span><br><span class="line">在 IO 操作等可能会引起阻塞的 system call 之前，可以暂时释放 GIL，但在执行完毕后，必须重新获取 GIL</span><br><span class="line">Python <span class="number">3.</span>x 使用计时器（执行时间达到阈值后，当前线程释放 GIL）</span><br><span class="line"><span class="number">4.</span> 多线程爬取比单线程性能有提升，因为遇到 IO 阻塞会自动释放 GIL 锁，这样在线程阻塞情况下，可以执行其他线程中的代码</span><br></pre></td></tr></table></figure><h3 id="二、赋值、浅拷贝、深拷贝"><a href="#二、赋值、浅拷贝、深拷贝" class="headerlink" title="二、赋值、浅拷贝、深拷贝"></a>二、赋值、浅拷贝、深拷贝</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">赋值是对多个对象指向同一个内存空间，多个对象共同操作同一个数据</span><br><span class="line">深拷贝与浅拷贝是对内存数据的复制，目的是能够单独操作数据</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 赋值</span><br><span class="line">对象之间赋值本质上是对象之间内存地址的引用传递</span><br><span class="line">也就是多个对象指向同一个内存空间</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 浅拷贝</span><br><span class="line"><span class="number">1</span>. 引入 <span class="keyword">copy</span><span class="bash"> 模块</span></span><br><span class="line"><span class="bash">2. copy.copy(object)</span></span><br><span class="line"><span class="bash">    object: 要拷贝的对象</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">小结：浅拷贝是对象的第一层(顶层)的拷贝</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">3. 深拷贝</span></span><br><span class="line"><span class="bash">深拷贝</span></span><br><span class="line"><span class="bash">1. 引入 copy 模块</span></span><br><span class="line"><span class="bash">2. copy.deepcopy(object)</span></span><br><span class="line"><span class="bash">    object: 要拷贝的对象</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">小结：深拷贝是对象的所有层的拷贝</span></span><br><span class="line"><span class="bash">  </span></span><br><span class="line"><span class="bash">4. 不可变类型(元组,数字,字符串)的拷贝</span></span><br><span class="line"><span class="bash">    1&gt; 如果在多层嵌套中都是不可变类型</span></span><br><span class="line"><span class="bash">     浅拷贝与深拷贝都是相同的，都不会单独开辟内存空间，而是引用原来的内存空间</span></span><br><span class="line"><span class="bash"> 2&gt; 如果顶层是不可变类型，但内部元素有嵌入可变类型</span></span><br><span class="line"><span class="bash">     浅拷贝还是不会开辟新的内存空间，而是引用原来的内存空间</span></span><br><span class="line"><span class="bash">     深拷贝会拷贝对象的所有层</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">5. 其他拷贝方式(列表切片、字典中的 copy)</span></span><br><span class="line"><span class="bash">    列表切片、字典中的 copy 都使用浅拷贝</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">面试题：</span></span><br><span class="line"><span class="bash">    如何在内存中复制一个数据</span></span><br><span class="line"><span class="bash">        浅拷贝，深拷贝 copy 模块</span></span><br><span class="line"><span class="bash">    切片操作与字典中的拷贝属于哪种拷贝:</span></span><br><span class="line"><span class="bash">        浅拷贝</span></span><br></pre></td></tr></table></figure><h4 id="三、import-导入模块"><a href="#三、import-导入模块" class="headerlink" title="三、import 导入模块"></a>三、import 导入模块</h4><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">import</span> 搜索路径</span><br><span class="line">a&gt; 查看搜索路径</span><br><span class="line">sys.path # 系统预设的搜索路径</span><br><span class="line"></span><br><span class="line">b&gt; 设置搜索路径</span><br><span class="line">    sys.path.append(<span class="string">"/python/a"</span>)</span><br><span class="line">    sys.path.insert(<span class="number">0</span>,<span class="string">"/python/b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 重新导入模块</span><br><span class="line">热更新： 服务没有停止，再更新模块</span><br><span class="line"><span class="keyword">import</span> imp</span><br><span class="line"> imp.reload(load_test)</span><br><span class="line">   load_test:模块名</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 多模块开发时引用其它模块共享变量的问题 </span><br><span class="line">  <span class="number">1.</span> <span class="keyword">import</span> <span class="keyword">module</span> 方式  </span><br><span class="line">  本地不会创建新变量，操作的是目标模块的变量</span><br><span class="line"> <span class="number">2.</span> <span class="keyword">from</span> <span class="keyword">module</span> <span class="keyword">import</span> * 方式</span><br><span class="line"> 在本地创建一个与目标模块相同的变量名，并且与目标模块变量指向同一个内存空间</span><br><span class="line"></span><br><span class="line">面试题: <span class="keyword">import</span> <span class="keyword">module</span> 与 <span class="keyword">from</span> <span class="keyword">module</span> <span class="keyword">import</span> * 两种模块导入有何区别</span><br><span class="line"></span><br><span class="line"> <span class="number">1.</span> <span class="keyword">import</span> <span class="keyword">module</span> 引用共享变量时，要使用 <span class="keyword">module</span>.变量名，而 <span class="keyword">from</span> <span class="keyword">module</span> <span class="keyword">import</span> * 直接使用变量名即可</span><br><span class="line"> <span class="number">2.</span> <span class="keyword">import</span> <span class="keyword">module</span> 方式  </span><br><span class="line"> 本地不会创建新变量，操作的是目标模块的变量</span><br><span class="line">  <span class="number">3.</span> <span class="keyword">from</span> <span class="keyword">module</span> <span class="keyword">import</span> * 方式</span><br><span class="line">在本地创建一个与目标模块相同的变量名，并且与目标模块变量指向同一个内存空间</span><br></pre></td></tr></table></figure><h3 id="四、多继承以及-MRO-顺序"><a href="#四、多继承以及-MRO-顺序" class="headerlink" title="四、多继承以及 MRO 顺序"></a>四、多继承以及 MRO 顺序</h3><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 单继承</span><br><span class="line">子类调用父类的方法的方式：</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>. super().__init__()</span><br><span class="line">  <span class="number">2</span>. Parent.__init__(<span class="keyword">self</span>)</span><br><span class="line">  <span class="number">3</span>. super(类名,<span class="keyword">self</span>).__init__()</span><br><span class="line"></span><br><span class="line"> 单继承中，使用父类名与super调用父类的方法没有差异，是一样的</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 多继承中使用父类名调用父类的方法</span><br><span class="line">出现问题： 父类的方法会调用多次</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 多继承中使用 super() 调用父类的方法</span><br><span class="line">在多继承中，建议使用 super() 来调用父类的方法，而不用父类名的方式</span><br><span class="line"></span><br><span class="line">- mro顺序： <span class="function"><span class="keyword">Method</span> <span class="title">Resolution</span> <span class="title">Order</span> :</span></span><br><span class="line">    方法解决顺序，方法解析顺序</span><br><span class="line">    用于描述在Python多继承中子类调用多个父类相同方法的顺序 </span><br><span class="line">内部通过C3算法去解析</span><br><span class="line">- 类名.__mro__ : 用元组的形式存放子类调用多个父类相同方法的顺序（mro算法执行的结果）</span><br><span class="line"></span><br><span class="line">- super()与类名.__mro__的关系：</span><br><span class="line"># (&lt;<span class="keyword">class</span> <span class="string">'__main__.Grandson'</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">'__main__.Son1'</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">'__main__.Son2'</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">'__main__.Parent'</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">'object'</span>&gt;)</span><br><span class="line"></span><br><span class="line"> super(类名，<span class="keyword">self</span>)就是依照这个顺序确定要调用的是哪个父类的方法</span><br><span class="line">    通过<span class="keyword">self</span>确定mro顺序</span><br><span class="line">    通过类名找到当前类在mro中的位置，再返回下一个类作为super调用的父类</span><br><span class="line"></span><br><span class="line">小结： </span><br><span class="line">   <span class="number">1</span>. 单继承中，super().__init__相对于类名.__init__，基本无差别</span><br><span class="line">   <span class="number">2</span>. 多继承中，super() 能保证每个父类的方法只会执行一次，而使用类名的方法会导致方法被执行多次</span><br><span class="line">      多继承中建议使用super()</span><br><span class="line">   <span class="number">2</span>. super() 内部是通过 mro 算法来确定调用哪个父类的方法</span><br></pre></td></tr></table></figure><h3 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. vim -On one<span class="selector-class">.py</span>  two<span class="selector-class">.py</span> </span><br><span class="line">在vim中分屏显示多个文件</span><br><span class="line"><span class="number">2</span>.Htop命令： </span><br><span class="line">显示的内容比<span class="attribute">top</span>命令更加丰富，用于监视进程的资源占用率的情况</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GIL (全局解释器锁)；&lt;/li&gt;
&lt;li&gt;赋值、浅拷贝、深拷贝；&lt;/li&gt;
&lt;li&gt;import 导入模块；&lt;/li&gt;
&lt;li&gt;多继承以及 MRO 顺序。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="Python 高级" scheme="http://jovelin.cn/tags/Python-%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 与 Python 交互(五)</title>
    <link href="http://jovelin.cn/2018/07/18/MySQL%20%E4%B8%8E%20Python%20%E4%BA%A4%E4%BA%92(%E4%BA%94)/"/>
    <id>http://jovelin.cn/2018/07/18/MySQL 与 Python 交互(五)/</id>
    <published>2018-07-17T21:00:01.000Z</published>
    <updated>2018-07-28T02:57:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>Python 与 MySQL 的交互流程；</li><li>Connection 连接对象；</li><li>Cursor 对象；</li><li>sql 语句的参数化。</li></ol></blockquote><a id="more"></a><h3 id="一、Python-操作-MySQL-步骤-重点"><a href="#一、Python-操作-MySQL-步骤-重点" class="headerlink" title="一、Python 操作 MySQL 步骤(重点)"></a>一、Python 操作 MySQL 步骤(重点)</h3><h4 id="1-Python-与-MySQL-的交互"><a href="#1-Python-与-MySQL-的交互" class="headerlink" title="1. Python 与 MySQL 的交互"></a>1. Python 与 MySQL 的交互</h4><p><img src="https://upload-images.jianshu.io/upload_images/3365001-a63383fefa17d1f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Python与Mysql的交互.png"></p><h4 id="2-Python-访问数据库流程"><a href="#2-Python-访问数据库流程" class="headerlink" title="2. Python 访问数据库流程"></a>2. Python 访问数据库流程</h4><blockquote><p>提示：引入pymysql模块，通过该模块的api来访问mysql数据库(查看源码)</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>创建一个Connection连接对象</span><br><span class="line"><span class="bullet">2. </span>通过Connection连接对象取得游标Cursor对象</span><br><span class="line"><span class="bullet">3. </span>通过游标执行Sql语句</span><br><span class="line"><span class="bullet">4. </span>通过游标获取执行结果</span><br><span class="line"><span class="bullet">5. </span>依据业务处理执行结果</span><br><span class="line"><span class="bullet">6. </span>关闭游标</span><br><span class="line"><span class="bullet">7. </span>关闭连接</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3365001-8b8f1ca7bcda9100.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用Python DB API访问数据库流程.jpg"></p><h4 id="3-连接数据库对象"><a href="#3-连接数据库对象" class="headerlink" title="3. 连接数据库对象"></a>3. 连接数据库对象</h4><blockquote><p>快速写入conn连接代码的快捷技巧： <a href="http://note.youdao.com/noteshare?id=e7cdc06d7c2773263936a4b45c5e31a8" target="_blank" rel="noopener">PyCharm 快速输入技巧：Live Templates（自定义代码扩展）</a></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">conn = pymysql.connect(参数列表)</span><br><span class="line">参数host：连接的mysql主机，如果本机是<span class="string">'localhost'</span></span><br><span class="line">参数port：连接的mysql主机的端口，默认是<span class="number">3306</span></span><br><span class="line">参数database：数据库的名称</span><br><span class="line">参数<span class="keyword">user</span>：连接的用户名</span><br><span class="line">参数password：连接的密码</span><br><span class="line">参数charset：通信采用的编码方式，推荐使用utf8</span><br><span class="line"></span><br><span class="line">conn.cursor()  <span class="comment"># 返回Cursor对象，用于执行sql语句并获得结果</span></span><br><span class="line">conn.commit()  <span class="comment"># 提交事务,当涉及增删改时，需要保存数据(持久化)到数据库中</span></span><br><span class="line">conn.close()  <span class="comment"># 关闭连接</span></span><br></pre></td></tr></table></figure><h4 id="4-Cursor-对象"><a href="#4-Cursor-对象" class="headerlink" title="4. Cursor 对象"></a>4. Cursor 对象</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">cs_tuple = conn.cursor()  <span class="comment"># 默认为元组游标</span></span><br><span class="line"></span><br><span class="line">cs_tuple.close()  <span class="comment"># 关闭</span></span><br><span class="line">cs_tuple.execute(operation [, parameters ])  <span class="comment"># 执行语句，返回受影响的行数，主要用于执行select、insert、update、delete语句，也可以执行create、alter、drop等语句</span></span><br><span class="line">cs_tuple.fetchone()  <span class="comment"># 执行查询语句时，获取查询结果集的第一个行数据，返回一个元组</span></span><br><span class="line">cs_tuple.fetchall()  <span class="comment"># 执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回</span></span><br></pre></td></tr></table></figure><h4 id="5-Cursor-对表的增删改查"><a href="#5-Cursor-对表的增删改查" class="headerlink" title="5. Cursor 对表的增删改查"></a>5. Cursor 对表的增删改查</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">提示：</span><br><span class="line">    Cursor：是一个生成器/迭代器</span><br><span class="line">    <span class="number">1</span>. cs1 = conn.<span class="built_in">cursor</span>()  # 取得元组Cursor</span><br><span class="line">    <span class="number">2</span>. cs1 = conn.<span class="built_in">cursor</span>(<span class="built_in">cursor</span>=pymysql.cursors.DictCursor)  # 取得字典Cursor，结果集是以字典的形式呈现的</span><br><span class="line">    <span class="number">3</span>. 对数据库进行增删改时，需要执行connection.commit()提交命令，把修改的数据持久化到数据库中(没有 commit 前是在内存中进行操作的)</span><br><span class="line">  </span><br><span class="line">查询</span><br><span class="line">    cs1.<span class="keyword">execute</span>(sql, <span class="keyword">args</span>)</span><br><span class="line">    <span class="built_in">cursor</span>.fetchone()  # 从结果集中抓取单条记录</span><br><span class="line">    <span class="built_in">cursor</span>.fetchall()  # 从结果集中抓取全部记录</span><br><span class="line">    </span><br><span class="line">    item = cs_dict.fetchone()  # 从结果集抓取一条数据，默认从第一个位置开始（抓取一次，游标下移一位，全部抓取完后，后面再抓取数据就为空）</span><br><span class="line">    <span class="keyword">print</span>(item[<span class="string">"name"</span>], item[<span class="string">"price"</span>])  # 字典</span><br><span class="line"></span><br><span class="line">增删改</span><br><span class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, <span class="keyword">args</span>)</span><br><span class="line">    conn.commit()</span><br></pre></td></tr></table></figure><h4 id="6-sql-语句的参数化"><a href="#6-sql-语句的参数化" class="headerlink" title="6. sql 语句的参数化"></a>6. sql 语句的参数化</h4><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 目的：通过sql参数化可以防止用户通过sql注入方式盗取数据</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 出现的问题：</span><br><span class="line"></span><br><span class="line">query_name = input(<span class="string">"请输入要查询的名称:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户输入的值如下：</span></span><br><span class="line">query_name = <span class="string">' or 1 or '</span></span><br><span class="line">query_name = <span class="string">' or 1=1 or '</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql字符串格式化后，会出现查询条件恒为True，即把所有数据都查询出来</span></span><br><span class="line">sql = <span class="string">"select * from goods WHERE name='%s'"</span> % sname  </span><br><span class="line">sql= select * <span class="built_in">from</span> goods WHERE name=<span class="string">''</span> <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line">sql = select * <span class="built_in">from</span> goods WHERE name=<span class="string">''</span> <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">or</span> <span class="string">''</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line">cs1.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 解决办法:</span><br><span class="line"></span><br><span class="line">sname=input(<span class="string">"请输入要查询的名称:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不用开发者自己拼接字符串</span></span><br><span class="line">    sql = <span class="string">"select * from goods WHERE name=%s"</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">params</span> = [sname]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把sname作为sql参数传入到execute中，由sql的api来过滤一些特殊的字符</span></span><br><span class="line">affect_num = cs1.execute(sql, <span class="built_in">params</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 模糊查询</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- like</span></span><br><span class="line">    sql = <span class="string">"select * from goods WHERE name like %s"</span></span><br><span class="line">    <span class="built_in">params</span> = [<span class="string">'%%%s%%'</span>%key_name]  <span class="comment"># %笔记本%，注意：% 需要转义， _不需要转义</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- rlike</span></span><br><span class="line">    sql = <span class="string">"select * from goods WHERE name rlike %s"</span>  <span class="comment"># 正则实现模糊查询</span></span><br><span class="line">    <span class="built_in">params</span> = [query_key]  <span class="comment"># 正则</span></span><br><span class="line">    </span><br><span class="line">    affect_rows = cs1.execute(sql, <span class="built_in">params</span>)</span><br><span class="line">    print(<span class="string">"影响的行数:"</span>, affect_rows)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python 与 MySQL 的交互流程；&lt;/li&gt;
&lt;li&gt;Connection 连接对象；&lt;/li&gt;
&lt;li&gt;Cursor 对象；&lt;/li&gt;
&lt;li&gt;sql 语句的参数化。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
      <category term="MySQL" scheme="http://jovelin.cn/categories/Python/MySQL/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="MySQL" scheme="http://jovelin.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 高级提升(四)</title>
    <link href="http://jovelin.cn/2018/07/18/MySQL%20%E9%AB%98%E7%BA%A7%E6%8F%90%E5%8D%87(%E5%9B%9B)/"/>
    <id>http://jovelin.cn/2018/07/18/MySQL 高级提升(四)/</id>
    <published>2018-07-17T20:00:01.000Z</published>
    <updated>2018-07-28T01:50:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>视图的作用、特点以及使用；</li><li>事务的 ACID 特性以及使用；</li><li>面试题：对索引的认识以及使用；</li><li>数据库的设计：E-R 模型、三范式。</li></ol></blockquote><a id="more"></a><h3 id="一、视图"><a href="#一、视图" class="headerlink" title="一、视图"></a>一、视图</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">1. 掌握视图的作用、特点以及如何使用</span><br><span class="line"></span><br><span class="line">特点： </span><br><span class="line">    视图是对若干张基本表的引用，一张虚表，查询语句执行的结果</span><br><span class="line">    不存储具体的数据（基本表数据发生了改变，视图也会跟着改变） </span><br><span class="line"></span><br><span class="line">使用：</span><br><span class="line">    1. <span class="keyword">create</span> <span class="keyword">view</span> 视图名称 <span class="keyword">as</span> <span class="keyword">select</span> ...</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">select</span> * <span class="keyword">from</span> 视图</span><br><span class="line">    <span class="number">3.</span> <span class="keyword">drop</span> <span class="keyword">view</span> 视图名称</span><br><span class="line">    </span><br><span class="line">作用：视图的优缺点（面试：谈一谈对视图的认识）</span><br><span class="line"></span><br><span class="line">a&gt;优点:</span><br><span class="line"><span class="number">1.</span> 简化查询操作</span><br><span class="line">对于复杂的查询，往往是有多个数据表进行关联查询而得到,对于这个复杂的查询结果保存为一个视图，便于下一次查询时简化查询操作</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 逻辑上的独立性，屏蔽了真实表结构更改带来的影响</span><br><span class="line">视图可以使应用程序和数据库表在一定程度上独立。如果没有视图，应用一定是建立在表上的。有了视图之后，程序可以建立在视图之上，从而程序与数据库表被视图分割开来。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 视图能够对机密数据提供一定安全保护</span><br><span class="line">因为视图是虚拟的，物理上是不存在的，只是存储了数据的集合，我们可以将基表中重要的字段信息，可以不通过视图给用户</span><br><span class="line"></span><br><span class="line">b&gt; 不足：</span><br><span class="line">    <span class="number">1.</span> 性能差</span><br><span class="line">对视图(<span class="keyword">select</span>)的查询最终转换为对基本表的查询，如果这个视图是由一个复杂的多表查询所定义，那么，即使是视图的一个简单查询，也会花费一定时间</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 额外增加数据库的复杂度</span><br></pre></td></tr></table></figure><h3 id="二、事务"><a href="#二、事务" class="headerlink" title="二、事务"></a>二、事务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在Python中，打开一个连接，默认会开启事务，针对增删改，需要事务的提交 conn.commit()</span><br><span class="line"></span><br><span class="line">遇到的问题？</span><br><span class="line">银行转账分为2部分</span><br><span class="line">1. A账号转出1000元</span><br><span class="line">2. B账号转入1000元</span><br><span class="line">两部分操作是不可分割的，要么一起成功，要么一起失败</span><br><span class="line">解决方案： 使用事务</span><br><span class="line"></span><br><span class="line">1. 事务是什么</span><br><span class="line"></span><br><span class="line">所谓事务,它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的执行单位</span><br><span class="line"></span><br><span class="line">2. 事务的ACID特性 (面试题：事务的ACID是什么)</span><br><span class="line">   </span><br><span class="line"><span class="meta">a&gt;</span><span class="bash"> 原子性(Atomic)： 语句不可分割，要么同时执行，要么同时不执行</span></span><br><span class="line"><span class="meta">b&gt;</span><span class="bash"> 一致性(Consistency): 数据库总是从一个一致性的状态转换到另一个一致性的状态</span></span><br><span class="line"><span class="meta">c&gt;</span><span class="bash"> 隔离性(Isolation)：通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的</span></span><br><span class="line"><span class="meta">d&gt;</span><span class="bash"> 持久性(Durability)</span></span><br><span class="line">    一旦事务提交，则其所做的修改会永久保存到数据库</span><br><span class="line">   </span><br><span class="line">3. mysql事务的使用</span><br><span class="line"></span><br><span class="line">1. 开启事务命令</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启事务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> start transaction;</span></span><br><span class="line">begin;  </span><br><span class="line">2. 提交事务命令</span><br><span class="line">    commit；</span><br><span class="line">3. 事务回滚命令</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line">4. 事务的提示：</span><br><span class="line"></span><br><span class="line">1. innodb引擎支持事务(默认的引擎)，MyISAM不支持事务</span><br><span class="line">2. 使用终端操作数据库(也就是mysql的客户端)的时候 也是默认开始事物的，只是在回车确认操作的时候 终端会默认执行commit 所以我们不需要手动commit。但假如手动调用begin时，就需要手动调用commit提交事务</span><br><span class="line">3. 使用python操作数据库的时候 默认开启事务的 </span><br><span class="line">4. 但是python对数据库进行增删改的时候 需要手动commit</span><br></pre></td></tr></table></figure><h3 id="三、索引"><a href="#三、索引" class="headerlink" title="三、索引"></a>三、索引</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">遇到问题1：</span><br><span class="line">    如何快速查字典的单词，快速找一本书中的某章节的具体内容？</span><br><span class="line">遇到问题2：</span><br><span class="line">    当数据库中数据量很大时，查找数据会变得很慢，如何优化查询？</span><br><span class="line">解决方案：使用索引</span><br><span class="line"></span><br><span class="line">1. 什么是索引</span><br><span class="line">索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。</span><br><span class="line">索引就好比是一本书前面的目录，能加快数据库的查询速度</span><br><span class="line"></span><br><span class="line">2. 索引原理(了解)</span><br><span class="line">    思想： 不断缩小查找范围</span><br><span class="line">    内部具体实现方案： B+Tree实现</span><br><span class="line">        数据分析： 数据结构</span><br><span class="line">        线性表，二叉树，三叉数， 队列， 栈 </span><br><span class="line"></span><br><span class="line">3. 索引的使用</span><br><span class="line">a&gt; 查看索引</span><br><span class="line">show <span class="keyword">index</span> <span class="keyword">from</span> 表名;</span><br><span class="line">show <span class="keyword">index</span> <span class="keyword">from</span> goods;</span><br><span class="line"></span><br><span class="line">b&gt; 创建索引</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> 索引名称 <span class="keyword">on</span> 表名(字段名称(长度))</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> name_index <span class="keyword">on</span> goods(name(<span class="number">150</span>));</span><br><span class="line"></span><br><span class="line">c&gt; 删除索引</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> 索引名称 <span class="keyword">on</span> 表名;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> name_index <span class="keyword">on</span> goods;</span><br><span class="line"></span><br><span class="line">4. 索引优化查询测试</span><br><span class="line">1. 创建表 t_news(新闻)表</span><br><span class="line">   <span class="keyword">create</span> table t_news(<span class="built_in">title</span> varchar(<span class="number">10</span>));</span><br><span class="line">2. 通过python程序向t_news表添加10万条记录</span><br><span class="line"><span class="number">3.</span> 测试有无索引的查询效率</span><br><span class="line"><span class="keyword">set</span> profiling=<span class="number">1</span>; # 开启时间检测</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_news <span class="keyword">where</span> <span class="built_in">title</span>=<span class="string">'ha-80000'</span>; # 建立索引之前执行查询</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> title_index <span class="keyword">on</span> t_news(<span class="built_in">title</span>(<span class="number">10</span>)); # 创建索引之后执行查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_news <span class="keyword">where</span> <span class="built_in">title</span>=<span class="string">'ha-80000'</span>; </span><br><span class="line">show profiles; # 显示执行简表</span><br><span class="line"></span><br><span class="line">5. 索引注意点(面试题:谈谈你对索引的认识):</span><br><span class="line">    1. 索引最主要解决的问题:当数据量较大时,且这些数据不需要经常修改,使用索引来加快查询速度</span><br><span class="line">2. 对于比较小的表，查询开销不会很大，也没有必要建立另外的索引</span><br><span class="line">3. 建立太多的索引将会影响更新和插入的速度，因为它需要同样更新每个索引文件</span><br><span class="line">4. 对于一个经常需要更新和插入的表格，就没有必要为一个很少使用的where字句单独建立索引了 </span><br><span class="line">5. 建立索引会占用磁盘空间</span><br></pre></td></tr></table></figure><h3 id="四、数据库的设计"><a href="#四、数据库的设计" class="headerlink" title="四、数据库的设计"></a>四、数据库的设计</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E-R模型：实体关系模型</span><br><span class="line">    1. 一对一</span><br><span class="line">    2. 一对多</span><br><span class="line">    3. 多对一</span><br><span class="line">    4. 多对多</span><br><span class="line">    </span><br><span class="line">三范式</span><br><span class="line">    1NF： 列不能再分割</span><br><span class="line">    2NF： 基于1NF，有主键，非主键要依赖主键</span><br><span class="line">    3NF ：基于2NF，不能传递依赖主键</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. E-R模型(Entity-Relationship Model)</span><br><span class="line"></span><br><span class="line">关系型数据库是建立在实体关系模型(E-R模型)基础之上,再开展数据库的分析与设计</span><br><span class="line">        基于面向对象思想的分析与设计</span><br><span class="line">        </span><br><span class="line">        面向对象的分析与设计：</span><br><span class="line">            1. 同学  2. 老师  3. 班级  4. 教室</span><br><span class="line">            实体-关系模型 </span><br><span class="line"></span><br><span class="line">在项目开发中，一般会先设计好数据库，数据库开发一般是项目开发的第一步</span><br><span class="line"><span class="meta">a&gt;</span><span class="bash"> 实体(Entry)</span></span><br><span class="line">实体设计就好比定义一个类一样，指定从哪些方面来描述对象，一个实体可以转换为数据库中的一个表</span><br><span class="line"></span><br><span class="line"><span class="meta">b&gt;</span><span class="bash"> 关系(Relationship)</span></span><br><span class="line">描述两个实体之间的对应规则</span><br><span class="line">1. 一对一：</span><br><span class="line">一个萝卜一个坑</span><br><span class="line">学生与指纹</span><br><span class="line">员工和工资卡</span><br><span class="line"></span><br><span class="line">2. 一对多</span><br><span class="line">班级与学生</span><br><span class="line">客户与订单</span><br><span class="line">部门与员工</span><br><span class="line"></span><br><span class="line">3. 多对一</span><br><span class="line">学生与班级</span><br><span class="line">员工与部门</span><br><span class="line"></span><br><span class="line">4. 多对多关系</span><br><span class="line">  学生与社团</span><br><span class="line">  运动员与比赛项目</span><br><span class="line"></span><br><span class="line">2. 三范式:</span><br><span class="line"></span><br><span class="line">为了建立冗余较小、结构合理的数据库，设计数据库时必须遵循一定的规则。在关系型数据库中这种规则就称为范式</span><br><span class="line">数据库的范式越高，则数据冗余越少，但是会导致查询效率降低，一般数据库设计满足第三范式，就很好了</span><br><span class="line"></span><br><span class="line"><span class="meta">a&gt;</span><span class="bash"> 第一范式 1NF </span></span><br><span class="line">强调的是列的原子性，即列不能够再分成其他几列 </span><br><span class="line"></span><br><span class="line"><span class="meta">b&gt;</span><span class="bash"> 第二范式</span></span><br><span class="line">首先是 1NF，另外包含两部分内容，一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键</span><br><span class="line">   依据主键能够推导出其他字段的信息</span><br><span class="line"></span><br><span class="line"><span class="meta">c&gt;</span><span class="bash"> 第三范式</span></span><br><span class="line">首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;视图的作用、特点以及使用；&lt;/li&gt;
&lt;li&gt;事务的 ACID 特性以及使用；&lt;/li&gt;
&lt;li&gt;面试题：对索引的认识以及使用；&lt;/li&gt;
&lt;li&gt;数据库的设计：E-R 模型、三范式。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
      <category term="MySQL" scheme="http://jovelin.cn/categories/Python/MySQL/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="MySQL" scheme="http://jovelin.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 外键使用(三)</title>
    <link href="http://jovelin.cn/2018/07/18/MySQL%20%E5%A4%96%E9%94%AE%E4%BD%BF%E7%94%A8(%E4%B8%89)/"/>
    <id>http://jovelin.cn/2018/07/18/MySQL 外键使用(三)/</id>
    <published>2018-07-17T19:00:01.000Z</published>
    <updated>2018-07-28T01:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>外键概念；</li><li>外键的创建和删除使用；</li><li>面试题：在目前主流的数据库设计中，为什么越来越少使用到外键约束？</li></ol></blockquote><a id="more"></a><h3 id="外键的概念和使用"><a href="#外键的概念和使用" class="headerlink" title="外键的概念和使用"></a>外键的概念和使用</h3><h5 id="1-外键概念："><a href="#1-外键概念：" class="headerlink" title="1. 外键概念："></a>1. 外键概念：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前表的某个字段是另一个的主键</span><br></pre></td></tr></table></figure><h5 id="2-创建外键"><a href="#2-创建外键" class="headerlink" title="2. 创建外键:"></a>2. 创建外键:</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时就添加</span></span><br><span class="line">foreign key(brand_id) references goods_brands(id)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建完表后添加</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">add</span> foreign <span class="keyword">key</span>(brand_id) <span class="keyword">references</span> goods_brands(<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure><h5 id="3-删除外键"><a href="#3-删除外键" class="headerlink" title="3. 删除外键:"></a>3. 删除外键:</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">drop</span> foreign <span class="keyword">key</span> goods_ibfk_1;</span><br></pre></td></tr></table></figure><h5 id="4-涉及外键的面试"><a href="#4-涉及外键的面试" class="headerlink" title="4. 涉及外键的面试"></a>4. 涉及外键的面试</h5><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">在目前主流的数据库设计中，为什么越来越少使用到外键约束？</span><br><span class="line"></span><br><span class="line">    原因： 会极大的降低表更新的效率</span><br><span class="line">如何替代 <span class="string">'通过外键约束实现数据有效性验证'</span></span><br><span class="line">解决思想： 可在数据录入时验证<span class="comment">(UI 层、表示层、前端页面)</span>，或者在业务层面<span class="comment">(python代码)</span>去验证，而不要数据库层面去验证。</span><br><span class="line"></span><br><span class="line">M<span class="attr">VC 三层模型：</span></span><br><span class="line"><span class="attr">    1</span>. UI 层（表示层）</span><br><span class="line">    <span class="number">2.</span> 业务逻辑层</span><br><span class="line">    <span class="number">3.</span> 数据库层</span><br></pre></td></tr></table></figure><blockquote><p>Mysql 增加、删除外键详细：<a href="https://blog.csdn.net/qq_34988341/article/details/78305892" target="_blank" rel="noopener">https://blog.csdn.net/qq_34988341/article/details/78305892</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;外键概念；&lt;/li&gt;
&lt;li&gt;外键的创建和删除使用；&lt;/li&gt;
&lt;li&gt;面试题：在目前主流的数据库设计中，为什么越来越少使用到外键约束？&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
      <category term="MySQL" scheme="http://jovelin.cn/categories/Python/MySQL/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="MySQL" scheme="http://jovelin.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 命令语句(二)</title>
    <link href="http://jovelin.cn/2018/07/18/MySQL%20%E5%91%BD%E4%BB%A4%E8%AF%AD%E5%8F%A5(%E4%BA%8C)/"/>
    <id>http://jovelin.cn/2018/07/18/MySQL 命令语句(二)/</id>
    <published>2018-07-17T18:00:01.000Z</published>
    <updated>2018-07-28T02:04:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>使用命令行启动、登录 MySQL 数据库；</li><li>数据库、数据表和数据(记录)的增删查改；</li><li>数据(记录)的高级查询；</li><li>数据库的备份与恢复。</li></ol></blockquote><a id="more"></a><h3 id="一、基本命令行"><a href="#一、基本命令行" class="headerlink" title="一、基本命令行"></a>一、基本命令行</h3><h4 id="1-MySQL-服务器操作"><a href="#1-MySQL-服务器操作" class="headerlink" title="1. MySQL 服务器操作"></a>1. MySQL 服务器操作</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">启动: sudo service mysql start</span><br><span class="line">查看: <span class="keyword">ps</span> -aux | <span class="keyword">grep</span> <span class="string">'mysql'</span></span><br><span class="line">停止: sudo service mysql <span class="keyword">stop</span></span><br><span class="line">重启：sudo service mysql restart</span><br></pre></td></tr></table></figure><!-- more --><h4 id="2-MySQL-客户端操作"><a href="#2-MySQL-客户端操作" class="headerlink" title="2. MySQL 客户端操作"></a>2. MySQL 客户端操作</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">登录: mysql -u root -p</span><br><span class="line">退出: <span class="keyword">exit</span><span class="regexp">/quit</span></span><br></pre></td></tr></table></figure><h4 id="3-数据库操作"><a href="#3-数据库操作" class="headerlink" title="3. 数据库操作"></a>3. 数据库操作</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">数据库操作：使用、查看、创建、删除</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 使用数据库</span></span><br><span class="line">    <span class="keyword">use</span> db_xxx;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 查看所有数据库</span></span><br><span class="line">    <span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 查看当前数据库</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">database</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 创建</span></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">database</span> db_xxx <span class="keyword">charset</span>=utf8;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 查看创建语句</span></span><br><span class="line">    <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> db_xxx;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 删除</span></span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">database</span> db_xxx;</span><br></pre></td></tr></table></figure><h4 id="4-数据表操作"><a href="#4-数据表操作" class="headerlink" title="4. 数据表操作"></a>4. 数据表操作</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">数据表操作：查看、创建、修改、删除</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 查看</span></span><br><span class="line">    <span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 创建</span></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> 数据表名字 (字段 类型 约束[, 字段 类型 约束]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 修改</span></span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span>|<span class="keyword">modify</span>|<span class="keyword">change</span>|<span class="keyword">drop</span> 列名 类型及约束;</span><br><span class="line">        <span class="comment">-- 添加字段 </span></span><br><span class="line">        <span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 类型;</span><br><span class="line">        <span class="comment">-- 修改字段：不重命名版</span></span><br><span class="line">        <span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 列名 类型及约束;</span><br><span class="line">        <span class="comment">-- 修改字段：重命名版</span></span><br><span class="line">        <span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 原名 新名 类型及约束;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 删除</span></span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="5-数据-记录-的增删改查curd"><a href="#5-数据-记录-的增删改查curd" class="headerlink" title="5. 数据(记录)的增删改查curd"></a>5. 数据(记录)的增删改查curd</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">对数据表中数据的操作：增加、删除、修改和基本查询</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 新增</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> 表名(列<span class="number">1</span>,...) <span class="keyword">values</span>(值<span class="number">1</span>,...)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 删除</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 修改</span></span><br><span class="line">    <span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="number">1</span>=值<span class="number">1</span>,列<span class="number">2</span>=值<span class="number">2.</span>.. <span class="keyword">where</span> 条件;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 基本查询</span></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="二、高级查询"><a href="#二、高级查询" class="headerlink" title="二、高级查询"></a>二、高级查询</h3><h4 id="1-基本查询"><a href="#1-基本查询" class="headerlink" title="1.基本查询"></a>1.基本查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1. 查询所有字段、指定字段的数据</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> students;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 消除重复行命令distinct</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> gender <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. as给字段、表起别名</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> s.name <span class="keyword">as</span> <span class="string">'姓名'</span>,s.age <span class="keyword">as</span> <span class="string">'年龄'</span> <span class="keyword">from</span> students <span class="keyword">as</span> s;</span><br></pre></td></tr></table></figure><h4 id="2-条件查询"><a href="#2-条件查询" class="headerlink" title="2.条件查询"></a>2.条件查询</h4><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">where</span>后跟比较运算符、逻辑运算符</span><br><span class="line"></span><br><span class="line">    比较运算符：&gt;   &lt;   &gt;=  &lt;=  =   !=</span><br><span class="line">    逻辑运算符：<span class="keyword">and</span> <span class="keyword">or</span> <span class="keyword">not</span> </span><br><span class="line"></span><br><span class="line">    -- 优先级：<span class="keyword">not</span>&gt;<span class="keyword">and</span>&gt;<span class="keyword">or</span>，如果同时出现并希望先算<span class="keyword">or</span>，需要结合()使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 模糊查询<span class="keyword">like</span>和范围查询<span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">    name <span class="keyword">like</span> <span class="comment">'%杰'</span></span><br><span class="line">        % ： 代表任意个字符</span><br><span class="line">        _ : 代表一个字符</span><br><span class="line">    </span><br><span class="line">    id  <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 空判断<span class="keyword">is</span> null和非空判断<span class="keyword">is</span> <span class="keyword">not</span> null</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> height <span class="keyword">is</span> null;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span>  height <span class="keyword">is</span> <span class="keyword">not</span> null;</span><br></pre></td></tr></table></figure><h4 id="3-排序"><a href="#3-排序" class="headerlink" title="3. 排序"></a>3. 排序</h4><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">放在 <span class="keyword">from</span>、<span class="keyword">where</span>、<span class="keyword">group</span> <span class="keyword">by</span>之后</span><br><span class="line"></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> 列<span class="number">1</span> <span class="keyword">asc</span> ，列<span class="number">2</span> <span class="keyword">desc</span>；</span><br><span class="line">    <span class="keyword">desc</span>: 降序</span><br><span class="line">    <span class="keyword">asc</span>：升序，默认</span><br></pre></td></tr></table></figure><h4 id="4-聚合函数"><a href="#4-聚合函数" class="headerlink" title="4. 聚合函数"></a>4. 聚合函数</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">count</span><span class="params">(*)</span></span>\count(列)：总数 </span><br><span class="line"><span class="function"><span class="title">max</span><span class="params">(列)</span></span>: 最大值</span><br><span class="line"><span class="function"><span class="title">min</span><span class="params">(列)</span></span>: 最小值</span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">(列)</span></span>：求和</span><br><span class="line"><span class="function"><span class="title">avg</span><span class="params">(列)</span></span>：求平均</span><br></pre></td></tr></table></figure><blockquote><p>round(avg(price),2) : 四舍五入, 保留两位小数</p></blockquote><h4 id="5-分组查询"><a href="#5-分组查询" class="headerlink" title="5. 分组查询"></a>5. 分组查询</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">group by + group_concat(字段名)/聚合函数/having</span><br><span class="line"></span><br><span class="line">更精细化统计</span><br><span class="line">   <span class="built_in"> group </span>by： 分组</span><br><span class="line">    group_concat： 拼接字符串，拼接字段名</span><br><span class="line">    聚合函数： 最大，最小，平均，计数，求和</span><br><span class="line">    having： 对分组后的结果集进一步筛选</span><br><span class="line"></span><br><span class="line">注意1: </span><br><span class="line">    select 列中只能存放分组函数(比如聚合函数)，或是出现在group by子句中的分组标签</span><br><span class="line">    </span><br><span class="line">注意2：</span><br><span class="line">    where: 对源数据做条件筛选，不能接聚合函数</span><br><span class="line">    having: 是对分组之后的数据做进一步的筛选操作, 有having就一定有group by, 有<span class="built_in"> group </span>by 不一定有having，接聚合函数</span><br></pre></td></tr></table></figure><h4 id="6-分页查询"><a href="#6-分页查询" class="headerlink" title="6. 分页查询"></a>6. 分页查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">limit [<span class="keyword">start</span>],<span class="keyword">count</span> </span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span> 放在查询语句的最后</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">start</span>=(page<span class="number">-1</span>)*<span class="keyword">count</span></span><br></pre></td></tr></table></figure><h4 id="7-连接查询"><a href="#7-连接查询" class="headerlink" title="7. 连接查询"></a>7. 连接查询</h4><figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">inner <span class="built_in">join</span> <span class="keyword">on</span> : 内连接(结果仅包含符合连接条件的两表中的行)</span><br><span class="line"></span><br><span class="line"><span class="built_in">left</span> <span class="built_in">join</span> <span class="keyword">on</span> : 左连接(完全显示左表所有的行，如果左表中某行 在右表中没有匹配的行，则右表该行显示<span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">right</span> <span class="built_in">join</span> <span class="keyword">on</span> : 右连接(与左连接相反)</span><br></pre></td></tr></table></figure><h4 id="8-子查询"><a href="#8-子查询" class="headerlink" title="8. 子查询"></a>8. 子查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查询中嵌套查询：</span><br><span class="line">分为三种：</span><br><span class="line">    1.标量子查询: 子查询的结果为一个值(一行一列)</span><br><span class="line">    2.列子查询：  子查询的结果为一个列(一列多行)</span><br><span class="line">    3.表子查询:   子查询的结果为一个表(多行多列)</span><br><span class="line">    </span><br><span class="line">例子：</span><br><span class="line">    1. 查出高于平均身高的信息</span><br><span class="line">        1. (<span class="keyword">select</span> <span class="keyword">avg</span>(height) <span class="keyword">from</span> students) // 结果：<span class="number">172</span></span><br><span class="line">    <span class="number">2.</span> <span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> height&gt;(<span class="keyword">select</span> <span class="keyword">avg</span>(height) <span class="keyword">from</span> students);</span><br><span class="line">    </span><br><span class="line">2. 查出能够对应上班级号的学生信息</span><br><span class="line">    1. (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> classes)  // 结果：<span class="keyword">list</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> cls_id <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> classes);</span><br><span class="line">  </span><br><span class="line">3. 查询编号小于6的男性同学的姓名</span><br><span class="line">    1. (<span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span>&lt;<span class="number">6</span>) // 结果：一张表</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span>&lt;<span class="number">6</span>) <span class="keyword">as</span> s  <span class="keyword">where</span> gender=<span class="string">'男'</span>;</span><br></pre></td></tr></table></figure><h4 id="9-自关联查询"><a href="#9-自关联查询" class="headerlink" title="9. 自关联查询"></a>9. 自关联查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">通俗讲，就是自己关联自己,再通过内连接实现数据查询</span><br><span class="line"></span><br><span class="line">1. 向areas插入记录</span><br><span class="line">    source areas.sql;</span><br><span class="line">提示：areas.sql 文件要存放在 mysql 登录的目录中</span><br><span class="line"></span><br><span class="line">2. 查询广东省中的所有城市</span><br><span class="line">    第一种方式(两条sql语句)：</span><br><span class="line">        1. 查广东省的id</span><br><span class="line">        <span class="keyword">select</span> aid  <span class="keyword">from</span> areas <span class="keyword">where</span> atitle=<span class="string">'广东省'</span>; // 440000 </span><br><span class="line"></span><br><span class="line">        2. 再把省的id作为pid，查出对应的城市信息</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> areas <span class="keyword">where</span> pid=<span class="number">440000</span>;</span><br><span class="line"></span><br><span class="line">    第二种方式(子查询)：</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> areas <span class="keyword">where</span> pid=(<span class="keyword">select</span> aid <span class="keyword">from</span> areas <span class="keyword">where</span> atitle=<span class="string">'广东省'</span>);</span><br><span class="line"></span><br><span class="line">    第三种方式(自关联)： </span><br><span class="line">        <span class="keyword">select</span> city.* <span class="keyword">from</span> areas <span class="keyword">as</span> city <span class="keyword">inner</span> <span class="keyword">join</span> areas <span class="keyword">as</span> province <span class="keyword">on</span> city.pid=province.aid <span class="keyword">where</span> province.atitle=<span class="string">'广东省'</span>;</span><br></pre></td></tr></table></figure><h3 id="三、查询总结"><a href="#三、查询总结" class="headerlink" title="三、查询总结"></a>三、查询总结</h3><ul><li><strong>查询的完整格式 （^_^ 不要被吓到 其实很简单 ! _ !）</strong></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> select_expr [,select_expr,...] [      </span><br><span class="line">      <span class="keyword">FROM</span> tb_name</span><br><span class="line">      [<span class="keyword">WHERE</span> 条件判断]</span><br><span class="line">      [<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name | postion&#125; [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ...] </span><br><span class="line">      [<span class="keyword">HAVING</span> <span class="keyword">WHERE</span> 条件判断]</span><br><span class="line">      [<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name|expr|postion&#125; [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ...]</span><br><span class="line">      [ <span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,]rowcount | <span class="keyword">row_count</span> <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><strong>完整的select语句</strong></li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select distinct *</span><br><span class="line">    <span class="keyword">from</span> tb_name</span><br><span class="line">    where <span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">   <span class="built_in"> group </span>by <span class="built_in">..</span>. having <span class="built_in">..</span>.</span><br><span class="line">    order by <span class="built_in">..</span>.</span><br><span class="line">    limit start,count</span><br></pre></td></tr></table></figure><ul><li><strong>执行顺序</strong></li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tb_name</span><br><span class="line">    where <span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">   <span class="built_in"> group </span>by <span class="built_in">..</span>.</span><br><span class="line">    select distinct *</span><br><span class="line">    having <span class="built_in">..</span>.</span><br><span class="line">    order by <span class="built_in">..</span>.</span><br><span class="line">    limit start,count</span><br></pre></td></tr></table></figure><blockquote><p>实际使用中，只是语句中某些部分的组合，而不是全部</p></blockquote><h3 id="四、备份-还原"><a href="#四、备份-还原" class="headerlink" title="四、备份/还原"></a>四、备份/还原</h3><h5 id="1-备份"><a href="#1-备份" class="headerlink" title="1. 备份"></a>1. 备份</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>冷备份： 数据库停止再备份</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>热备份： 很多情况数据库运行时备份</span><br><span class="line"></span><br><span class="line"><span class="code">    逻辑备份，备份的是数据库相关的sql语句</span></span><br><span class="line"><span class="code">    适合中小型数据的备份</span></span><br><span class="line"></span><br><span class="line"><span class="code">    mysqldump –uroot –p 数据库名 &gt; python.sql;</span></span><br></pre></td></tr></table></figure><h5 id="2-还原"><a href="#2-还原" class="headerlink" title="2. 还原"></a>2. 还原</h5><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">1. 创建新数据库</span><br><span class="line"></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">database</span> 新数据库名 charset=utf8;</span><br><span class="line"></span><br><span class="line">2. 从sql文件中导入数据</span><br><span class="line"></span><br><span class="line">    mysql -uroot –p 新数据库名 &lt; python.sql</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用命令行启动、登录 MySQL 数据库；&lt;/li&gt;
&lt;li&gt;数据库、数据表和数据(记录)的增删查改；&lt;/li&gt;
&lt;li&gt;数据(记录)的高级查询；&lt;/li&gt;
&lt;li&gt;数据库的备份与恢复。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
      <category term="MySQL" scheme="http://jovelin.cn/categories/Python/MySQL/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="MySQL" scheme="http://jovelin.cn/tags/MySQL/"/>
    
      <category term="MySQL 命令" scheme="http://jovelin.cn/tags/MySQL-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 数据库(一)</title>
    <link href="http://jovelin.cn/2018/07/18/MySQL%20%E6%95%B0%E6%8D%AE%E5%BA%93(%E4%B8%80)/"/>
    <id>http://jovelin.cn/2018/07/18/MySQL 数据库(一)/</id>
    <published>2018-07-17T17:00:01.000Z</published>
    <updated>2018-07-28T02:04:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>关系型数据库 与 RDBMS；</li><li>SQL 和 MySQL 的介绍；</li><li>数据类型与约束。</li></ol></blockquote><a id="more"></a><h3 id="一、数据库介绍"><a href="#一、数据库介绍" class="headerlink" title="一、数据库介绍"></a>一、数据库介绍</h3><h4 id="1-数据存储"><a href="#1-数据存储" class="headerlink" title="1. 数据存储"></a>1. 数据存储</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据库是由一些特殊的文件组成，用来存储数据</span><br></pre></td></tr></table></figure><h4 id="2-数据库分类"><a href="#2-数据库分类" class="headerlink" title="2. 数据库分类"></a>2. 数据库分类</h4><ul><li>关系型数据库</li><li>非关系型数据库</li></ul><!-- more --><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 关系型数据库</span><br><span class="line"></span><br><span class="line">    建立在关系模型基础上的数据库，通俗讲这种数据库由多个表组成，表与表存在一定的关系</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>. 主要的几种关系型数据库</span><br><span class="line"></span><br><span class="line">    oracle：在大型项目中使用,银行,电信等项目</span><br><span class="line">    mysql：web时代使用最广泛的关系型数据库</span><br><span class="line">    <span class="keyword">ms</span> <span class="title">sql</span> server：在微软的项目中使用</span><br><span class="line">    sqlite：轻量级数据库，主要应用在移动平台</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 关系型数据库核心的元素</span><br><span class="line"></span><br><span class="line">    数据行（记录）</span><br><span class="line">    数据列（字段）</span><br><span class="line">    数据表（数据行的集合）</span><br><span class="line">    数据库（数据表的集合）</span><br><span class="line">    主键（特殊的字段，用来唯一标识记录的唯一性）</span><br></pre></td></tr></table></figure><h4 id="3-RDBMS"><a href="#3-RDBMS" class="headerlink" title="3. RDBMS"></a>3. RDBMS</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">1. RDBMS：Relational Database Management System</span><br><span class="line"></span><br><span class="line">    关系型数据库管理系统，用于管理数据库</span><br><span class="line"></span><br><span class="line">2. RDBMS 与关系型数据库的关系</span><br><span class="line">    </span><br><span class="line">    通过 RDBMS 实现对数据库的增删改查</span><br></pre></td></tr></table></figure><h4 id="4-SQL"><a href="#4-SQL" class="headerlink" title="4. SQL"></a>4. SQL</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL(Structured Query Language) 结构化查询语言，是一种用来操作RDBMS的数据库语言，当前关系型数据库都支持使用SQL语言进行操作，</span><br><span class="line">也就是说可以通过 SQL 操作 oracle,sql server,mysql,sqlite 等等所有的关系型的数据库。</span><br><span class="line"></span><br><span class="line">- DQL：数据查询语言，用于对数据进行查询，如<span class="keyword">select</span></span><br><span class="line">- DML：数据操作语言，对数据进行增加、修改、删除，如<span class="keyword">insert</span>、udpate、<span class="keyword">delete</span></span><br><span class="line">- <span class="keyword">DDL</span>：数据定义语言，进行数据库、表的管理等，如<span class="keyword">create</span>、<span class="keyword">drop</span></span><br><span class="line"></span><br><span class="line">- TPL：事务处理语言，对事务进行处理，包括<span class="keyword">begin</span> <span class="keyword">transaction</span>、<span class="keyword">commit</span>、<span class="keyword">rollback</span></span><br><span class="line">- DCL：数据控制语言，进行授权与权限回收，如<span class="keyword">grant</span>、<span class="keyword">revoke</span></span><br><span class="line">- CCL：指针控制语言，通过控制指针完成表的操作，如<span class="keyword">declare</span> <span class="keyword">cursor</span></span><br></pre></td></tr></table></figure><blockquote><p>提示： sql语句不区分大小写，每条sql语句后面加;    </p></blockquote><h4 id="5-MySQL"><a href="#5-MySQL" class="headerlink" title="5. MySQL"></a>5. MySQL</h4><ul><li>MySQL 官方网站：<a href="https://www.mysql.com/" target="_blank" rel="noopener">www.mysql.com</a></li></ul><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">MySQL 是一个关系型数据库管理系统，最早由瑞典 MySQL AB 公司开发，后来被Sun公司收购，</span><br><span class="line">Sun公司后来又被 <span class="keyword">Oracle </span>公司收购，目前属于 <span class="keyword">Oracle </span>旗下产品</span><br><span class="line"></span><br><span class="line">MySQL 对跨平台支持性好，提供了多种主流语言调用的API</span><br><span class="line"></span><br><span class="line">MySQL 市场占有率高，且开源，免费，是中小型项目首选的关系型数据库系统</span><br></pre></td></tr></table></figure><h4 id="6-数据库引擎"><a href="#6-数据库引擎" class="headerlink" title="6. 数据库引擎"></a>6. 数据库引擎</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InnoDB，MyISAM 数据库引擎</span><br><span class="line"></span><br><span class="line">mysql 创建表时，默认是InnoDB引擎</span><br><span class="line"></span><br><span class="line">两种类型有什么区别：</span><br><span class="line">MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。 </span><br><span class="line">MyISAM类型的表强调的是性能，其执行速度比InnoDB类型更快，但是不提供事务等高级特性，而InnoDB提供事务支持,行级锁，高并发。</span><br><span class="line">一般开发中默认使用的是innodb引擎</span><br></pre></td></tr></table></figure><p><br></p><h3 id="二、数据类型与约束"><a href="#二、数据类型与约束" class="headerlink" title="二、数据类型与约束"></a>二、数据类型与约束</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 数据类型：</span><br><span class="line">   使用数据类型的原则是：够用就行，尽量使用取值范围小的，而不用大的，这样可以更多的节省存储空间</span><br><span class="line"></span><br><span class="line">   <span class="number">1.</span> int： 整形</span><br><span class="line"><span class="number">2.</span> bit：位（<span class="number">0</span> | <span class="number">1</span>）</span><br><span class="line"><span class="number">2.</span> decimal： 浮点数  # dicemal(<span class="number">5</span>,<span class="number">2</span>) # 总位数<span class="number">5</span>位，小数位<span class="number">2</span>位</span><br><span class="line"><span class="number">3.</span> varchar： 可变字符类型 # 可节省存储空间</span><br><span class="line"><span class="number">4.</span> enum： 枚举类型 # gender enum(<span class="string">"男"</span>,<span class="string">"女"</span>) 注意：有中文时，数据库编码必须支持中文（utf<span class="number">-8</span> 可以，latin1 不行）</span><br><span class="line"><span class="number">5.</span> datetime： 日期时间类型</span><br><span class="line"><span class="number">6.</span> tinyint： 非贪婪整形</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 数据约束：</span><br><span class="line"><span class="number">1.</span> 主键： primary <span class="type">key</span>(id)</span><br><span class="line"><span class="number">2.</span> 自增： auto_increment</span><br><span class="line"><span class="number">2.</span> 非空： not null</span><br><span class="line"><span class="number">3.</span> 唯一值： unique</span><br><span class="line"><span class="number">4.</span> 缺省值： <span class="section">default</span></span><br><span class="line"><span class="number">5.</span> 外键： foreign <span class="type">key</span> </span><br><span class="line"><span class="number">6.</span> 无符号： unsigned</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关系型数据库 与 RDBMS；&lt;/li&gt;
&lt;li&gt;SQL 和 MySQL 的介绍；&lt;/li&gt;
&lt;li&gt;数据类型与约束。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
      <category term="MySQL" scheme="http://jovelin.cn/categories/Python/MySQL/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="MySQL" scheme="http://jovelin.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Python HTTP 协议与 web 静态服务器</title>
    <link href="http://jovelin.cn/2018/07/15/Python%20HTTP%20%E5%8D%8F%E8%AE%AE%E4%B8%8E%20web%20%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://jovelin.cn/2018/07/15/Python HTTP 协议与 web 静态服务器/</id>
    <published>2018-07-15T12:08:35.000Z</published>
    <updated>2018-07-28T02:31:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>浏览器请求的基本流程；</li><li>浏览器请求的 URL；</li><li>请求报文格式；</li><li>响应报文格式；</li><li>网络响应状态码；</li><li>长连接和短连接。</li></ol></blockquote><a id="more"></a><h1 id="HTTP-超文本传输协议"><a href="#HTTP-超文本传输协议" class="headerlink" title="HTTP 超文本传输协议"></a>HTTP 超文本传输协议</h1><p><strong>超文本传输协议（HyperText Transfer Protocol）是一种应用层协议。</strong></p><p>HTTP是万维网的数据通信的基础。设计HTTP最初的目的是为了提供一种发布和接收HTML页面&lt;网页&gt;的方法。</p><ul><li>1989年蒂姆·伯纳斯-李在CERN研发</li><li>1999年公布现今广泛使用的HTTP 1.1版(RFC2616)</li></ul><h3 id="一、浏览器请求的基本流程"><a href="#一、浏览器请求的基本流程" class="headerlink" title="一、浏览器请求的基本流程"></a>一、浏览器请求的基本流程</h3><p><img src="https://upload-images.jianshu.io/upload_images/3365001-07b4a469d55b38bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="mini-web服务器工作流程"></p><h3 id="二、浏览器请求的-URL"><a href="#二、浏览器请求的-URL" class="headerlink" title="二、浏览器请求的 URL"></a>二、浏览器请求的 URL</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> www.baidu.com: 网站(网址)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   url(统一资源定位符):</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   完整版: http://www.baidu.com:80/aaa/bbb/index.html?username=aaa&amp;password=123</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       http/https: https是http加密后进行传输;(https收费...)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       端口: http: 80;    https: 443;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       /aaa/bbb/index.html: 请求的资源路径;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       username=aaa&amp;password=123: 传输的内容;(请求体...GET)</span></span><br></pre></td></tr></table></figure><h3 id="三、请求报文格式总结"><a href="#三、请求报文格式总结" class="headerlink" title="三、请求报文格式总结"></a>三、请求报文格式总结</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 总结: 请求报文格式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.请求行;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     GET / HTTP/1.1\r\n</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.请求头;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     头属性: 属性值\r\n</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     Host: www.baidu.com\r\n</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.空行;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     \r\n</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.请求体;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     username=jovelin&amp;password=123456</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 请求报文格式分析:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.请求行(request line)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   格式: 请求方式 资源路径 协议及版本号\r\n</span></span><br><span class="line">GET / HTTP/1.1\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">   GET: 常用请求方式GET/POST;   (GET/POST/PUT/DELETE...)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       GET:  获取(从服务器获取信息的时候用...)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       POST: 发送(向服务器存储信息的时候用...)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   /: /aaa/bbb/index.html; 想要访问的页面/图片/音频...(明天要用...)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   HTTP/1.1: 协议及版本号</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   空行: \r\n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.请求头(request header)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   格式: 头属性: 头信息\r\n</span></span><br><span class="line">Host: www.baidu.com\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">       Host: 主机;(记住...)</span></span><br><span class="line">Connection: keep-alive\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">       Connection: 链接;(长连接)</span></span><br><span class="line">Upgrade-Insecure-Requests: 1\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">       提示服务端我可以解析https;</span></span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">       User-Agent: 用户代理;(浏览器及系统版本...)</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">       Accept: 接收!</span></span><br><span class="line">Accept-Encoding: gzip, deflate, br\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">       压缩: 数据压缩算法;</span></span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">       语言: 中文;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.空行;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     \r\n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.请求体;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     username=jovelin&amp;password=123456</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3365001-28c36634d5de588c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="请求报文格式总结"></p><h3 id="四、响应报文格式总结"><a href="#四、响应报文格式总结" class="headerlink" title="四、响应报文格式总结"></a>四、响应报文格式总结</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 总结: 响应报文格式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.响应行;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   HTTP/1.1 200 OK\r\n</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.响应头;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   头属性: 头信息\r\n</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Server: BWS/1.1\r\n</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.换行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   \r\n</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.响应体;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   文本/图片/音频/视频/网页...</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 响应报文格式分析:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.响应行(response line)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   格式: 协议及版本号 状态码 英文解释\r\n</span></span><br><span class="line">HTTP/1.1 200 OK\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">       HTTP/1.1: 协议及版本号</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       200 OK: 状态码 英文解释</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.响应头(response header)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   格式: 头属性: 属性值\r\n</span></span><br><span class="line">Connection: Keep-Alive\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">   长连接</span></span><br><span class="line">Content-Encoding: gzip\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">   压缩格式</span></span><br><span class="line">Content-Type: text/html; charset=utf-8\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">   请求体的文本类型;</span></span><br><span class="line">Date: Wed, 14 Mar 2018 09:52:48 GMT\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">   更新时间</span></span><br><span class="line">Server: BWS/1.1\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash">   服务器名:(记住,因为简单,以后用)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.空行;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     \r\n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.响应体(response body)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     文本/图片/音频/视频/网页...</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3365001-31f7768dcb76551e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="响应报文格式总结"></p><h3 id="五、网络响应状态码"><a href="#五、网络响应状态码" class="headerlink" title="五、网络响应状态码"></a>五、网络响应状态码</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>xx 成功  <span class="number">200</span> OK  （发送成功）</span><br><span class="line"><span class="number">3</span>xx 重定向 </span><br><span class="line"><span class="number">302</span> Moved Temporarily/<span class="number">302</span> Found   解释作用(暂时跳转)  <span class="number">301</span>/<span class="number">2</span>/<span class="number">3</span>/<span class="number">4</span>/<span class="number">7</span></span><br><span class="line"><span class="number">307</span> Internal Redirect（内部重定向）</span><br><span class="line"><span class="symbol">Location:</span> https:<span class="comment">//www.baidu.com</span></span><br><span class="line"><span class="number">4</span>xx 客户端错误 <span class="number">404</span> Not Found（客户端发送的页面没找打）</span><br><span class="line"><span class="symbol">http:</span><span class="comment">//help.xunlei.com/online/stat_inst.php?pid=0000&amp;thunderver=5.8.14.706&amp;thundertype=4&amp;peerid=000C294E4AE1J3J4</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//video.baomihua.com/play_error/-30001</span></span><br><span class="line"><span class="number">5</span>xx 服务器错误 <span class="number">503</span> Service Unavailable（服务器不能使用）</span><br></pre></td></tr></table></figure><h3 id="六、长连接和短连接"><a href="#六、长连接和短连接" class="headerlink" title="六、长连接和短连接"></a>六、长连接和短连接</h3><p><br></p><p><strong>TCP长/短连接 好比 地铁卡/单程票</strong></p><p><br></p><p>在HTTP/1.0中, 默认使用的是短连接.也就是说, 浏览器和服务器每进行一次HTTP操作, 就建立一次连接, 但任务结束就中断连接.如果客户端浏览器访问的某个HTML或其他类型的 Web 页中包含有其他的Web资源，如js文件、图像文件、CSS文件等；当浏览器每遇到这样一个Web资源，就会建立一个HTTP会话。</p><p>但从 HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头有加入这行代码:</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Connection</span>:<span class="meta">keep</span>-alive</span><br></pre></td></tr></table></figure><p>在真正的读写操作之前，server与client之间必须建立一个连接，</p><p>当读写操作完成后，双方不再需要这个连接时它们可以释放这个连接，</p><p>连接的建立通过三次握手，释放则需要四次握手，</p><p>所以说每个连接的建立都是需要资源消耗和时间消耗的。</p><h4 id="TCP-短连接"><a href="#TCP-短连接" class="headerlink" title="TCP 短连接"></a>TCP 短连接</h4><p><strong>短连接一般只会在 client/server 间传递一次读写操作！</strong></p><ol><li>client 向 server 发起连接请求</li><li>server 接到请求，双方建立连接</li><li>client 向 server 发送消息</li><li>server 回应 client</li><li>一次读写完成，此时双方任何一个都可以发起 close 操作 (一般都是 client 先发起 close 操作。当然也不排除有特殊的情况。)</li></ol><h4 id="TCP-长连接"><a href="#TCP-长连接" class="headerlink" title="TCP 长连接"></a>TCP 长连接</h4><ol><li>client 向 server 发起连接</li><li>server 接到请求，双方建立连接</li><li>client 向 server 发送消息</li><li>server 回应 client</li><li>一次读写完成，连接不关闭</li><li>后续读写操作…</li><li>长时间操作之后 client 发起关闭请求</li></ol><h4 id="TCP长-短连接的优点和缺点"><a href="#TCP长-短连接的优点和缺点" class="headerlink" title="TCP长/短连接的优点和缺点"></a>TCP长/短连接的优点和缺点</h4><p>长连接可以省去较多的TCP建立和关闭的操作，节约时间。但是如果用户量太大容易造成服务器负载过高最终导致服务不可用。</p><p>短连接对于服务器来说实现起来较为简单，存在的连接都是有用的连接，不需要额外的控制手段。但是如果用户访问量很大, 往往可能在很短时间内需要创建大量的连接，造成服务器响应速度过慢。</p><p><strong>总之：</strong></p><p>小的WEB网站的http服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源来让套接字 保持存活-keep alive，</p><p>对于中大型WEB网站一般都采用长连接，好处是响应用户请求的时间更短，用户体验更好，虽然更耗硬件资源一些，但这都不是事儿。另外，数据库的连接用长连接，如果用短连接频繁的通信会造成socket错误。</p><h3 id="七、案例"><a href="#七、案例" class="headerlink" title="七、案例"></a>七、案例</h3><p>1.模拟服务器(服务端)</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 需求: 获取请求报文的格式;</span></span><br><span class="line"></span><br><span class="line">import <span class="built_in">socket</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tcp_socket = <span class="built_in">socket</span>.<span class="built_in">socket</span>(<span class="built_in">socket</span>.AF_INET, <span class="built_in">socket</span>.SOCK_STREAM)</span><br><span class="line">    tcp_socket.setsockopt(<span class="built_in">socket</span>.SOL_SOCKET, <span class="built_in">socket</span>.SO_REUSEADDR, True)</span><br><span class="line">    tcp_socket.bind((<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>))</span><br><span class="line">    tcp_socket.listen(<span class="number">128</span>)</span><br><span class="line">    print(<span class="string">"服务已开启..."</span>)</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        service_client_socket, ip_port = tcp_socket.accept()</span><br><span class="line">        print(ip_port, <span class="string">"已连接..."</span>)</span><br><span class="line">        data_bin = service_client_socket.recv(<span class="number">5000</span>)</span><br><span class="line">        print(<span class="string">"二进制数据："</span>, data_bin)</span><br><span class="line">        print(<span class="string">"解析后数据："</span>, data_bin.decode())</span><br><span class="line">        service_client_socket.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p>2.模拟浏览器(客户端)</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 需求: 获取响应报文的格式内容并保存;</span></span><br><span class="line"></span><br><span class="line">import <span class="built_in">socket</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建TCP连接</span></span><br><span class="line">    tcp_socket = <span class="built_in">socket</span>.<span class="built_in">socket</span>(<span class="built_in">socket</span>.AF_INET, <span class="built_in">socket</span>.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># DNS解析 和 连接HTTP服务器</span></span><br><span class="line">    tcp_socket.connect((<span class="string">"www.baidu.com"</span>, <span class="number">80</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组包 发送HTTP请求报文</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求行</span></span><br><span class="line">    request_line = <span class="string">"GET / HTTP/1.1\r\n"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求头</span></span><br><span class="line">    request_header = <span class="string">"Host: www.baidu.com\r\n"</span></span><br><span class="line">    request_data = request_line + request_header + <span class="string">"\r\n"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送请求</span></span><br><span class="line">    tcp_socket.<span class="built_in">send</span>(request_data.encode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收响应报文</span></span><br><span class="line">    response_data = tcp_socket.recv(<span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对响应报文进行解析 -- 切割</span></span><br><span class="line">    response_str_data = response_data.decode()</span><br><span class="line">    <span class="comment"># print(response_data)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># '\r\n\r\n'之后的数据就是响应体数据</span></span><br><span class="line">    index = response_str_data.find(<span class="string">"\r\n\r\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 切割出的数据就是文件数据</span></span><br><span class="line">    html_data = response_str_data[index + <span class="number">4</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data_file = open("index.html", "wb")</span></span><br><span class="line">    <span class="comment"># data_file.write(html_data.encode())</span></span><br><span class="line">    <span class="comment"># data_file.close()</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"index.html"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> <span class="built_in">file</span>:</span><br><span class="line">        <span class="built_in">file</span>.<span class="built_in">write</span>(html_data.encode())</span><br><span class="line">        <span class="comment"># 如果是长连接,还有很多内容没有收到,需要死循环接收</span></span><br><span class="line">        <span class="keyword">while</span> True:</span><br><span class="line">            <span class="comment"># 后面在获取到的响应内容,就不包含响应行和响应头了</span></span><br><span class="line">            data_bin = tcp_socket.recv(<span class="number">4096</span>)</span><br><span class="line">            <span class="keyword">if</span> data_bin:</span><br><span class="line">                <span class="built_in">file</span>.<span class="built_in">write</span>(data_bin)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    tcp_socket.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><ol start="3"><li>web 静态服务器</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebServer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Web 服务器类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ip, port)</span>:</span></span><br><span class="line">        <span class="comment"># 创建套接字</span></span><br><span class="line">        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment"># 设置套接字复用地址</span></span><br><span class="line">        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 绑定IP地址和端口</span></span><br><span class="line">        self.socket.bind((ip, port))</span><br><span class="line">        <span class="comment"># 设置被动套接字</span></span><br><span class="line">        self.socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startup</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""等待客户端连接"""</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 等待被连接</span></span><br><span class="line">            service_client_socket, ip_port = self.socket.accept()</span><br><span class="line">            print(ip_port, <span class="string">"连接成功."</span>, end=<span class="string">"\n\n"</span>)</span><br><span class="line">            <span class="comment"># 处理请求</span></span><br><span class="line">            gevent.spawn(self.client_handler, service_client_socket)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">client_handler</span><span class="params">(self, service_client_socket)</span>:</span></span><br><span class="line">        <span class="string">"""处理客户端请求"""</span></span><br><span class="line">        request_data_bin = service_client_socket.recv(<span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request_data_bin:</span><br><span class="line">            print(<span class="string">'客户端已经断开连接.'</span>, end=<span class="string">"\n\n"</span>)</span><br><span class="line">            service_client_socket.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"客户端请求报文："</span>, request_data_bin, end=<span class="string">"\n\n"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解析 HTTP 文本</span></span><br><span class="line">        my_http = self.parse_http(request_data_bin.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取固定页面数据</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response_line = <span class="string">'HTTP/1.1 200 OK\r\n'</span></span><br><span class="line">            response_header = <span class="string">'Server: PythonWebServer1.0\r\n'</span></span><br><span class="line">            file = open(<span class="string">'./static'</span> + my_http[<span class="string">'url'</span>], <span class="string">'rb'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            response_line = <span class="string">'HTTP/1.1 404 NOT FOUND\r\n'</span></span><br><span class="line">            response_header = <span class="string">'Server: PythonWebServer1.0\r\n'</span></span><br><span class="line">            file = open(<span class="string">'./static/404.html'</span>, <span class="string">'rb'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取文件内容</span></span><br><span class="line">        response_content = file.read()</span><br><span class="line">        file.close()</span><br><span class="line">        <span class="comment"># 拼接响应报文</span></span><br><span class="line">        response_data = (response_line + response_header + <span class="string">'\r\n'</span>).encode(<span class="string">'utf-8'</span>) + response_content</span><br><span class="line">        <span class="comment"># 发送响应报文</span></span><br><span class="line">        service_client_socket.send(response_data)</span><br><span class="line">        <span class="comment"># 关闭套接字</span></span><br><span class="line">        service_client_socket.close()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"\n"</span>, <span class="string">"-"</span> * <span class="number">100</span>, <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_http</span><span class="params">(request_data)</span>:</span></span><br><span class="line">        <span class="string">"""解析 HTTP 文本"""</span></span><br><span class="line"></span><br><span class="line">        my_http = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分成多行</span></span><br><span class="line">        request_headers = request_data.split(<span class="string">'\r\n'</span>)</span><br><span class="line">        request_lines = request_headers[<span class="number">0</span>].split(<span class="string">' '</span>)</span><br><span class="line">        print(<span class="string">"request_lines: "</span>, request_lines, end=<span class="string">"\n\n"</span>)</span><br><span class="line"></span><br><span class="line">        my_http[<span class="string">'method'</span>] = request_lines[<span class="number">0</span>]</span><br><span class="line">        my_http[<span class="string">'url'</span>] = request_lines[<span class="number">1</span>]</span><br><span class="line">        my_http[<span class="string">'version'</span>] = request_lines[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 未指定页面时 默认访问 index.html</span></span><br><span class="line">        <span class="keyword">if</span> my_http[<span class="string">'url'</span>] == <span class="string">"/"</span>:</span><br><span class="line">            my_http[<span class="string">'url'</span>] = <span class="string">"/index.html"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> header <span class="keyword">in</span> request_headers[<span class="number">1</span>:]:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> header:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Host: www.baidu.com</span></span><br><span class="line">            lines = header.split(<span class="string">':'</span>)</span><br><span class="line">            my_http[lines[<span class="number">0</span>]] = lines[<span class="number">1</span>][<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"my_http: "</span>, my_http, end=<span class="string">"\n\n"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> my_http</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">port_handler</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""指定端口"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 默认设置端口为 8888</span></span><br><span class="line">    port = <span class="number">8888</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 获取外部传递过来的参数;</span></span><br><span class="line">    <span class="comment"># # 1.尽量值传递一个参数过来</span></span><br><span class="line">    <span class="comment"># #   ctrl+z: 退出页面,但是程序没有退出;(该端口还可以使用)</span></span><br><span class="line">    <span class="comment"># #   ctrl+c: 退出页面,也退出程序;</span></span><br><span class="line">    <span class="comment"># # print(sys.argv[1])</span></span><br><span class="line">    <span class="comment"># if not len(sys.argv) == 2:</span></span><br><span class="line">    <span class="comment">#     print('输入的格式错误,正确的格式应该是: python3 文件名.py 端口号')</span></span><br><span class="line">    <span class="comment">#     return</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># # 2.如果传递过来端口号,里面有非数字;(也不行)</span></span><br><span class="line">    <span class="comment"># if not sys.argv[1].isdigit():</span></span><br><span class="line">    <span class="comment">#     print('端口号, 必须是整数!!!')</span></span><br><span class="line">    <span class="comment">#     return</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># # 3.取值范围: [0-65535]</span></span><br><span class="line">    <span class="comment"># if not 0 &lt;= int(sys.argv[1]) &lt;= 65535:</span></span><br><span class="line">    <span class="comment">#     print('端口号必须在: [0-65535]之间!!!')</span></span><br><span class="line">    <span class="comment">#     return</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># # 4.如果全部通过,那么要把端口号,传递到程序中</span></span><br><span class="line">    <span class="comment"># # 获取用户指定的绑定端口</span></span><br><span class="line">    <span class="comment"># port = int(sys.argv[1])</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 服务器 IP，默认为本机 IP</span></span><br><span class="line">    server_ip = <span class="string">""</span></span><br><span class="line">    <span class="comment"># 服务器 端口</span></span><br><span class="line">    server_port = port_handler()</span><br><span class="line">    web_server = WebServer(server_ip, server_port)</span><br><span class="line">    web_server.startup()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器请求的基本流程；&lt;/li&gt;
&lt;li&gt;浏览器请求的 URL；&lt;/li&gt;
&lt;li&gt;请求报文格式；&lt;/li&gt;
&lt;li&gt;响应报文格式；&lt;/li&gt;
&lt;li&gt;网络响应状态码；&lt;/li&gt;
&lt;li&gt;长连接和短连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="HTTP" scheme="http://jovelin.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Python 中 exit() 的用法</title>
    <link href="http://jovelin.cn/2018/07/15/Python%20%E4%B8%AD%20exit()%20%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://jovelin.cn/2018/07/15/Python 中 exit() 的用法/</id>
    <published>2018-07-14T16:22:31.000Z</published>
    <updated>2018-07-28T02:03:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Python 中 exit() 的用法总结</strong>：</p><ol><li><p><strong>sys.exit(n)  退出程序引发 SystemExit 异常，可以捕获异常执行些清理工作</strong>。</p><p> n 默认值为 0，表示正常退出，其他都是非正常退出。还可以 sys.exit(“sorry, goodbye!”);</p><p> 一般 <strong>主程序中</strong> 使用此退出。</p></li></ol><a id="more"></a><ol><li><p><strong>os._exit(n)，直接退出，不抛异常， 不执行相关清理工作</strong>。</p><p> 常用在 <strong>子进程</strong> 的退出。</p></li><li><p><strong>exit()/quit()，跑出 SystemExit 异常</strong>。</p><p> 一般在 <strong>交互式 shell 中</strong> 退出时使用。</p></li><li><p><strong>exit(0) 有什么功能</strong>？</p><p> 在很多类型的操作系统里，exit(0) 可以中断某个程序，而其中的数字参数则用来表示程序是否是碰到错误而中断。</p><p> exit(1) 表示发生了错误，而 exit(0) 则表示程序是正常退出的。</p><p> 这和我们学的布尔逻辑  0==False 正好相反，不过你可以用不一样的数字表示不同的错误结果。</p><p> 比如你可以用 exit(100) 来表示另一种和 exit(2) 或 exit(1) 不同的错误。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Python 中 exit() 的用法总结&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;sys.exit(n)  退出程序引发 SystemExit 异常，可以捕获异常执行些清理工作&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt; n 默认值为 0，表示正常退出，其他都是非正常退出。还可以 sys.exit(“sorry, goodbye!”);&lt;/p&gt;
&lt;p&gt; 一般 &lt;strong&gt;主程序中&lt;/strong&gt; 使用此退出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="exit 方法" scheme="http://jovelin.cn/tags/exit-%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python 正则表达式</title>
    <link href="http://jovelin.cn/2018/07/12/Python%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://jovelin.cn/2018/07/12/Python 正则表达式/</id>
    <published>2018-07-12T07:21:00.000Z</published>
    <updated>2018-07-28T02:36:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>定义；</li><li>常用的元字符；</li><li>常用的限定符（量词）；</li><li>分组；</li><li>正则高级 API（4个）；</li><li>r 的作用；</li><li>贪婪/非贪婪。</li></ol></blockquote><a id="more"></a><h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。</p><p><strong>简而言之：正则表达式就是记录文本规则的代码。</strong></p><!-- more --><p>特点: </p><p>操作字符串</p><p>1.更快的方式操作字符串；(表单校验，数据匹配…)</p><p>2.普通字符串操作无法做到的，或者很难做的正则很容易搞定！！！</p><p>使用场景：</p><p>1.表单校验</p><p>2.api 里面也需要正则</p><p><strong>正则表达式代码体验</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 解释器为我们提供了一个使用正则的模块，这个模块叫做re(regex)</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 1.match()：匹配 -&gt; object</span></span><br><span class="line">    <span class="comment"># group()：通过匹配后，可以使用group()获取内容</span></span><br><span class="line">    obj = re.match(<span class="string">r"jovelin"</span>, <span class="string">"jovelin"</span>)</span><br><span class="line">    print(obj.group())  <span class="comment"># -&gt; jovelin</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.如果被匹配的内容多余正则；(只返回开头匹配的部分)</span></span><br><span class="line">    obj = re.match(<span class="string">r"jovelin"</span>, <span class="string">"jovelin.cn"</span>)</span><br><span class="line">    print(obj.group())  <span class="comment"># -&gt; jovelin</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.如果开头部分，没有匹配的内容； 那么返回None</span></span><br><span class="line">    obj = re.match(<span class="string">r"jovelin"</span>, <span class="string">"www.jovelin.cn"</span>)</span><br><span class="line">    print(obj)  <span class="comment"># -&gt; None</span></span><br><span class="line"></span><br><span class="line">    print(<span class="keyword">None</span>, type(<span class="keyword">None</span>))  <span class="comment"># -&gt; None &lt;class 'NoneType'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、常用的元字符"><a href="#二、常用的元字符" class="headerlink" title="二、常用的元字符"></a>二、常用的元字符</h3><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:left">匹配除换行符(\n)以外的任意字符</td></tr><tr><td style="text-align:center">[]</td><td style="text-align:left">匹配 [ ] 中列举的字符</td></tr><tr><td style="text-align:center">\w 与 \W</td><td style="text-align:left">匹配字母或数字或下划线或汉字(单词) / 反义(非单词)</td></tr><tr><td style="text-align:center">\s 与 \S</td><td style="text-align:left">匹配任意的空白符 / 反义(非空白)</td></tr><tr><td style="text-align:center">\d 与 \D</td><td style="text-align:left">匹配数字 [0-9] / 反义(非数字)</td></tr><tr><td style="text-align:center">\b 与 \B</td><td style="text-align:left">匹配单词的开始或结束 / 反义</td></tr><tr><td style="text-align:center">^</td><td style="text-align:left">匹配字符串的开始</td></tr><tr><td style="text-align:center">$</td><td style="text-align:left">匹配字符串的结束</td></tr></tbody></table><p><strong>代码演示：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># . 匹配任意1个字符（除了 \n）</span></span><br><span class="line">print(re.match(<span class="string">r'a.b'</span>, <span class="string">'a\nb'</span>))  <span class="comment"># -&gt; None</span></span><br><span class="line"><span class="comment">#  - 在 [] 里代表范围</span></span><br><span class="line">print(re.match(<span class="string">r'a[a-c]c'</span>, <span class="string">'abc'</span>).group())  <span class="comment"># -&gt; abc</span></span><br><span class="line"><span class="comment"># 在 [] 里面也想使用 - 那么需要 \ 转义</span></span><br><span class="line">print(re.match(<span class="string">r'a[a\-c]c'</span>, <span class="string">'a-c'</span>).group())  <span class="comment"># -&gt; a-c</span></span><br><span class="line"><span class="comment"># \b用法 与 ^ $ 相似，不过 \b 只匹配单词，\B 只匹配非单词</span></span><br><span class="line">print(re.match(<span class="string">r"\b\w+\b"</span>, <span class="string">"0_9_a_z_A_Z汉字"</span>).group())  <span class="comment"># -&gt; 0_9_a_z_A_Z</span></span><br><span class="line">print(re.match(<span class="string">r"\B\W+\B"</span>, <span class="string">"!@#$%^&amp;*"</span>).group())  <span class="comment"># -&gt; !@#$%^&amp;*</span></span><br><span class="line"><span class="comment"># ^匹配字符串开头</span></span><br><span class="line"><span class="comment"># $匹配字符串结尾</span></span><br><span class="line">print(re.match(<span class="string">r'[\w\W]*$'</span>, <span class="string">'0_9_a_z_A_Z汉字!@#$%^&amp;* \n\t'</span>).group())  <span class="comment"># -&gt; 0_9_a_z_A_Z汉字!@#$%^&amp;* </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: ^ 如果出现在 [] 中，代表的是取反!   (想要使用 ^,可以转义 \)</span></span><br><span class="line">print(re.match(<span class="string">r'^[\^]$'</span>, <span class="string">'^'</span>).group())  <span class="comment"># -&gt; ^</span></span><br><span class="line">print(re.match(<span class="string">r'^[^^]$'</span>, <span class="string">'^'</span>))  <span class="comment"># -&gt; None</span></span><br><span class="line">print(re.match(<span class="string">r'^[^47]$'</span>, <span class="string">'47'</span>))  <span class="comment"># -&gt; 47</span></span><br></pre></td></tr></table></figure><h3 id="三、常用的限定符（量词）"><a href="#三、常用的限定符（量词）" class="headerlink" title="三、常用的限定符（量词）"></a>三、常用的限定符（量词）</h3><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:left">说明</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:left">重复零次或更多次</td><td style="text-align:left">&gt;=0</td></tr><tr><td style="text-align:center">+</td><td style="text-align:left">重复一次或更多次</td><td style="text-align:left">&gt;=1</td></tr><tr><td style="text-align:center">?</td><td style="text-align:left">重复零次或一次</td><td style="text-align:left">0 or 1</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:left">重复n次</td><td style="text-align:left">==n</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:left">重复n次或更多次</td><td style="text-align:left">&gt;=n</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:left">重复n到m次</td><td style="text-align:left">n&lt;=X&lt;=m</td></tr></tbody></table><p><strong>代码演示：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># * 匹配前一个字符出现0次或者无限次，即可有可无 (&gt;=0)</span></span><br><span class="line">print(re.match(<span class="string">r'a*b'</span>, <span class="string">'b'</span>).group())  <span class="comment"># -&gt; b</span></span><br><span class="line"><span class="comment"># + 匹配前一个字符出现1次或者无限次，即至少有1次 (&gt;=1)</span></span><br><span class="line">print(re.match(<span class="string">r'a+b'</span>, <span class="string">'b'</span>))  <span class="comment"># -&gt; None，必须要 1 个 a</span></span><br><span class="line"><span class="comment"># &#123;n&#125; 匹配前一个字符出现n次 == n                           (== n)</span></span><br><span class="line">print(re.match(<span class="string">r'a&#123;2&#125;b'</span>, <span class="string">'ab'</span>))  <span class="comment"># -&gt; None，必须要 2 个 a</span></span><br><span class="line"><span class="comment"># &#123;n,m&#125; 匹配前一个字符出现: n次&lt;= 前一个字符 &lt;=m次 (n&lt;=X&lt;=m)</span></span><br><span class="line">print(re.match(<span class="string">r'a&#123;2,5&#125;b'</span>, <span class="string">'ab'</span>))  <span class="comment"># -&gt; None，a 的次数必须是 2&lt;=a&lt;=5</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>案例</strong>：</p><p>1.校验手机号</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isMobileNumber</span><span class="params">(tel)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    校验手机号是否正确</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r"^[1-][34578-]\d&#123;9&#125;$"</span>, tel) <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(isMobileNumber(<span class="string">"18819950820"</span>))</span><br></pre></td></tr></table></figure><p>2.校验邮箱</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">邮箱名称部分为： [a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)&#123;0,4&#125;</span></span><br><span class="line"><span class="string">域名部分： [a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+</span></span><br><span class="line"><span class="string">连起来 ^[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)&#123;0,4&#125;@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)&#123;1,2&#125;$</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isEmail</span><span class="params">(email)</span>:</span></span><br><span class="line">    <span class="string">"""校验邮箱是否正确"""</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r"^[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)&#123;0,4&#125;@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)&#123;1,2&#125;$"</span>, email) <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(isEmail(<span class="string">"jovelin@163.com"</span>))</span><br><span class="line">print(isEmail(<span class="string">"jovelin.dev@gmail.com"</span>))</span><br><span class="line">print(isEmail(<span class="string">"jovelin@163.com.cn"</span>))</span><br><span class="line">print(isEmail(<span class="string">"jovelin.dev@gmail.com.cn"</span>))</span><br></pre></td></tr></table></figure><h3 id="四、分组"><a href="#四、分组" class="headerlink" title="四、分组"></a>四、分组</h3><p>用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作。</p><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">(abc)</td><td style="text-align:left">将括号中字符作为一个分组</td></tr><tr><td style="text-align:center">竖线</td><td style="text-align:left">匹配左右任意一个表达式</td></tr><tr><td style="text-align:center">\num</td><td style="text-align:left">引用分组num匹配到的字符串</td></tr><tr><td style="text-align:center">(?P<name>)</name></td><td style="text-align:left">分组起别名</td></tr><tr><td style="text-align:center">(?P=name)</td><td style="text-align:left">引用别名为name分组匹配到的字符串</td></tr></tbody></table><p>代码演示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (abc) 将括号中字符作为一个分组</span></span><br><span class="line">print(re.match(<span class="string">r'(aaa)bbb(ccc)'</span>, <span class="string">'aaabbbccc'</span>).group())</span><br><span class="line"><span class="comment"># 一个括号就是一个分组； group()：参数代表分组的编号；写 0 或者不写时，获取全部；</span></span><br><span class="line">print(re.match(<span class="string">r'(aaa)bbb(ccc)'</span>, <span class="string">'aaabbbccc'</span>).group())</span><br><span class="line">print(re.match(<span class="string">r'(aaa)bbb(ccc)'</span>, <span class="string">'aaabbbccc'</span>).group(<span class="number">0</span>))</span><br><span class="line">print(re.match(<span class="string">r'(aaa)bbb(ccc)'</span>, <span class="string">'aaabbbccc'</span>).group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 竖线 | 匹配左右任意一个表达式（和 [] 相似）</span></span><br><span class="line">print(re.match(<span class="string">r'aaa(xxx|yyy|zzz)bbb'</span>, <span class="string">'aaaxxxbbb'</span>).group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># \num 引用分组 num 匹配到的字符串</span></span><br><span class="line"><span class="comment">#       前后保证一致，要使用到分组！</span></span><br><span class="line">print(re.match(<span class="string">r'^&lt;(\w+)&gt;\w+&lt;/\1&gt;$'</span>, <span class="string">'&lt;html&gt;nihao&lt;/html&gt;'</span>).group())</span><br><span class="line">print(re.match(<span class="string">r'^&lt;(\w+)&gt;&lt;(\w+)&gt;\w+&lt;/\2&gt;&lt;/\1&gt;$'</span>, <span class="string">'&lt;html&gt;&lt;div&gt;nihao&lt;/div&gt;&lt;/html&gt;'</span>).group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># (?P&lt;name&gt;正则)  分组起别名</span></span><br><span class="line"><span class="comment"># (?P=name)      引用别名为name分组匹配到的字符串</span></span><br><span class="line">print(re.match(<span class="string">r'^&lt;(?P&lt;re1&gt;\w+)&gt;&lt;(?P&lt;re2&gt;\w+)&gt;\w+&lt;/(?P=re2)&gt;&lt;/(?P=re1)&gt;$'</span>, <span class="string">'&lt;html&gt;&lt;div&gt;jovelin&lt;/div&gt;&lt;/html&gt;'</span>).group())</span><br></pre></td></tr></table></figure><h3 id="五、正则高级-API（4个）"><a href="#五、正则高级-API（4个）" class="headerlink" title="五、正则高级 API（4个）"></a>五、正则高级 API（4个）</h3><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">search()</td><td style="text-align:left">搜索字符串中符合正则表达式的内容 -&gt; 只返回第一个</td></tr><tr><td style="text-align:center">findall()</td><td style="text-align:left">搜索字符串中符合正则表达式的内容 -&gt; 返回一个列表</td></tr><tr><td style="text-align:center">sub()</td><td style="text-align:left">替换字符串中符合正则的内容 -&gt; 替换后的字符串</td></tr><tr><td style="text-align:center">split()</td><td style="text-align:left">按照指定正则切割字符串 -&gt; 返回列表</td></tr></tbody></table><p>代码演示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.search()</span></span><br><span class="line">print(re.search(<span class="string">r"\d+"</span>, <span class="string">"aaa111bbb222ccc333ddd"</span>).group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.findall()</span></span><br><span class="line">print(re.findall(<span class="string">r"\d+"</span>, <span class="string">"aaa111bbb222ccc333ddd"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.sub()</span></span><br><span class="line">print(re.sub(<span class="string">r"\d+"</span>, <span class="string">"***"</span>, <span class="string">"aaa111bbb222ccc333ddd"</span>))</span><br><span class="line"><span class="comment"># sub(正则, 替换成***, 被操作的字符串, 替换次数)</span></span><br><span class="line">print(re.sub(<span class="string">r"\d+"</span>, <span class="string">"***"</span>, <span class="string">"aaa111bbb222ccc333ddd"</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.split()</span></span><br><span class="line">print(re.split(<span class="string">r"\d+"</span>, <span class="string">"aaa111bbb222ccc333ddd eee"</span>))</span><br><span class="line">print(re.split(<span class="string">r"\d+|\s"</span>, <span class="string">"aaa111bbb222ccc333ddd eee"</span>))</span><br></pre></td></tr></table></figure><h3 id="六、r-的作用"><a href="#六、r-的作用" class="headerlink" title="六、r 的作用"></a>六、r 的作用</h3><p>让程序把正则直接当做正则看；(不是从字符串开始解释)</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line"># c:<span class="symbol">\a</span>aa<span class="symbol">\b</span>bb<span class="symbol">\c</span>cc</span><br><span class="line">print('c:<span class="symbol">\a</span>aa<span class="symbol">\b</span>bb<span class="symbol">\c</span>cc')</span><br><span class="line">print('c:<span class="symbol">\\</span>aaa<span class="symbol">\\</span>bbb<span class="symbol">\\</span>ccc')</span><br><span class="line"></span><br><span class="line"># 问题：在字符串中写 <span class="symbol">\ </span>时会转义，需要写成 <span class="symbol">\\</span></span><br><span class="line"># 不写 r 时 <span class="symbol">\\</span><span class="symbol">\\</span> -&gt; <span class="symbol">\\</span></span><br><span class="line">print(re.match('c:<span class="symbol">\\</span><span class="symbol">\\</span>aaa<span class="symbol">\\</span><span class="symbol">\\</span>bbb<span class="symbol">\\</span><span class="symbol">\\</span>ccc', 'c:<span class="symbol">\\</span>aaa<span class="symbol">\\</span>bbb<span class="symbol">\\</span>ccc').group())</span><br><span class="line"># 写 r 时 <span class="symbol">\\</span> -&gt; <span class="symbol">\\</span></span><br><span class="line">print(re.match(r'c:<span class="symbol">\\</span>aaa<span class="symbol">\\</span>bbb<span class="symbol">\\</span>ccc', 'c:<span class="symbol">\\</span>aaa<span class="symbol">\\</span>bbb<span class="symbol">\\</span>ccc').group())</span><br></pre></td></tr></table></figure><h3 id="七、贪婪-非贪婪"><a href="#七、贪婪-非贪婪" class="headerlink" title="七、贪婪/非贪婪"></a>七、贪婪/非贪婪</h3><p>贪婪：(量词在自己的范围内，取最多…)</p><p>非贪婪：(量词在自己的范围内，取最少… ) </p><p>非贪婪用法：量词后面加?</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'贪婪'</span>, re.match(<span class="string">r'a+'</span>, <span class="string">'aaa'</span>).group())  <span class="comment"># -&gt; aaa</span></span><br><span class="line"><span class="comment"># 量词后面加?</span></span><br><span class="line">print(<span class="string">'非贪婪'</span>, re.match(<span class="string">r'a+?'</span>, <span class="string">'aaa'</span>).group())  <span class="comment"># -&gt; a</span></span><br><span class="line">print(<span class="string">'贪婪'</span>, re.match(<span class="string">r'a&#123;1,2&#125;'</span>, <span class="string">'aaa'</span>).group())  <span class="comment"># -&gt; aa</span></span><br><span class="line"><span class="comment"># 量词后面加?</span></span><br><span class="line">print(<span class="string">'非贪婪'</span>, re.match(<span class="string">r'a&#123;1,3&#125;?'</span>, <span class="string">'aaa'</span>).group())  <span class="comment"># -&gt; a</span></span><br></pre></td></tr></table></figure><blockquote><p>更多参考内容： <a href="http://deerchao.net" target="_blank" rel="noopener">http://deerchao.net</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义；&lt;/li&gt;
&lt;li&gt;常用的元字符；&lt;/li&gt;
&lt;li&gt;常用的限定符（量词）；&lt;/li&gt;
&lt;li&gt;分组；&lt;/li&gt;
&lt;li&gt;正则高级 API（4个）；&lt;/li&gt;
&lt;li&gt;r 的作用；&lt;/li&gt;
&lt;li&gt;贪婪/非贪婪。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="正则表达式" scheme="http://jovelin.cn/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python 多任务-线程、进程与协程</title>
    <link href="http://jovelin.cn/2018/07/10/Python%20%E5%A4%9A%E4%BB%BB%E5%8A%A1-%E7%BA%BF%E7%A8%8B%E3%80%81%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B/"/>
    <id>http://jovelin.cn/2018/07/10/Python 多任务-线程、进程与协程/</id>
    <published>2018-07-09T16:20:12.000Z</published>
    <updated>2018-07-28T02:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>多线程；</li><li>多进程；</li><li>进程、线程对比；</li><li>多协程；</li><li>进程、线程、协程对比。</li></ol></blockquote><a id="more"></a><h1 id="Python-多任务-线程、进程与协程"><a href="#Python-多任务-线程、进程与协程" class="headerlink" title="Python 多任务-线程、进程与协程"></a>Python 多任务-线程、进程与协程</h1><p>什么叫“多任务”呢？简单地说，就是操作系统可以同时运行多个任务。</p><h3 id="一、线程"><a href="#一、线程" class="headerlink" title="一、线程"></a>一、线程</h3><p>线程是进程的一个实体，是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。</p><p><img src="https://upload-images.jianshu.io/upload_images/3365001-4cf0e2846bad9723.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="进程和线程.png"></p><h4 id="并行-并发"><a href="#并行-并发" class="headerlink" title="并行/并发"></a>并行/并发</h4><p><img src="https://upload-images.jianshu.io/upload_images/3365001-9365b83598e8f764.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="02-CPU及线程介绍.png"></p><p><strong>并发</strong></p><p>指的是任务数多余cpu核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换任务的速度相当快，看上去一起执行而已）</p><p><strong>并行</strong></p><p>指的是任务数小于等于cpu核数，即任务真的是一起执行的</p><h4 id="多线程图解"><a href="#多线程图解" class="headerlink" title="多线程图解"></a>多线程图解</h4><p><img src="https://upload-images.jianshu.io/upload_images/3365001-81ffaa2cf10ae661.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="03-线程.png"></p><h4 id="共享全局变量与问题"><a href="#共享全局变量与问题" class="headerlink" title="共享全局变量与问题"></a>共享全局变量与问题</h4><p>在一个进程内的所有线程共享全局变量，很方便在多个线程间共享数据。</p><p><strong>问题</strong>：</p><p>如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确。（即线程非安全）</p><h4 id="同步-异步"><a href="#同步-异步" class="headerlink" title="同步/异步"></a>同步/异步</h4><p>同步：单线程（从上到下依次执行顺序）</p><p>异步：多线程（开启多个任务一同执行，互不影响）</p><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><p><strong>当多个线程几乎同时修改某一个共享数据的时候，需要进行同步控制</strong>。</p><p><strong>锁的好处</strong>：</p><ul><li>确保了某段关键代码只能由一个线程从头到尾完整地执行</li></ul><p><strong>锁的坏处</strong>：</p><ul><li>阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了<br>由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁</li></ul><h4 id="死锁（一种-bug）"><a href="#死锁（一种-bug）" class="headerlink" title="死锁（一种 bug）"></a>死锁（一种 bug）</h4><p>在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁。</p><p><strong>避免死锁</strong></p><ul><li>程序设计时要尽量避免（银行家算法）</li><li>添加超时时间等</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>1.多线程体验</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 解释器中有一个模块专门控制线程，实现多任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        print(<span class="string">"send msg"</span>, i + <span class="number">1</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_msg</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        print(<span class="string">"receive msg"</span>, i + <span class="number">1</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建线程对象（target=函数名, name=线程别名, args=参数, kwargs=字典参数）</span></span><br><span class="line">    t1 = threading.Thread(target=send_msg, name=<span class="string">"send"</span>, args=(<span class="number">3</span>,))</span><br><span class="line">    t2 = threading.Thread(target=receive_msg, name=<span class="string">"receive"</span>, kwargs=&#123;<span class="string">"num"</span>: <span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 三个 API</span></span><br><span class="line">    print(threading.enumerate())</span><br><span class="line">    print(threading.current_thread())</span><br><span class="line">    print(threading.active_count())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 守护线程</span></span><br><span class="line">    t1.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">    t2.setDaemon(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启线程</span></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 线程等待</span></span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"*** main thread ***"</span>)</span><br></pre></td></tr></table></figure><p>2.自定义线程类</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendThread</span>(<span class="title">threading</span>.<span class="title">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, num)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># threading.Thread.__init__(self)</span></span><br><span class="line">        <span class="keyword">super</span>(SendThread, <span class="keyword">self</span>).__init_<span class="number">_</span>()</span><br><span class="line">        <span class="comment"># super().__init__()</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.num = num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)<span class="symbol">:</span></span><br><span class="line">            print(<span class="string">"send msg"</span>, i + <span class="number">1</span>)</span><br><span class="line">            time.sleep(<span class="number">0</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.send_msg()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReceiveThread</span>(<span class="title">threading</span>.<span class="title">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive_msg</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)<span class="symbol">:</span></span><br><span class="line">            print(<span class="string">"receive msg"</span>, i + <span class="number">1</span>)</span><br><span class="line">            time.sleep(<span class="number">0</span>.<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.receive_msg()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    t1 = SendThread(<span class="number">3</span>)</span><br><span class="line">    t2 = ReceiveThread()</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"*** main thread ***"</span>)</span><br></pre></td></tr></table></figure><h3 id="二、进程"><a href="#二、进程" class="headerlink" title="二、进程"></a>二、进程</h3><p>运行的程序以及运行时用到的资源这个整体称之为进程，是系统进行资源分配和调度的一个独立单位。</p><p><img src="https://upload-images.jianshu.io/upload_images/3365001-4e2b4618127c7d94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="01-进程.png"></p><h4 id="进程间通信-Queue"><a href="#进程间通信-Queue" class="headerlink" title="进程间通信-Queue"></a>进程间通信-Queue</h4><p>进程间通信：运行的程序之间的数据共享。</p><h3 id="三、进程、线程对比"><a href="#三、进程、线程对比" class="headerlink" title="三、进程、线程对比"></a>三、进程、线程对比</h3><p>功能</p><ul><li>进程，能够完成多任务，比如 在一台电脑上能够同时运行多个 QQ。</li><li>线程，能够完成多任务，比如 一个 QQ 中的多个聊天窗口。</li></ul><p>定义的不同</p><ul><li>进程是系统进行资源分配和调度的一个独立单位。</li><li>线程是进程的一个实体，是 CPU  调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。</li><li>线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器，一组寄存器和栈)，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</li></ul><p>区别</p><ul><li>一个程序至少有一个进程，一个进程至少有一个线程。</li><li>线程的划分尺度小于进程(资源比进程少)，使得多线程程序的并发性高。</li><li>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率，</li><li>线线程不能够独立执行，必须依存在进程中。</li><li>可以将进程理解为工厂中的一条流水线，而其中的线程就是这个流水线上的工人。</li></ul><p>优缺点</p><ul><li>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。</li></ul><h3 id="四、协程"><a href="#四、协程" class="headerlink" title="四、协程"></a>四、协程</h3><p>协程，又称微线程，纤程。英文名Coroutine。</p><p><img src="https://upload-images.jianshu.io/upload_images/3365001-d37fbaaca0679c6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="02-协程.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3365001-8f26f1b69124ba7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="03-迭代器和生成器.png"></p><h4 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h4><p>为了更好使用协程来完成多任务，python中的greenlet模块对其封装，从而使得切换任务变的更加简单</p><p><strong>安装方式</strong></p><p>使用如下命令安装 greenlet 模块:</p><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">pip3 list: 验证已安装的python第三方插件（如果没有pip3会提示安装）</span><br><span class="line"></span><br><span class="line">sudo pip3 install greenlet</span><br></pre></td></tr></table></figure><h4 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h4><p>greenlet已经实现了协程，但是这个还的人工切换，是不是觉得太麻烦了，不要捉急，python还有一个比greenlet更强大的并且能够自动切换任务的模块gevent</p><p>其原理是当一个greenlet遇到IO(指的是input output 输入输出，比如网络、文件操作等)操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。</p><p>由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO</p><p><strong>安装方式</strong></p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> gevent</span><br></pre></td></tr></table></figure><h4 id="协程和线程差异"><a href="#协程和线程差异" class="headerlink" title="协程和线程差异"></a>协程和线程差异</h4><p>在实现多任务时, 线程切换从系统层面远不止保存和恢复 CPU 上下文这么简单。</p><p>操作系统为了程序运行的高效性每个线程都有自己缓存 Cache 等等数据，操作系统还会帮你做这些数据的恢复操作。所以线程的切换非常耗性能。</p><p>但是协程的切换只是单纯的操作 CPU 的上下文，所以一秒钟切换个上百万次系统都抗的住。</p><h3 id="五、进程、线程、协程对比"><a href="#五、进程、线程、协程对比" class="headerlink" title="五、进程、线程、协程对比"></a>五、进程、线程、协程对比</h3><ol><li>进程是资源分配的单位</li><li>线程是操作系统调度的单位</li><li>进程切换需要的资源很最大，效率很低</li><li>线程切换需要的资源一般，效率一般（当然了在不考虑GIL的情况下）</li><li>协程切换任务资源很小，效率高</li><li>多进程、多线程根据cpu核数不一样可能是并行的，但是协程是在一个线程中 所以是并发</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多线程；&lt;/li&gt;
&lt;li&gt;多进程；&lt;/li&gt;
&lt;li&gt;进程、线程对比；&lt;/li&gt;
&lt;li&gt;多协程；&lt;/li&gt;
&lt;li&gt;进程、线程、协程对比。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="多任务" scheme="http://jovelin.cn/tags/%E5%A4%9A%E4%BB%BB%E5%8A%A1/"/>
    
      <category term="线程" scheme="http://jovelin.cn/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="进程" scheme="http://jovelin.cn/tags/%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="协程" scheme="http://jovelin.cn/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python 网络通信-udp、tcp 与 socket</title>
    <link href="http://jovelin.cn/2018/07/08/Python%20%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1-udp%E3%80%81tcp%20%E4%B8%8E%20socket/"/>
    <id>http://jovelin.cn/2018/07/08/Python 网络通信-udp、tcp 与 socket/</id>
    <published>2018-07-07T16:21:11.000Z</published>
    <updated>2018-07-28T02:21:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ol><li>UDP 和 TCP 及 socket 介绍；</li><li>网络七层协议(四/五层模型)；</li><li>IP 地址与端口；</li><li>Python3 编码转换；</li><li>Socket 套接字；</li><li>UDP 协议；</li><li>TCP 协议。</li></ol></blockquote><a id="more"></a><h1 id="Python-网络通信"><a href="#Python-网络通信" class="headerlink" title="Python 网络通信"></a>Python 网络通信</h1><h3 id="一、UDP-和-TCP-及-socket-介绍"><a href="#一、UDP-和-TCP-及-socket-介绍" class="headerlink" title="一、UDP 和 TCP 及 socket 介绍"></a>一、UDP 和 TCP 及 socket 介绍</h3><p><strong>注意：udp 和 tcp 都是网络传输的协议，只不过具体传输形式不一样，但功能都是定义网络传输数据规则。</strong></p><p><strong>udp 和 tcp (发短信和打电话)(不同: 是否创建链接)</strong></p><ol><li><p><strong>udp 是用户数据报协议</strong>，UDP(User Datagram Protocol)不能保证数据的准确性和有效性。<br>(数据报:是通过网络传输的数据的基本单元) </p></li><li><p><strong>tcp 是传输控制协议</strong>，TCP(Transmission Control Protocol)能保证数据的准确性和有效性。<br>(和udp差不多依靠socket技术)</p></li><li><p><strong>socket 就是具体实现 tcp 和 udp 的底层技术(也称套接字/流对象)</strong>(不在网络七层协议之列-因为是技术不是协议)</p></li></ol><h3 id="二、网络七层协议-四-五层模型"><a href="#二、网络七层协议-四-五层模型" class="headerlink" title="二、网络七层协议(四/五层模型)"></a>二、网络七层协议(四/五层模型)</h3><p><img src="https://upload-images.jianshu.io/upload_images/3365001-893eb6882ef825ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="七层协议1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3365001-03725767e52c896a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="七层协议2.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3365001-d812e52bc2dc7743.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网络七层协议.png"></p><h3 id="三、IP-地址与端口"><a href="#三、IP-地址与端口" class="headerlink" title="三、IP 地址与端口"></a>三、IP 地址与端口</h3><p>网络通信过程中，之所需要ip、port等，就是为了能够将一个复杂的通信过程进行任务划分，从而保证数据准确无误的传递。</p><p><img src="https://upload-images.jianshu.io/upload_images/3365001-5d9168459fadd31a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ip和端口.png"></p><h4 id="ip-地址"><a href="#ip-地址" class="headerlink" title="ip 地址"></a>ip 地址</h4><p>作用：用来在网络中标记一台电脑，比如 192．168．1．1 在本地局域网上是唯一的。</p><p>注意：IP 地址 127．0．0．1~127．255．255．255 用于回路测试</p><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>端口是通过端口号来标记的，端口号只有整数，范围是从0到65535</p><h5 id="知名端口"><a href="#知名端口" class="headerlink" title="知名端口"></a>知名端口</h5><p>众所周知的端口号，范围从0到1023</p><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">80 </span>端口分配给HTTP服务</span><br><span class="line"><span class="symbol">21 </span>端口分配给FTP服务</span><br></pre></td></tr></table></figure><h5 id="动态端口"><a href="#动态端口" class="headerlink" title="动态端口"></a>动态端口</h5><p>范围是从1024到65535</p><h5 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">netstat －an 查看端口状态</span><br><span class="line">lsof -<span class="selector-tag">i</span>:port 查看端口占用</span><br></pre></td></tr></table></figure><h3 id="四、Python3-编码转换"><a href="#四、Python3-编码转换" class="headerlink" title="四、Python3 编码转换"></a>四、Python3 编码转换</h3><p>str-&gt;bytes:encode编码</p><p>bytes-&gt;str:decode解码</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: 在解码编码过程中使用的编码(此处指“编码方案”是名词)</span></span><br><span class="line"><span class="comment"># errors: 错误的处理方案</span></span><br><span class="line">bytes.decode(<span class="attribute">encoding</span>=<span class="string">"utf-8"</span>, <span class="attribute">errors</span>=<span class="string">"strict"</span>)</span><br><span class="line">str.encode(<span class="attribute">encoding</span>=<span class="string">"utf-8"</span>, <span class="attribute">errors</span>=<span class="string">"strict"</span>)</span><br></pre></td></tr></table></figure><p>详细的可以参照官方文档：</p><p><a href="https://docs.python.org/3/library/stdtypes.html?highlight=decode#str.encode" target="_blank" rel="noopener">str.encode()</a></p><p><a href="https://docs.python.org/3/library/stdtypes.html?highlight=decode#bytes.decode" target="_blank" rel="noopener">bytes.decode()</a></p><h3 id="五、Socket-套接字"><a href="#五、Socket-套接字" class="headerlink" title="五、Socket 套接字"></a>五、Socket 套接字</h3><p><strong>socket(简称 套接字也成为插口–流对象)</strong> 是进程间通信的一种方式，它与其他进程间通信的一个主要不同是：</p><p>它能实现不同主机间的进程间通信，我们网络上各种各样的服务大多都是基于 Socket 来完成通信的。</p><p>例如我们每天浏览网页、QQ 聊天、收发 email 等等。</p><h4 id="Socket-反问理解"><a href="#Socket-反问理解" class="headerlink" title="Socket 反问理解"></a>Socket 反问理解</h4><p>———start———</p><p><strong>what 是什么</strong>？（概念、理解）</p><p>socket(简称 套接字 也称为插口–流对象) 是进程间通信的一种方式</p><p><br></p><p><strong>why 为什么用</strong>？（用它的好处，特点/不同点）</p><p>是实现tcp和udp的底层技术，能实现 不同主机间 的进程间通信</p><p><br></p><p><strong>where 在哪使用</strong>？（案例、项目）</p><p>网络程序发送、接收数据（发短信、打电话、广播）</p><p>————end————</p><h3 id="六、UDP-协议"><a href="#六、UDP-协议" class="headerlink" title="六、UDP 协议"></a>六、UDP 协议</h3><p>udp 是用户数据报协议，UDP (User Datagram Protocol) 不能保证数据的准确性和有效性。 (数据报:是通过网络传输的数据的基本单元)</p><p>udp 通信模型中，在通信开始之前，不需要建立相关的链接，只需要发送数据即可，类似于生活中，”写信/发短信”</p><p>python 使用 udp 协议要通过 socket 技术:</p><pre><code>使用步骤：1.引包 2.创建流对象(ipv4, udp) 3.发送(二进制字符串, 元组ip和端口) 4.关闭流对象</code></pre><p>创建 socket 语法</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Address Family：可以选择 AF_INET（用于 Internet 进程间通信） 或者 AF_UNIX（用于同一台机器进程间通信）,实际工作中常用AF_INET</span></span><br><span class="line"><span class="comment"># Type：套接字类型，可以是 SOCK_STREAM（流式套接字，主要用于 TCP 协议）或者 SOCK_DGRAM（数据报套接字，主要用于 UDP 协议）</span></span><br><span class="line"></span><br><span class="line">import <span class="built_in">socket</span></span><br><span class="line">    <span class="built_in">socket</span>.<span class="built_in">socket</span>(AddressFamily, Type)</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>1.udp 发送</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.引包</span></span><br><span class="line">import <span class="built_in">socket</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 2.创建流对象(ipv4, udp)</span></span><br><span class="line">    <span class="comment"># socket是一个模块</span></span><br><span class="line">    <span class="comment"># socket.socket是一个类</span></span><br><span class="line">    <span class="comment">#   socket.AF_INET: 这个socket数据传世用ipv4;</span></span><br><span class="line">    <span class="comment">#   socket.SOCK_DGRAM: 这个socket使用udp协议进行数据传输;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># socket对象(套接字);    插口 -- 流对象(就要关闭 -- 发送和接收信息)</span></span><br><span class="line">    udp_socket = <span class="built_in">socket</span>.<span class="built_in">socket</span>(<span class="built_in">socket</span>.AF_INET, <span class="built_in">socket</span>.SOCK_DGRAM)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3.发送(二进制字符串, 元组ip和端口)</span></span><br><span class="line">    str1 = <span class="string">'你好,我是udp协议发送的测试数据...'</span></span><br><span class="line">    tuple1 = (<span class="string">'192.168.1.1'</span>, <span class="number">8888</span>)</span><br><span class="line">    udp_socket.sendto(str1.encode(<span class="string">'utf-8'</span>), tuple1)</span><br><span class="line">    print(tuple1, <span class="string">'发送成功!'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4.关闭流对象</span></span><br><span class="line">    udp_socket.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p>2.udp 接收（主动接收方需手动绑定端口，发送方才知道发送给谁）</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">import <span class="built_in">socket</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 1.创建套接字对象</span></span><br><span class="line">    udp_socket = <span class="built_in">socket</span>.<span class="built_in">socket</span>(<span class="built_in">socket</span>.AF_INET, <span class="built_in">socket</span>.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 绑定本地的相关信息，如果一个网络程序不绑定，则系统会随机分配</span></span><br><span class="line">    local_addr = (<span class="string">''</span>, <span class="number">8888</span>) <span class="comment">#  ip地址和端口号，ip一般不用写，表示本机的任何一个ip</span></span><br><span class="line">    udp_socket.bind(local_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.数据接收( recvfrom() )</span></span><br><span class="line">    <span class="comment">#       参数: 最多一次性接收1024字节;</span></span><br><span class="line">    <span class="comment">#       返回值: 一个元组(二进制数据, ip及port组成的元组)</span></span><br><span class="line">    <span class="comment">#       recvfrom(): 可以阻塞代码!( 类似input() )</span></span><br><span class="line">    <span class="comment">#       发送和接收数据的时候,udp承受的最大上线为: 64k</span></span><br><span class="line">    str2, tuple2 = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(str2)</span><br><span class="line">    print(tuple2)</span><br><span class="line">    print(str2.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="comment"># print(str2.decode('gbk'))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.关闭套接字</span></span><br><span class="line">    udp_socket.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p>3.udp 聊天器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">说明：在一个电脑中编写1个程序，有2个功能：</span></span><br><span class="line"><span class="string">    1.获取键盘数据，并将其发送给对方</span></span><br><span class="line"><span class="string">    2.接收数据并显示</span></span><br><span class="line"><span class="string">    并且功能数据进行选择以上的2个功能调用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""获取键盘数据，并将其发送给对方"""</span></span><br><span class="line">    <span class="comment"># 1. 从键盘输入数据</span></span><br><span class="line">    msg = input(<span class="string">"\n请输入要发送的数据:"</span>)</span><br><span class="line">    <span class="comment"># 2. 输入对方的ip地址</span></span><br><span class="line">    dest_ip = input(<span class="string">"\n请输入对方的ip地址:"</span>)</span><br><span class="line">    <span class="comment"># 3. 输入对方的port</span></span><br><span class="line">    dest_port = int(input(<span class="string">"\n请输入对方的port:"</span>))</span><br><span class="line">    <span class="comment"># 4. 发送数据</span></span><br><span class="line">    udp_socket.sendto(msg.encode(<span class="string">"utf-8"</span>), (dest_ip, dest_port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""接收数据并显示"""</span></span><br><span class="line">    <span class="comment"># 1. 接收数据</span></span><br><span class="line">    recv_msg = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 2. 解码</span></span><br><span class="line">    recv_ip = recv_msg[<span class="number">1</span>]</span><br><span class="line">    recv_msg = recv_msg[<span class="number">0</span>].decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="comment"># 3. 显示接收到的数据</span></span><br><span class="line">    print(<span class="string">"&gt;&gt;&gt;%s:%s"</span> % (str(recv_ip), recv_msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1. 创建套接字</span></span><br><span class="line">    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    <span class="comment"># 2. 绑定本地信息</span></span><br><span class="line">    udp_socket.bind((<span class="string">""</span>, <span class="number">7890</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 3. 选择功能</span></span><br><span class="line">        print(<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line">        print(<span class="string">"1:发送消息"</span>)</span><br><span class="line">        print(<span class="string">"2:接收消息"</span>)</span><br><span class="line">        print(<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line">        op_num = input(<span class="string">"请输入要操作的功能序号:"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 根据选择调用相应的函数</span></span><br><span class="line">        <span class="keyword">if</span> op_num == <span class="string">"1"</span>:</span><br><span class="line">            send_msg(udp_socket)</span><br><span class="line">        <span class="keyword">elif</span> op_num == <span class="string">"2"</span>:</span><br><span class="line">            recv_msg(udp_socket)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入有误，请重新输入..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="七、TCP-协议"><a href="#七、TCP-协议" class="headerlink" title="七、TCP 协议"></a>七、TCP 协议</h3><p>TCP协议，传输控制协议（英语：Transmission Control Protocol，缩写为 TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的 RFC 793 定义。</p><p>TCP通信需要经过 <strong>创建连接、数据传送、终止连接</strong> 三个步骤。</p><p>TCP通信模型中，在通信开始之前，一定要先建立相关的链接，才能发送数据，类似于生活中，”打电话””</p><h4 id="TCP-特点"><a href="#TCP-特点" class="headerlink" title="TCP 特点"></a>TCP 特点</h4><p><strong>1.面向连接</strong></p><ol><li>通信双方必须先建立连接才能进行数据的传输，双方都必须为该连接分配必要的系统内核资源，以管理连接的状态和连接上的传输。</li><li><strong>TCP不适用于广播的应用程序，基于广播的应用程序请使用UDP协议。</strong></li></ol><p><strong>2.可靠传输</strong></p><ol><li>TCP采用发送应答机制<ul><li>TCP发送的每个报文段都必须得到接收方的应答才认为这个TCP报文段传输成功</li></ul></li><li>超时重传<ul><li>发送端发出一个报文段之后就启动定时器，如果在定时时间内没有收到应答就重新发送这个报文段。</li><li>TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。</li></ul></li><li>错误校验<ul><li>TCP用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验和。</li></ul></li><li>流量控制和阻塞管理<ul><li>流量控制用来避免主机发送得过快而使接收方来不及完全收下。</li></ul></li></ol><h4 id="tcp-注意点"><a href="#tcp-注意点" class="headerlink" title="tcp 注意点"></a>tcp 注意点</h4><ol><li>tcp服务器一般情况下都需要绑定ip和端口，否则客户端找不到这个服务器及其服务对应的端口</li><li>tcp客户端一般不绑定，因为是主动链接服务器，所以只要确定好服务器的ip、port等信息就好，本地客户端可以随机</li><li>tcp服务器中通过listen可以将socket创建出来的主动套接字变为被动的，这是做tcp服务器时必须要做的</li><li>当客户端需要链接服务器时，就需要使用connect进行链接，udp是不需要链接的而是直接发送，但是tcp必须先链接，只有链接成功才能通信</li><li>当一个tcp客户端连接服务器时，服务器端会有1个新的套接字，这个套接字用来标记这个客户端，单独为这个客户端服务</li><li>listen后的套接字是被动套接字，用来接收新的客户端的链接请求的，而accept返回的新套接字是标记这个新客户端的</li><li>关闭listen后的套接字意味着被动套接字关闭了，会导致新的客户端不能够链接服务器，但是之前已经链接成功的客户端正常通信。</li><li>关闭accept返回的套接字意味着这个客户端已经服务完毕</li><li>当客户端的套接字调用close后，服务器端会recv解堵塞，并且返回的长度为0，因此服务器可以通过返回数据的长度来区别客户端是否已经下线</li><li>空字符串能够直接发送不能够直接接收(tcp服务端会过滤)</li></ol><h4 id="tcp-三次握手和四次挥手"><a href="#tcp-三次握手和四次挥手" class="headerlink" title="tcp 三次握手和四次挥手"></a>tcp 三次握手和四次挥手</h4><h5 id="tcp-三次握手图解"><a href="#tcp-三次握手图解" class="headerlink" title="tcp 三次握手图解"></a>tcp 三次握手图解</h5><p><img src="https://upload-images.jianshu.io/upload_images/3365001-3f3bcc28ca39fa1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tcp三次握手1.png"></p><table><thead><tr><th>标志位</th><th>序号</th></tr></thead><tbody><tr><td>SYN: 表示连接请求</td><td>seq:表示报文序号</td></tr><tr><td>ACK: 表示确认</td><td>ack: 表示确认号</td></tr><tr><td>FIN:  表示关闭连接</td><td></td></tr></tbody></table><p><img src="https://upload-images.jianshu.io/upload_images/3365001-4203e495de645009.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="tcp三次握手.png"></p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）第一次握手：<span class="built_in">Client</span>将标志位SYN置为<span class="number">1</span>，随机产生一个值seq=J，并将该数据包发送给<span class="built_in">Server</span>，<span class="built_in">Client</span>进入SYN_SENT状态，等待<span class="built_in">Server</span>确认。</span><br><span class="line">（<span class="number">2</span>）第二次握手：<span class="built_in">Server</span>收到数据包后由标志位SYN=<span class="number">1</span>知道<span class="built_in">Client</span>请求建立连接，<span class="built_in">Server</span>将标志位SYN和ACK都置为<span class="number">1</span>， ack (number )=J+<span class="number">1</span>，随机产生一个值seq=K，并将该数据包发送给<span class="built_in">Client</span>以确认连接请求，<span class="built_in">Server</span>进入SYN_RCVD状态。</span><br><span class="line">（<span class="number">3</span>）第三次握手：<span class="built_in">Client</span>收到确认后，检查ack是否为J+<span class="number">1</span>，ACK是否为<span class="number">1</span>，如果正确则将标志位ACK置为<span class="number">1</span>，ack=K+<span class="number">1</span>，并将该数据包发送给<span class="built_in">Server</span>，<span class="built_in">Server</span>检查ack是否为K+<span class="number">1</span>，ACK是否为<span class="number">1</span>，如果正确则连接建立成功，<span class="built_in">Client</span>和<span class="built_in">Server</span>进入ESTABLISHED状态，完成三次握手，随后<span class="built_in">Client</span>与<span class="built_in">Server</span>之间可以开始传输数据了。</span><br><span class="line"></span><br><span class="line">理解总结：</span><br><span class="line"><span class="number">1.</span>客户端发起连接请求，等待服务端确定</span><br><span class="line"><span class="number">2.</span>服务端确认连接请求</span><br><span class="line"><span class="number">3.</span>客户端收到确认后，再次发送数据包验证（验证正确，连接成功，完成三次握手）</span><br></pre></td></tr></table></figure><h5 id="tcp-四次挥手图解"><a href="#tcp-四次挥手图解" class="headerlink" title="tcp 四次挥手图解"></a>tcp 四次挥手图解</h5><p><img src="https://upload-images.jianshu.io/upload_images/3365001-e77fdb8210af7052.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tcp四次挥手.png"></p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">客户端主动关闭（三次挥手）：</span><br><span class="line">（<span class="number">1</span>）第一次挥手：客户端发送一个FIN，用来关闭客户端到服务的数据传送。</span><br><span class="line">（<span class="number">2</span>）第二次挥手：服务端发送一个ACK，用来关闭服务端到客户端的数据传送。</span><br><span class="line">（<span class="number">3</span>) 第三次挥手：客户端收到ACK后，接着发送一个ACK给服务端，确认序号为收到序号+<span class="number">1</span>。</span><br><span class="line"></span><br><span class="line">服务端主动关闭（四次挥手）：</span><br><span class="line">（<span class="number">1</span>）第一次挥手：server发送一个FIN，用来关闭server到client的数据传送。</span><br><span class="line">（<span class="number">2</span>) 第二次挥手：client收到FIN后，发送一个ACK给server，确认序号为收到序号+<span class="number">1</span>。</span><br><span class="line">（<span class="number">3</span>）第三次挥手：client发送一个FIN，用来关闭Client到Server的数据传送。</span><br><span class="line">（<span class="number">4</span>) 第四次挥手：Server收到FIN后，接着发送一个ACK给Client，确认序号为收到序号+<span class="number">1</span>。</span><br><span class="line"></span><br><span class="line">理解总结：</span><br><span class="line"><span class="number">1.</span>服务端 close()（我要关闭连接了）</span><br><span class="line"><span class="number">2.</span>客户端收到后发送一条消息（别急，事情还没处理完...）</span><br><span class="line"><span class="number">3.</span>客户端处理完成后 close()（可以关闭连接了）</span><br><span class="line"><span class="number">4.</span>服务端接着发送一个 ACK 给 Client（连接已关闭！四次挥手完成）</span><br></pre></td></tr></table></figure><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p>1.tcp 客户端</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">from socket import *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket</span></span><br><span class="line">tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目的信息</span></span><br><span class="line">server_ip = input(<span class="string">"请输入服务器ip:"</span>)</span><br><span class="line">server_port = int(input(<span class="string">"请输入服务器port:"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接服务器</span></span><br><span class="line">tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示用户输入数据</span></span><br><span class="line">send_data = input(<span class="string">"请输入要发送的数据："</span>)</span><br><span class="line"></span><br><span class="line">tcp_client_socket.send(send_data.encode(<span class="string">"gbk"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收对方发送过来的数据，最大接收1024个字节</span></span><br><span class="line">recvData = tcp_client_socket.recv(1024)</span><br><span class="line"><span class="section">print('接收到的数据为:', recvData.decode('gbk'))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭套接字</span></span><br><span class="line">tcp_client_socket.close()</span><br></pre></td></tr></table></figure><p>2.tcp 服务端</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">步骤：</span></span><br><span class="line"><span class="string">    1.socket创建一个套接字</span></span><br><span class="line"><span class="string">    2.bind绑定ip和port</span></span><br><span class="line"><span class="string">    3.listen使套接字变为可以被动链接</span></span><br><span class="line"><span class="string">    4.accept等待客户端的链接</span></span><br><span class="line"><span class="string">    5.recv/send接收发送数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">from socket import *</span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建socket</span></span><br><span class="line">tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 本地信息</span></span><br><span class="line">address = (<span class="string">''</span>, <span class="number">7788</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 绑定</span></span><br><span class="line">tcp_server_socket.bind(address)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 使用socket创建的套接字默认的属性是主动的，使用listen将其变为被动的，这样就可以接收别人的链接了</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果有新的客户端来链接服务器，那么就产生一个新的套接字专门为这个客户端服务</span></span><br><span class="line"><span class="meta"># client_socket用来为这个客户端服务</span></span><br><span class="line"><span class="meta"># tcp_server_socket就可以省下来专门等待其他新客户端的链接</span></span><br><span class="line">client_socket, clientAddr = tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line"><span class="meta"># 接收对方发送过来的数据</span></span><br><span class="line">recv_data = client_socket.recv(<span class="number">1024</span>)  # 接收<span class="number">1024</span>个字节</span><br><span class="line">print(<span class="string">'接收到的数据为:'</span>, recv_data.decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta"># 发送一些数据到客户端</span></span><br><span class="line">client_socket.send(<span class="string">"thank you !"</span>.encode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭为这个客户端服务的套接字，只要关闭了，就意味着为不能再为这个客户端服务了，如果还需要服务，只能再次重新连接</span></span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure><h3 id="八、TCP-与-UDP-的不同点"><a href="#八、TCP-与-UDP-的不同点" class="headerlink" title="八、TCP 与 UDP 的不同点"></a>八、TCP 与 UDP 的不同点</h3><p><strong>TCP：</strong></p><ul><li>面向连接（确认有创建三方交握，连接已创建才作传输。）</li><li>有序数据传输</li><li>重发丢失的数据包</li><li>舍弃重复的数据包</li><li>无差错的数据传输</li><li>阻塞/流量控制</li></ul><p><strong>UDP 通信模型（类似于写信/发短信/广播/视频聊天）</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/3365001-66f6ee5be9f9df0f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="udp通信模型.jpg"></p><p><strong>TCP 通信模型（类似于打电话）</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/3365001-55244b661df4c1a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TCP通信模型.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UDP 和 TCP 及 socket 介绍；&lt;/li&gt;
&lt;li&gt;网络七层协议(四/五层模型)；&lt;/li&gt;
&lt;li&gt;IP 地址与端口；&lt;/li&gt;
&lt;li&gt;Python3 编码转换；&lt;/li&gt;
&lt;li&gt;Socket 套接字；&lt;/li&gt;
&lt;li&gt;UDP 协议；&lt;/li&gt;
&lt;li&gt;TCP 协议。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://jovelin.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jovelin.cn/tags/Python/"/>
    
      <category term="udp" scheme="http://jovelin.cn/tags/udp/"/>
    
      <category term="tcp" scheme="http://jovelin.cn/tags/tcp/"/>
    
      <category term="socket" scheme="http://jovelin.cn/tags/socket/"/>
    
  </entry>
  
</feed>
